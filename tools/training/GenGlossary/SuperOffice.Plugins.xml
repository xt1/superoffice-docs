<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SuperOffice.Plugins</name>
    </assembly>
    <members>
        <member name="T:SuperOffice.CRM.AddressInfo">
            <summary>
            Interface providing information about an address.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.AddressInfo.AddressLine1">
            <summary>
            Address, line 1
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.AddressInfo.AddressLine2">
            <summary>
            Address, line 2
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.AddressInfo.AddressLine3">
            <summary>
            Address, line 3
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.AddressInfo.City">
            <summary>
            Town
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.AddressInfo.ZipCode">
            <summary>
            Postcode. 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.AddressInfo.CountryCode">
            <summary>
            Country code
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.AddressInfo.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IAppointmentInfo">
            <summary>
            Interface providing information about the appointment.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.AppointmentId">
            <summary>
            Primary key for the appointment
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.AssociateId">
            <summary>
            Owner associate id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.AssociateName">
            <summary>
            The appointment's owner, name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.AssociateOwnerName">
            <summary>
            Name of owner associate
            If this is a child booking, we want to look to the mother appointment's owner
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.ContactId">
            <summary>
            Associated contact id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.ContactName">
            <summary>
            Associated contact name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.PersonId">
            <summary>
            Associated person id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.PersonName">
            <summary>
            The appointment's person, name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.ProjectId">
            <summary>
            Associated project id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.ProjectName">
            <summary>
            Associated project name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.Description">
            <summary>
            Appointment description
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.DescriptionLine">
            <summary>
            First line of appointment description
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.CreationDate">
            <summary>
            The appointment's creation date, formatted YYYYMMdd
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.CreationTime">
            <summary>
            The appointment's creation time formatted HHmmss
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.UpdatedDate">
            <summary>
            The date of the last update, formatted YYYYMMdd
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.UpdatedTime">
            <summary>
            The time of the last update, formatted HHmmss
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.UpdatedCount">
            <summary>
            Number of times the appointment has been updated. (Only counts from version SIX)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.Type">
            <summary>
            Activitytype
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.InvitationUrl">
            <summary>
            The connection from "superoffice:invitations" to the invitation dialog box 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.InvitationClickText">
            <summary>
            The connection from "Click here to open the SuperOffice SIX dialog box" shown for registered contacts. Blank if the recipient not is a registered contact
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.InvitationFormattedList">
            <summary>
            Formatted list of inviteted ??, made for iCal
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.InviteeId">
            <summary>
            User ID for this rows invitee (Used with bookings) 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.InviteeName">
            <summary>
            The name of this rows invited person
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.PublishStartDate">
            <summary>
            Appointment, start date for publication
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.PublishEndDate">
            <summary>
            Appointment, end date for publication
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.StartTime">
            <summary>
            The appointment's starttime, formatted HHmmss
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.EndTime">
            <summary>
            The appointment's endtime, formatted HHmmss
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.StartDate">
            <summary>
            Date or deadline if this is a task or an appointment
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.EndDate">
            <summary>
            The appointment's enddate, formatted YYYYMMdd
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.EMail">
            <summary>
            The appointment's owner's emailaddress
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.FreeBusy">
            <summary>
            Free/Busy time
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.Location">
            <summary>
            Appointment location
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.StartDateLabel">
            <summary>
            Date or deadline label
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.ICalPriority">
            <summary>
            Priority on ical format
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.RepeatingTooltip">
            <summary>
            The appointment's tooltip for repeating appointments
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.RepeatingEndDate">
            <summary>
            The end date for the appointment's repeating pattern, formatted as yyyyMMdd
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.MainRepeatingPattern">
            <summary>
            The main feature of the appointments repeating pattern, formatted like the Daily pattern "FREQ=DAILY;" for example
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.SubRepeatingPattern">
            <summary>
            The secondary feature of the appointment's repeating pattern, formatted as the sub-pattern Daily Workday "BYDAY=MO,TU,WE,TH,FR;", for example
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.StartDateTimeAndDuration">
            <summary>
            The appointment's date and time. E.g. 30.03.2005 (16:00)-(17:00).
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.Priority">
            <summary>
            The appointment's priority in clear text
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.PriorityId">
            <summary>
            The appointment's priority by number, 1 = low, 2 = medium, 3 = high
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.RepeatingPattern">
            <summary>
            The entire appointment's repeating pattern, formatted as "RRULE:" + bpat + bsub + bunt
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.RepeatingPatternEnd">
            <summary>
            Repeating pattern end date
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.RepeatingPatternWeekStart">
            <summary>
            Repeating pattern week start
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.RepeatingStartDate">
            <summary>
            The start date for the appointment's repeating pattern, formatted as YYYYMMdd
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.RepeatingPatternText">
            <summary>
            The text "This appointment is part of a repeating pattern:"
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.RepeatingPatternText2">
            <summary>
            The text "See below in this message for a list of the repeating appointments."
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.RepeatingAppointmentId">
            <summary>
            Appointment ID for any repeating appointments
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.ICalId">
            <summary>
            Unique id made for iCal. SerialnoDappointmentIdDinvitedIdDupdated. Where D is a separator 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.State">
            <summary>
            The state of the appointment: "TENTATIVE", "CONFIRMED" eller "CANCELLED"
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo.PreferredTZLocation">
            <summary>
            The preferred timezone for the appointment
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IAppointmentInfo.GetUserDefinedDecimal(System.Int32)">
            <summary>
            User-defined field 1-10 of the decimal (.NET double) number type.
            </summary>
            <param name="fieldNo">Field number (1-10).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IAppointmentInfo.GetUserDefinedInt(System.Int32)">
            <summary>
            Get user-defined field 1-60 of the whole (.NET Int32) number type.
            </summary>
            <param name="fieldNo">Field number (1-60).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IAppointmentInfo.GetUserDefinedString(System.Int32)">
            <summary>
            Get user-defined field 1-49 of the text (.NET string) type.
            </summary>
            <param name="fieldNo">Field number (1-39).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IAppointmentInfo.GetUserDefinedDecimal(System.String)">
            <summary>
            Get the decimal udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>double value of field, or NAN if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IAppointmentInfo.GetUserDefinedInt(System.String)">
            <summary>
            Get the int udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>int value of field, or MINVALUE if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IAppointmentInfo.GetUserDefinedString(System.String)">
            <summary>
            Get the string udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>string value of field, or NULL if field not found</returns>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo2.IsMilestone">
            <summary>
            Is the appointment a milestone appointment? English text "Yes" or "No".	
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo2.SuggestedAppointmentId">
            <summary>
            The appointments SuggestedAppointment ID. Return 0 when appointment is not part of a sale/project guide.	
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo2.OldStartDate">
            <summary>
            The appointment's old start date, formatted as YYYYMMdd.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo2.OldStartTime">
            <summary>
            The appointment's old start time, formatted as HHmmss.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo2.InvitedList">
            <summary>
            Formatted list of invited persons, humanly readable
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IAppointmentInfo3.JoinMeetingUrl">
            <summary>
            The URL
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ConnectionConfigFieldInfo">
            <summary>
            A place to store the data the admin user has entered based on the metadata from FieldMetadataInfo.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ConnectionConfigFieldInfo.ConnectionConfigFieldId">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ConnectionConfigFieldInfo.ErpConnectionId">
            <summary>
            Erp connection, if this row belongs to an ERP Connector
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ConnectionConfigFieldInfo.FieldKey">
            <summary>
            The key that identifies the field, taken from the connector&apos;s metadata
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ConnectionConfigFieldInfo.FieldValue">
            <summary>
            The field value, formatted for transport as a string using CultureDataFormatter
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ConnectionConfigFieldInfo.QuoteConnectionId">
            <summary>
            Quote connection, if this row belongs to a Quote Connector
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IContactInfo">
            <summary>
            Interface providing information about a contact
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.ContactId">
            <summary>
            Primary key of the contact
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Name">
            <summary>
            Company name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Department">
            <summary>
            Department
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.OrganisationNumber">
            <summary>
            Organisation number
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Phone">
            <summary>
            Phone
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PhoneId">
            <summary>
            Phone Id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Fax">
            <summary>
            Fax
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.FaxId">
            <summary>
            Fax id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.FaxStripped">
            <summary>
            Fax. Any non digit characters are stripped.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.EMail">
            <summary>
            Primary e-mail address.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.EMailId">
            <summary>
            Primary e-mail address id.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Web">
            <summary>
            Primary web address.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.WebId">
            <summary>
            Primary web address id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.AddressLine1">
            <summary>
            Postal address line 1. If this is empty, street address line 1
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressLine1">
            <summary>
            Postal Address, line 1
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressLine2">
            <summary>
            Postal Address, line 2
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressLine3">
            <summary>
            Postal Address, line 3
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressCity">
            <summary>
            Postal town
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressCityFull">
            <summary>
            Postal town, state/province and zipcode (for American, Canadian and Australian addresses, e.g. Bedford, MA 01730)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressZip">
            <summary>
            Postcode. (See also aucs.)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressPrefix">
            <summary>
            Postcode prefix
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressState">
            <summary>
            State/province (for American, Canadian and Australian addresses). (See also aucs.)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressZipCity">
            <summary>
            Postcode and postal town (e.g. 0572 OSLO)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressCounty">
            <summary>
            County (for UK addresses)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.StreetAddressLine1">
            <summary>
            Street Address, line 1
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.StreetAddressLine2">
            <summary>
            Street Address, line 2
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.StreetAddressLine3">
            <summary>
            Street Address, line 3
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.StreetAddressCityFull">
            <summary>
            Streetaddress town, state/province and zipcode (for American, Canadian and Australian addresses, e.g. Bedford, MA 01730)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.StreetAddressCity">
            <summary>
            Street town
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.StreetAddressZip">
            <summary>
            Postcode. (See also aucs.)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.StreetAddressZipGerman">
            <summary>
            Postcode for street address (for German addresses)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostalAddressLine1And3">
            <summary>
            First address line, including Mail Stop (for American addresses). 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.StreetAddressState">
            <summary>
            State/province (for American, Canadian and Australian addresses). (See also aucs.)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.LineFeedAustraliaUK">
            <summary>
            Line feed for Australian and UK treatment of counties and postcodes
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.LineFeedGermany">
            <summary>
            Line feed for internal post in Germany
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Business">
            <summary>
            Business
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.CountryCode">
            <summary>
            Country code
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Country2">
            <summary>
            Country if different from the sender's country
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.CountryId">
            <summary>
            Country ID from database
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.CountryEnglish">
            <summary>
            English name of country
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.County">
            <summary>
            County
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.PostCode">
            <summary>
            Postcode including country prefix (e.g. N-0163 for a postcode in Norway)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.CountyZipUK">
            <summary>
            County and postcode (for UK addresses)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.OurContact">
            <summary>
            Our contact
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IContactInfo.GetUserDefinedDecimal(System.Int32)">
            <summary>
            Get user-defined field 1-10 of the decimal (.NET double) number type.
            </summary>
            <param name="fieldNo">Field number (1-10).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IContactInfo.GetUserDefinedInt(System.Int32)">
            <summary>
            Get user-defined field 1-60 of the whole (.NET Int32) number type.
            </summary>
            <param name="fieldNo">Field number (1-60).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IContactInfo.GetUserDefinedString(System.Int32)">
            <summary>
            Get user-defined field 1-49 of the text (.NET string) type.
            </summary>
            <param name="fieldNo">Field number (1-49).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IContactInfo.GetUserDefinedDecimal(System.String)">
            <summary>
            Get the decimal udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>double value of field, or NAN if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IContactInfo.GetUserDefinedInt(System.String)">
            <summary>
            Get the int udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>int value of field, or MINVALUE if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IContactInfo.GetUserDefinedString(System.String)">
            <summary>
            Get the string udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>string value of field, or NULL if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IContactInfo.GetInternationalAddress(System.Int32)">
            <summary>
            Get a line from the international address
            </summary>
            <param name="lineNo"></param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.CRM.IContactInfo2">
            <summary>
            Interface providing information about a contact with support person info
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo2.SupportPersonId">
            <summary>
            Contact's support person ID
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo2.SupportPersonName">
            <summary>
            Contact's support person - Full name
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IContactInfo3">
            <summary>
            Interface providing information about a contact with extra and udef fields in custom fields info
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IContactInfo3.CustomFields">
            <summary>
            UDef fields and extra field values encoded as strings: "x_foo" = "[I:123]", "SuperOffice:1" = "[F:34.56]"
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IDocumentInfo">
            <summary>
            Interface providing information about the document.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.AssociateId">
            <summary>
            Owner of the document
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.AssociateLoginName">
            <summary>
            Login name of the document owner
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.AssociateFullName">
            <summary>
            Full name of the document owner
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.AppointmentId">
            <summary>
            Primary key of the appointment exteding the document record.  This is NOT the appointment the document is linked to.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.DocumentId">
            <summary>
            Primary key of the document record
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.ContactId">
            <summary>
            Primary key of the contact the document is related to
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.PersonId">
            <summary>
            Primary key of the person the document is related to
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.ProjectId">
            <summary>
            Primary key of the project the document is related to
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.ActiveDate">
            <summary>
            Active date of the document.  <see cref="P:SuperOffice.CRM.IDocumentInfo.Registered"/> is used in SO_ARC for calculating days
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.PublishStartDate">
            <summary>
            Document, start date for publising.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.PublishEndDate">
            <summary>
            Document, end date for publishing.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.Registered">
            <summary>
            The time the document record is created.  This is used to calculate the path of the document in SO_ARC
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.Name">
            <summary>
            Get or set file name, without archive path, user or period prefixes
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.Header">
            <summary>
            Visible document name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.Description">
            <summary>
            Description of the document
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.OurRef">
            <summary>
            Our reference
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.YourRef">
            <summary>
            Your reference
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.Salutation">
            <summary>
            Salutation as entered, or created automatically from the contact (Mr/Ms and last name). 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.Attention">
            <summary>
            Selected contact in the Document dialog or text that is specified in the Company field for a recipient of the document
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.ArchiveProvider">
            <summary>
            Reference to archive provider and the Notes Link. Default = 0, this means SOArc plugin.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.ExternalReference">
            <summary>
            Get or set external reference (notes ID, email ID, other ID used by the archive provider)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.SerialNumber">
            <summary>
            Ascending serial number (different for every template)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.LockSemantics">
            <summary>
            Locking semantics requested/applied to a document
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo.DocumentTemplateInfo">
            <summary>
            Information about the document template
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IDocumentInfo.GetUserDefinedDecimal(System.String)">
            <summary>
            Get the decimal udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>double value of field, or NAN if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IDocumentInfo.GetUserDefinedInt(System.String)">
            <summary>
            Get the int udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>int value of field, or MINVALUE if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IDocumentInfo.GetUserDefinedString(System.String)">
            <summary>
            Get the string udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>string value of field, or NULL if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IDocumentInfo.GetUserDefinedDecimal(System.Int32)">
            <summary>
            User-defined field 1-10 of the decimal (.NET double) number type.
            </summary>
            <param name="fieldNo">Field number (1-10).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IDocumentInfo.GetUserDefinedInt(System.Int32)">
            <summary>
            Get user-defined field 1-60 of the whole (.NET Int32) number type.
            </summary>
            <param name="fieldNo">Field number (1-60).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IDocumentInfo.GetUserDefinedString(System.Int32)">
            <summary>
            Get user-defined field 1-49 of the text (.NET string) type.
            </summary>
            <param name="fieldNo">Field number (1-39).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentInfo2.SuggestedDocumentId">
            <summary>
            The documents SuggestedDocument ID. Return 0 if document is not part of a sale/project guide
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.DocumentPlugin2Attribute">
            <summary>
            Attribute for document plugins, implementing the <see cref="T:SuperOffice.CRM.Documents.IDocumentPlugin2"/> interface
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.DocumentPlugin2Attribute.PluginId">
            <summary>
            The numeric plugin ID, which matches the ID used in the doctmpl table
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.Documents.DocumentPlugin2Attribute.#ctor(System.String,System.Int32)">
            <summary>
            Declare a plugin to be a document plugin, with a numeric ID. IDs are allocated by
            SuperOffice DevNet. ID's below 1000 are reserved for use by SuperOffice.
            </summary>
            <param name="name">Plugin name, arbitrary string</param>
            <param name="pluginId">Plugin ID, allocated by SuperOffice DevNet. <b>MUST</b> be unique</param>
        </member>
        <member name="T:SuperOffice.CRM.Documents.DocumentLockSemantics">
            <summary>
            Locking semantics requested/applied to a document
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.DocumentLockSemantics.None">
            <summary>
            Neither locking nor versioning is requested for the document
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.DocumentLockSemantics.Locking">
            <summary>
            Locking, but not versioning, is requested for the document
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.DocumentLockSemantics.Versioning">
            <summary>
            Versioning is requested for the document (locking is implied)
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.CheckoutState">
            <summary>
            Enum listing the possible checkout states of a document, as seen from outside the document plugin
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.CheckoutState.NotCheckedOut">
            <summary>
            Document is not checked out
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.CheckoutState.CheckedOutOwn">
            <summary>
            Document is checked out, to the user making the query
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.CheckoutState.CheckedOutOther">
            <summary>
            Document is checked out, to a user different from the one making the query
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.CheckoutState.LockingNotSupported">
            <summary>
            Locking is not supported or selected for this document. The document is always
            'writeable' in the sense of not being protected by any locks. The document may
            still be read-only due to Sentry constraints.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.CommandInfo">
            <summary>
            An instance of this class describes a custom command, declared and implemented by a document plugin
            </summary>
            <remarks>
            Depending on the return type indicated in the command, the command might be filtered (not shown) by the GUI. For instance, commands
            that return values of type <see cref="F:SuperOffice.CRM.ReturnType.SoProtocol"/> would not
            be shown by the (first release of the) Pocket CRM client, since that client does not use nor support soprotocol-type
            navigation. Return types <see cref="F:SuperOffice.CRM.ReturnType.None"/> and <see cref="F:SuperOffice.CRM.ReturnType.Message"/> 
            will be supported by all clients. Non-GUI clients should save Message-type return values in their log.
            <para/>
            A command may be executed on a document at any time. Constraints, such as some commands requiring the
            document to be checked out, must be enforced by the document plugin - the rest of the system has no knowledge
            of command semantics.
            <para/>
            A document plugin with complex custom workflow and GUI requirements can use the returntype SoProtocol to
            force navigation subsequent to execution of a command, and in this way chain a set of operations. It is 
            OK to have 'secret' commands, i.e., commands that are not declared through <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])"/>;
            such secret commands will not be shown in any GUI, but will still be available through the document services.
            </remarks>
        </member>
        <member name="P:SuperOffice.CRM.Documents.CommandInfo.Name">
            <summary>
            The programmatic name of the command, uniquely identifying this command for the document plugin. 
            <para/>
            Command names need not be unique between different document plugins, but have to be unique within one plugin.
            Commands should generally not be cached by NetServer or clients, since they are assumed to be dependent
            on a particular document and its state.
            <para/>
            Commands for standard Check out, Check in and Undo Check out are not custom commands; they will be shown
            by GUI logic automatically if the document plugin declares that it supports locking. Similarly, commands
            for showing a version list are automatically added if such functionality is supported.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.CommandInfo.DisplayName">
            <summary>
            Display name, shown in menus, command lists and similar GUI elements.
            <para/>
            The name should be kept short. Resource tags, such as [SR_OK], are allowed and will be substituted runtime
            with the proper languages. A document plugin can have a resource module added to the client to substitute
            any custom tags.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.CommandInfo.DisplayTooltip">
            <summary>
            Tooltip string associate with the command - can be a literal or a tooltip hint.
            <para/>
            Simple tooltips can be literals, and can contain resource tags (including culture-independent
            formatted dates, see the <see cref="T:SuperOffice.CRM.Globalization.CultureDataFormatter"/> class
            for examples and encoding methods.
            <para/>
            More complex tooltips can be represented as tooltip hints, which cause a runtime call to the
            tooltip provider system. A document plugin can add its own tooltip provider in order to process
            such hints into the final tooltip text. This is the recommended approach for tooltips that are
            time-consuming to precalculate.
            <para/>
            Tooltip hints can be constructed using the 
            SuperOffice.CRM.Tooltips.TooltipProvider. See SuperOffice.CRM.Tooltips.TooltipProvider.MakeTooltipHint
            method. They are parsed by provider plugins, either standard ones or custom plugins that can be written
            together with a document plugin.
            <para/>
            This member may be blank, if no tooltip is provided.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.CommandInfo.IconHint">
            <summary>
            Icon hint, which should resolve to an icon that is compatible in size with a standard menu
            or dropdown list font. May be blank.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.CommandInfo.ReturnType">
            <summary>
            Declaration of what kind of return type the execution of this command will give
            <para/>
            A client may use this field to filter out some commands - for instance, a client that does not support
            soprotocol or custom navigation, would only show commands declared to return <see cref="F:SuperOffice.CRM.ReturnType.None"/>
            or <see cref="F:SuperOffice.CRM.ReturnType.Message"/>.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.VersionInfo">
            <summary>
            An instance of this class represents information about one version of one document
            </summary>
            <remarks>
            Document plugins that support versioning are responsible for managing versions and provinding these objects.
            Storage/generation of these properties is the responsibility of the plugin.
            <para/>
            Instances of this class can be retrieved using <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)"/>
            and <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)"/> methods.
            </remarks>
        </member>
        <member name="P:SuperOffice.CRM.Documents.VersionInfo.ExternalReference">
            <summary>
            The document plugin's key that uniquely identifies a document; stored in the externalReference field of the document table
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.VersionInfo.DocumentId">
            <summary>
            The document Id that uniquely identifies the document within the SuperOffice database
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.VersionInfo.VersionId">
            <summary>
            The document plugin's version id that uniquely identifies one version of a document. If versioning is not
            supported, this will be blank. When versioning is supported, blank values imply the <b>latest checked-in</b> version.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.VersionInfo.CheckedInDate">
            <summary>
            The date that this version was checked in and became official
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.VersionInfo.CheckedInByName">
            <summary>
            Name (nicely formatted) of the user/person who performed the checkin
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.VersionInfo.CheckedInByAssociateId">
            <summary>
            Associate id of the user who performed the checkin
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.VersionInfo.Description">
            <summary>
            Arbitrary description string
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.VersionInfo.DisplayText">
            <summary>
            A short description, suitable for display in a popup menu or dropdown list of versions.
            <para/>
            It is suggested that this string contain user initials, checkin date and the first few words of the description,
            but it is up to the document plugin to provide whatever it thinks fits the purpose. In menus, the full Description
            property may be used as a tooltip by the client GUI - though there is no guarantee of that, since there are potentially
            many clients.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.VersionInfo.ExtraFields">
            <summary>
            Private metadata, owned by the document plugin. This set of metadata is related directly to the version that 
            this VersioNinfo structure describes; metadata related to the document as a whole is retrieved using the 
            <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)"/> method.
            <para/>
            The string should be formatted like a query string, i.e., name1=value1&amp;name2=value2... - this format,
            instead of a string/string dictionary avoids serialization problems, even though it is somewhat less
            efficient
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.TemplateInfo">
            <summary>
            Information about a document template, i.e., a document that generally contains unresolved merge tags
            and that is used as the source for creating new documents. 
            Used by plugins to describe templates to NetServer without using database records.
            </summary>
            <remarks>
            Document templates have traditionally been stored as files in the so_arc\template directory. They can now
            also be stored in repositories managed by document plugins; this class is the return value from the plugin to describe
            template details like the MIME type or the URL used to access the template contents.
            <para/>
            It is expected that document templates are like any other document, but marked in some way that allows the document
            plugin to distinguish them. How templates get into the repository is not a subject for the document API.
            <para/>
            Document templates must be addressable using the same kind of 'externalReference' key as other documents, and must be
            possible to retrieve using the GetDocumentAsStream api.
            </remarks>
        </member>
        <member name="P:SuperOffice.CRM.Documents.TemplateInfo.Name">
            <summary>
            Name of the document, shown in lists etc to the user.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.TemplateInfo.Description">
            <summary>
            Document description, shown as a tooltip or in some extended description area.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.TemplateInfo.ExternalReference">
            <summary>
            Unique key that identifies the document so it can be retrieved. Could be URL, Filename or id. Stored as the DocTmpl.Filename.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.TemplateInfo.MimeType">
            <summary>
            MIME type associated with the document. Some archives may need MIME types to correctly access documents. Others can leave this blank.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.TemplateInfo.PluginId">
            <summary>
            ID of plugin that stores this template, so it can be retrieved
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.CheckoutInfo">
            <summary>
            Information about the checked-out state of one document, describing whether it is checked out,
            and to whom.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.CheckoutInfo.State">
            <summary>
            Checkout state
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.CheckoutInfo.AssociateId">
            <summary>
            Id of associate who has currently checked out the document; 0 if it is not checked out, 
            or is checked out by someone who is not a SuperOffice user
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.Documents.CheckoutInfo.Name">
            <summary>
            Name of person who has currently checked out the document; blank if it is not checked out.
            This property may also be blank if the <see cref="P:SuperOffice.CRM.Documents.CheckoutInfo.AssociateId"/> is nonzero; NetServer will
            retrieve the associates' name as needed.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.Constants">
            <summary>
            String constants for capability and property names
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.Constants.Capabilities">
            <summary>
            String constants for document plugin capability names
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Capabilities.Locking">
            <summary>
            Does the plugin support locking?  Values are <see cref="F:SuperOffice.CRM.Documents.Constants.Values.False"/>,
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.Optional"/> and
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.Mandatory"/>. 
            <para/>False implies that the feature is available. Optional implies that it is available and can
            be enabled or disabled on a per-document basis. Mandatory implies that all
            documents will have locking and that this feature cannot be disabled.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Capabilities.FastLockStatus">
            <summary>
            Does the plugin support efficient querying of checkout status?  Values are 
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.False"/> and
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.True"/>
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Capabilities.Versioning">
            <summary>
            Does the plugin support versioning? Versioning support also implies locking support. 
            Values are <see cref="F:SuperOffice.CRM.Documents.Constants.Values.False"/>,
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.Optional"/> and
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.Mandatory"/>. 
            <para/>False implies that the feature is available. Optional implies that it is available and can
            be enabled or disabled on a per-document basis. Mandatory implies that all
            documents will have locking and that this feature cannot be disabled.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Capabilities.FastVersionList">
            <summary>
            Does the plugin support efficient querying of the version list for a document?  Values are 
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.False"/> and
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.True"/>
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Capabilities.FastExists">
            <summary>
            Does the plugin support efficient querying of document existence? Values are 
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.False"/> and
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.True"/>
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Capabilities.MaxDocumentSize">
            <summary>
            Maximum supported document content size. Value should be parseable as an integer in the InvariantCulture, specifying number of bytes.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Capabilities.Timeout">
            <summary>
            General timeout value. NetServer may abandon document plugin calls if this value is exceeded.
            Value should be parseable as an integer in the InvariantCulture, specifying number of seconds.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Capabilities.CanCreateDocumentTemplates">
            <summary>
            Can the document plugin create new document templates.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.Constants.Values">
            <summary>
            String constants for capability and property values, where fixed values are used
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Values.True">
            <summary>
            The value used to indicate a true/present/supported status
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Values.False">
            <summary>
            The value used to indicate a false/missing/not supported status
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Values.Optional">
            <summary>
            The value used to indicate an optional status
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Values.Mandatory">
            <summary>
            The value used to indicate a mandatory status
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Values.Url">
            <summary>
            'url', the value of the <see cref="F:SuperOffice.CRM.Documents.Constants.Properties.PreferredOpen"/> property that specifies that URL (WebDAV) is the preferred
            access method to this document.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Values.Stream">
            <summary>
            'stream', the value of the <see cref="F:SuperOffice.CRM.Documents.Constants.Properties.PreferredOpen"/> property that specifies that stream
            access is preferred for this document. Note that stream access must always be supported,
            even if <see cref="F:SuperOffice.CRM.Documents.Constants.Properties.PreferredOpen"/> is returned.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.Constants.Properties">
            <summary>
            String constants for document-dependent property names
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Properties.HasLocking">
            <summary>
            Can this document be locked for changes?
            Values are 
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.False"/> and
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.True"/>
            </summary>
            <remarks>
            Versioning implies Locking, so if HasVersioning is true, then 
            HasLocking <b>must</b> be true also.
            </remarks>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Properties.HasVersioning">
            <summary>
            Is this document turned on for versioning?
            Values are 
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.False"/> and
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.True"/>
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Properties.Tooltip">
            <summary>
            A descriptive string that is suitable for display as a tooltip; may be blank
            <para/>
            Simple tooltips can be literals, and can contain resource tags (including culture-independent
            formatted dates, see the <see cref="T:SuperOffice.CRM.Globalization.CultureDataFormatter"/> class
            for examples and encoding methods.
            <para/>
            More complex tooltips can be represented as tooltip hints, which cause a runtime call to the
            tooltip provider system. A document plugin can add its own tooltip provider in order to process
            such hints into the final tooltip text. This is the recommended approach for tooltips that are
            time-consuming to precalculate.
            <para/>
            Tooltip hints can be constructed using the 
            <see cref="!:SuperOffice.CRM.Tooltips.TooltipProvider"/>.<see cref="!:SuperOffice.CRM.Tooltips.TooltipProvider.MakeTooltipHint"/>
            method. They are parsed by provider plugins, either standard ones or custom plugins that can be written
            together with a document plugin.
            <para/>
            This member may be blank, if no tooltip is provided.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Properties.PreferredOpen">
            <summary>
            What is the preferred method for editing documents? Values are 
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.Url"/> and
            <see cref="F:SuperOffice.CRM.Documents.Constants.Values.Stream"/>, 
            depending on whether the plugin supports WebDAV and prefers this method.
            <para/>
            The client GUI is not guaranteed to respect preferred-open = 'url'; depending on the platform and other
            circumstances, the client may still use the GetDocumentStream interface to get the document content.
            <para/>
            If a document is opened through WebDAV, SuperOffice code no longer controls the flow of events and
            cannot be responsible for proper phasing, access control or other features.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Properties.FileType">
            <summary>
            The file type of the document, such as DOC, PDF, XLS or whatever. This is used by NetServer if
            it needs to analyze the file content, for instance for freetext indexing. It is also used to set
            the extension of the file name generated for download/editing, and will usually control
            which document editor is loaded by the client operating system to edit the document.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Properties.FileName">
            <summary>
            The filename of the template or suggested filename of a document. 
            </summary>
            <remarks>
            Used in queries regarding document templates and documents.
            </remarks>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Properties.LastModified">
            <summary>
            Last Modified date + time (UTC) of the document file, rather than the database record.
            Values should be returned as string in SuperOffice format "[d 2012-03-21T12:20:30]"
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.Properties.Length">
            <summary>
            Document size in bytes.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.Constants.GUI">
            <summary>
            String constants related to custom Graphical User Interface
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.Constants.GUI.Names">
            <summary>
            String constants for predefined GUI names that will be requested from a document plugin
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Documents.Constants.GUI.Names.DocumentDialog">
            <summary>
            The guiName for the Document Dialog, where document plugins have a tab for custom fields
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Documents.IDocumentPlugin2">
            <summary>
            This is the API that needs to be implemented by document plugins - objects that provide the
            link between a document repository and SuperOffice NetServer
            </summary>
            <remarks>
            A document plugin must support basic operations for storing and retrieving documents, according 
            to keys it generates itself. Optionally, it can support locking, versions, and WebDAV access.
            <para/>
            Locking and versioning, if supported, can be selected on a per-document basis - support for versioning
            does not have to imply that <b>every</b> document in the plugins' repository is versioned.
            <para/>
            Custom GUI declaration is not part of this interface, since the various clients that exist, may
            have different ways of declaring or implementing custom user interfaces. A document plugin
            that wants to implement a custom GUI should additionally implement the
            <see cref="T:SuperOffice.UI.Configuration.ICustomUIProvider"/> or other (future) GUI-declaration interface,
            thereby making it possible to add GUI options in the future, without changing this basic
            document plugin interface.
            <para/>
            NetServer will attempt to construct your object in two different ways:<para/>
            1. With an <see cref="T:SuperOffice.CRM.IConfiguration"/> parameter. This allows you to access config values and licenses without linking to SoCore/SoDatabase.<para/>
            2. With no parameters. This is just the default constructor.<para/>
            Implement the constructor that is most suitable for your plugin.  Throw an exception from the constructor if your plugin does not want to be created. The exception is logged as Information, and 
            your plugin will not be used.<para/>
            </remarks>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities">
            <summary>
            Get a list of capabilities (functionality) supported by this document plugin
            </summary>
            <remarks>
            The purpose of this call is to enable NetServer and clients to determine what functionality this plugin can offer. 
            Plugins should populate the return array with all capabilities they know about. NetServer will call this API only once.
            <para/>
            As an example of use, the Document archive provider inside NetServer will look at plugin capabilities, 
            and read document properties as appropriate. 
            <para/>
            i.e. if “fast-lock-status=false”, then the archive provider 
            will not call the IsCheckedOut(externalReference) function. Otherwise it will make the call (if the client has requested
            the appropriate column in the GUI), so that the user can see which documents are checked out.
            <para/>
            String constants for capabilities are available in the <see cref="T:SuperOffice.CRM.Documents.Constants.Capabilities"/> static class.
            </remarks>
            <returns>Dictionary of name=value strings listing all known capabilities and their values</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])">
            <summary>
            Get the values of certain properties, for a given document
            </summary>
            <remarks>
            Each document can have a number of properties associated with it. A set of standard properties
            is defined in the <see cref="T:SuperOffice.CRM.Documents.Constants.Properties"/> class. Ideally, retrieving properties should
            be a lightweight operation.
            <para/>
            Note that 'properties' are a one-way mechanism where the document plugin provides information about
            the document or certain aspects of it. This is not the same as document-specific
            metadata, which is handled by the <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)"/> and <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            methods.
            </remarks>
            <param name="documentInfo">Document record with filename, extref and primary key (document id).</param>
            <param name="requestedProperties">Array of property strings, for which values are requested</param>
            <returns>Dictionary of key=value pairs, where the key is one of the requested property strings, and the value
            is the value of that property for the given document.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])">
            <summary>
            Get a list of custom commands, applicable to a specific document. Note that commands related to
            standard locking and versioning operations have their own API calls and are not 'custom commands' in this sense.
            </summary>
            <remarks>
            This API is called before a menu, task button or other GUI item that gives access to document-specific commands is shown.
            It is used to populate the GUI with available commands for a particular document, the results are not cached by the GUI.
            <para/>
            Depending on the return type indicated in the command, the command might be filtered by GUI. More information can
            be found in the <see cref="T:SuperOffice.CRM.Documents.CommandInfo"/> topic.
            </remarks>
            <param name="documentInfo">Document info from the SuperOffice database</param>
            <param name="allowedReturnTypes">Array of names of allowed return types; if this array is
            empty then no limits are placed on return type.</param>
            <returns>Array of command descriptions. If there are no custom commands available, an empty array should be returned.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.ExecuteDocumentCommand(SuperOffice.CRM.IDocumentInfo,System.String,System.String[],System.String,System.String[])">
            <summary>
            Execute a custom command on a specified document and version
            </summary>
            <remarks>
            This command is called when the user chooses an action item from a dropdown/context menu. 
            It is also reflected in the DocumentAgent service interface, so that custom GUI’s and external 
            code can directly execute document plugin commands; this is useful if a plugin also has some 
            corresponding custom GUI that needs to execute commands depending on user interaction.
            <para/>
            The parameter <paramref name="allowedReturnTypes"/> can be used by clients to hint to the plugin
            what kind of return value processing is available. For instance, a mobile client might
            only offer None and Message, and this information can be used by the document plugin to adapt
            the processing of a command, if it wants to (for instance, use default values instead of
            triggering some more advanced workflow).
            <para/>
            The command is obtained from the <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])"/> method.
            </remarks>
            <param name="documentInfo">Document info from the SuperOffice database</param>
            <param name="versionId">Version identifier, blank implies 'latest' version</param>
            <param name="allowedReturnTypes">Array of names of allowed return types; if this array is
            empty then no limits are placed on return type.</param>
            <param name="command">Command name, taken from an earlier call to <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentCommands(SuperOffice.CRM.IDocumentInfo,System.String[])"/>
            - or any other command name that is understood by the provider. 'Private' commands that
            are not declared in GetDocumentCommands but are known to the authors of custom GUI code
            or OK.</param>
            <param name="additionalData">Array of strings containing whatever additional data the command
            may need. This parameter is intended for authors of more complex custom GUI's and works as
            a tunnel between the ultimate client and the document plugin. Standard GUI made by SuperOffice,
            such as a context menu connected to a document item in an archive, will not populate this
            member.<br/>It is strongly suggested that the convention of using name=value for each string
            array element be followed here.</param>
            <returns>Return value object, specifying failure or success plus any optional, additional processing to be triggered</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)">
            <summary>
            Retrieve metadata owned by the plugin/repository, related to one document (excluding version-dependent metadata)
            </summary>
            <remarks>
            A document plugin may consume and provide an arbitrary number of metadata fields. These are placed
            in a string, string dictionary, representing name/value pairs. This call should <b>not</b>
            retrieve metadata related to any particular version, only data related to the document as a whole.
            <para/>
            The NetServer service call DocumentAgent.GetDocumentEntity will (among other things) result in a call 
            to this API to populate the ExtraFields property of the document entity carrier. Note, however, 
            that the carrier handed over to the client may contain other fields in addition to those 
            supplied by the document plugin, since the extrafields mechanism is generic and 
            there may be other metadata providers along the line.
            <para/>
            Attribute names should be prefixed with the name of the document plugin, to maintain global uniqueness.
            <para/>
            It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the 
            <see cref="T:SuperOffice.CRM.Globalization.CultureDataFormatter"/> class, to avoid problems
            when parsing dates and floating-point types between different cultures and platforms.
            </remarks>
            <param name="documentInfo">Contains extref and primary key, filename of the document.</param>
            <returns>Array of name=value strings, each representing one key and one value. The same
            convention is used here as in the <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetPluginCapabilities"/> and 
            <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentProperties(SuperOffice.CRM.IDocumentInfo,System.String[])"/> methods.
            </returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)">
            <summary>
            Retrieve metadata owned by the plugin/repository, related to one particular
            version of one document
            </summary>
            <remarks>
            A document plugin may consume and provide an arbitrary number of metadata fields. These are placed
            in a string, string dictionary, representing name/value pairs. This call should only retrieve
            metadata related to a version.
            <para/>
            The NetServer service call DocumentAgent.GetDocumentEntity will (among other things) result in a call 
            to this API to populate the VersionInfo property of the document entity carrier. 
            <para/>
            Attribute names should be prefixed with the name of the document plugin, to maintain global uniqueness.
            <para/>
            It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the 
            <see cref="T:SuperOffice.CRM.Globalization.CultureDataFormatter"/> class, to avoid problems
            when parsing dates and floating-point types between different cultures and platforms.
            <para/>
            To efficiently retrieve information about <b>all</b> versions, use the 
            <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)"/> method, instead of iterating
            over this method.
            </remarks>
            <param name="documentInfo">Document info from the SuperOffice database</param>
            <param name="versionId">Version identifier, blank implies 'latest' version</param>
            <returns>Fully populated version info structure</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Store/update plugin-dependent document metadata in the repository
            </summary>
            <remarks>
            This call is made when the document metadata should be stored, and is the complement of the
            <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)"/> method.
            The document plugin should extract whatever elements it 
            recognizes from the pluginData name/value dictionary. Failure to recognize an element should not cause an exception, 
            as there may be other plugins along the line (not document plugins, but service-level field providers) that own the data. 
            Likewise, absence of a value should be taken to imply “no change” to that value - not "delete".
            <para/>
            It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the 
            <see cref="T:SuperOffice.CRM.Globalization.CultureDataFormatter"/> class, to avoid problems
            when parsing dates and floating-point types between different cultures and platforms.
            </remarks>
            <param name="incomingInfo">SuperOffice metadata. Note that the plugin is <b>not</b> responsible
            for storing this data; however, it is allowed to look at it, in case it influences how the document
            is stored. However, it should always be possible to retrieve a document using the ExternalReference
            or DocumentId keys alone.</param>
            <param name="pluginData">Name/value dictionary containing metadata</param>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveVersionInfo(SuperOffice.CRM.IDocumentInfo,SuperOffice.CRM.Documents.VersionInfo)">
            <summary>
            Store/update plugin-dependent document version metadata in the repository
            </summary>
            <remarks>
            This call is made when the document <b>version</b> metadata should be stored, and is the complement of the
            <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadVersionInfo(SuperOffice.CRM.IDocumentInfo,System.String)"/> method.
            The document plugin should extract whatever elements it 
            recognizes from the pluginData name/value dictionary. Failure to recognize an element should not cause an exception, 
            as there may be other plugins along the line (not document plugins, but service-level field providers) that own the data. 
            Likewise, absence of a value should be taken to imply “no change” to that value - not "delete".
            <para/>
            It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the 
            <see cref="T:SuperOffice.CRM.Globalization.CultureDataFormatter"/> class, to avoid problems
            when parsing dates and floating-point types between different cultures and platforms.
            </remarks>
            <param name="documentInfo">Document that version is being saved on</param>
            <param name="versionInfo">Version information to be saved</param>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.Exists(SuperOffice.CRM.IDocumentInfo)">
            <summary>
            Determine if the document exists in the repository
            </summary>
            <remarks>
            The plugin should declare, through the <see cref="F:SuperOffice.CRM.Documents.Constants.Capabilities.FastExists"/> property,
            whether this call is highly efficient or not. If it is efficient, then document archive providers and similar code
            will call it when populating an archive, otherwise not.
            </remarks>
            <param name="documentInfo">Document info used by the document plugin</param>
            <returns>true if the document exists in the repository, otherwise false</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetLength(SuperOffice.CRM.IDocumentInfo,System.String)">
            <summary>
            Return the length of the physical document. This should be an efficient method
            </summary>
            <param name="documentInfo">Document info used by the document plugin</param>
            <param name="versionId">Version identifier, blank implies 'latest' version</param>
            <returns>Physical document length in bytes - this should be the same as the length of the stream
            returned by the LoadDocumentStream method.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.IO.Stream,System.String)">
            <summary>
            Create or update the document template contents. Usually used when uploading a file to a new document template.
            </summary>
            <param name="templateInfo">Name, tooltip and mime type from the document template record in the database. The ExtRef/Filename may be set if this is an edit rather than an add.</param>
            <param name="content">Stream containing file content</param>
            <param name="languageCode">Language variation on the template. May be ignored by the plugin, or used to keep language specific versions of the template.</param>
            <returns>Template information with ExtRef/Filename and MimeType filled in. These values are saved in the DocTmpl record.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)">
            <summary>
            Get the document template content as a stream. NetServer will read-to-end and close this stream
            </summary>
            <remarks>
            Document templates may be stored in a repository, with or without special content tags.
            Because a document template does not have a corresponding document record within
            SuperOffice, there is no documentId to identify it.
            <para/>
            This call is used by NetServer to retrieve a document template based on either
            an externalreference value stored in the corresponding doctmpl record,
            or the Id of the doctmpl record itself. The document plugin is free
            to use either method of identification.
            <para/>
            Mail templates are passed in using extref = "filename=xyz&amp;allowPersonal=1" and docTemplateId = 0
            </remarks>
            <param name="documentTemplateInfo">Document template info: contains the extref/filename, template id, mime type.
            TemplateInfo.Id = 0 when archiving mail messages. 
            </param>
            <param name="languageCode">Language (en-US, nb-NO, etc) that the user is using in the user interface. Can be used to select language-specific templates.</param>
            <returns>Stream containing the template content for the appropriate language. Null if no suitable template content found in this plugin.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetTemplateExtension(SuperOffice.CRM.IDocumentTemplateInfo)">
            <summary>
            Get the "extension" for the template, i.e., what the file extension would have been - to 
            help identify the stream content format
            </summary>
            <remarks>
            Template documents are generally created in text editors and stored as files of some kind. The
            file extension indicates the kind of document - doc, docx, xls, txt, and so on. While the template
            may be stored inside the document repository as any kind of data byte collection, a concept
            akin to the file extension is still needed to help identify the document format, ahead of actually
            reading the template content.
            </remarks>
            <param name="documentTemplateInfo">Document template info: contains the extref/filename, template id, mime type</param>
            <returns>String equivalent to a file extension, for instance ".docx"</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDefaultDocumentTemplate(System.Int32,SuperOffice.CRM.IDocumentTemplateInfo)">
            <summary>
            Create a default document based on the given documentType. Called when creating a new template.
            </summary>
            <param name="documentTypeKey">Id for a document type. 0 if plugin does not use document types.</param>
            <param name="documentTemplateInfo">Document template info</param>
            <returns>Template info object, with MimeType and Extref/Filename for new template filled in. These values are written to the template record by NetServer.
            Other fields like TemplateInfo.PluginId or TemplateInfo.Name are ignored in the result. The plugin cannot alter these.
            Return NULL if no change, or if no blank document created.</returns>
            <seealso cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates"/>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetSupportedDocumentTypesForDocumentTemplates">
            <summary>
            Get a list of supported document template types for this document plugin. May be empty.
            </summary>
            <returns>An dictionary of key=display-name for supported document types for template. Empty dictionary if no document types supported.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateProperties(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])">
            <summary>
            Get the values of certain properties, for a given document template
            </summary>
            <remarks>
            Each document can have a number of properties associated with it. A set of standard properties
            is defined in the <see cref="T:SuperOffice.CRM.Documents.Constants.Properties"/> class. Ideally, retrieving properties should
            be a lightweight operation.
            <para/>
            Note that 'properties' are a one-way mechanism where the document plugin provides information about
            the document or certain aspects of it. This is not the same as document-specific
            metadata, which is handled by the <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)"/> and <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveMetaData(SuperOffice.CRM.IDocumentInfo,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            methods.
            </remarks>        
            <param name="documentTemplateInfo">Document template record from the SuperOffice database</param>
            <param name="requestedProperties">Array of property strings, for which values are requested</param>
            <returns>Dictionary of name=value pairs, where the name is one of the requested property strings, and the value
            is the value of that property for the given document.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateUrl(SuperOffice.CRM.IDocumentTemplateInfo,System.Boolean,System.String)">
            <summary>
            Get a URL referring to the given document template
            </summary>
            <remarks>
            Document plugins may support document access via URLs. This call is used to retrieve a url that 
            will give the specified access to the document. This URL will be passed to the ultimate client 
            (most probably a browser, but could be a text editor application), and control will not return to NetServer.
            <para/>
            The string returned here should be a fully resolved URL that can be given directly to the editor application.
            </remarks>
            <param name="documentTemplateInfo">The document template info from database</param>        
            <param name="writeableUrl">If true, then the request URL should allow the document editor to write content
            back to the repository; otherwise, a url that does not support writeback should be supplied
            if possible.</param>
            <param name="languageCode">Language variation on the template. May be ignored by the plugin, or used to keep language specific versions of the template.</param>
            <returns>URL that gives access to the template document. If the document plugin
            does not support URL access, then a blank string should be returned.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)">
            <summary>
            Get the list of languages supported by the given template, not including the default (blank) language.
            </summary>
            <remarks>Used when populating the dropdown list in the admin client or the document dialog.</remarks>
            <param name="documentTemplateInfo">The template we are curious about</param>
            <returns>Array of ISO codes: ("en-US", "nb-NO", "fr")</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String[])">
            <summary>
            Delete a document template, all language variations and all metadata from the repository
            </summary>
            <param name="documentTemplateInfo">Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.</param>
            <param name="allowedReturnTypes">Array of names of allowed return types; if this array is
            empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")</param>
            <returns>Return value, indicating success/failure and any optional processing to be performed</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String,System.String[])">
            <summary>
            Delete a specific language variation from the document template
            </summary>
            <param name="documentTemplateInfo">Fully populated document template metadata used to identity the template.</param>
            <param name="languageCode">The language variation to delete</param>
            <param name="allowedReturnTypes">Array of names of allowed return types.</param>
            <returns>Return value, indicating success/failure and any optional processing to be performed</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])">
            <summary>
            Create an empty document file in the repository, returning the external reference that 
            uniquely identifies the document in the repository.
            </summary>
            <remarks>
            Execution of this method should result in the creation of a document instance in the
            underlying repository, with empty content. If locking is supported, the status should
            be 'Checked-out'; the document should not be visible to other users. If locking is not 
            supported, a zero-length content should be the result.
            <para/>
            All metadata should be saved, an externalReference key should be assigned, and
            the file name/document name validated and reserved.
            <para/><b>Notes on semantics</b><br/>
            The IDocumentInfo.<see cref="!:SuperOffice.CRM.IDocumentInfo.Semantics"/> property is used to specify the
            locking/versioning semantics requested and implemented for a document. Semantics actually implemtned
            will be the lowest of what is requested and what is supported. Thus, a document may request 
            <see cref="!:SuperOffice.Data.DocumentSemantics.None"/> semantics even if versioning is optionally supported
            by the document plugin, and in that case no versioning or locking should be performed.
            <para/>
            On creation, if locking and/or versioning is supported and requested, then the document stream should
            be saved to a temporary area. Calls to GetDocumentStream should return an empty stream until the first
            call to CheckinDocument has succeeded. The result of that Checkin call will be the base version 
            (version 1).
            <para/>
            Locking semantics are set on creation and cannot be changed later.
            <para/>
            NetServer will typically call several plugin functions create a new document like this:
            <list type="bullet">
             <item>
              <description>plugin.<see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentTemplateStream(SuperOffice.CRM.IDocumentTemplateInfo,System.String)"/> </description>
             </item>
             <item>
              <description>(NetServer saves document template stream to temp file and 
              runs tag substitution on the file, replacing &lt;name&gt; with company name, etc.)</description>
             </item>
             <item>
              <description>plugin.CreateDocument - creates empty file in repository.</description>
             </item>
             <item>
              <description>plugin.<see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)"/>(temp-file) - moves temp file into repository, replacing the empty file.</description>
             </item>
            </list>
            </remarks>
            <param name="incomingInfo">SuperOffice metadata for the document, including the document Id
            and locking/versioning sematics requested for this document.</param>
            <param name="fileName">Suggested file name/document name. The document plugin must validate this
            name and amend it if needed (this is a ref parameter). If the name needs to be changed
            for any reason, a new and valid name must be generated by the plugin, and returned
            to the caller. NetServer will update the document record's Name field with the new filename.</param>
            <param name="extraFields">Plugin-dependent metadata for the document as a whole. The
            usual caveats apply, i.e., there may be name/value pairs in the parameter that
            belong to other parts of the system. Failure to recognize a name is not an error.</param>
            <param name="versionDecription">Description of the initial version, if versioning is supported
            and enabled for the document.</param>
            <param name="versionExtraFields">Plugin-dependent metadata for the initial version</param>
            <returns>The external reference that identifies this document. This return value is written to the document record's ExtRef field.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)">
            <summary>
            Save the stream as the document content in the repository; depending on the state, this
            may imply creating a temporary save pending a final checkin, or an immediately visible result.
            </summary>
            <remarks>
            An empty document must have been created in the repository with <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.CreateDocument(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])"/> before content
            can be streamed into it.
            <para/>
            If the document is currently checked out to the current user, then the stream should be saved, 
            but this call does not imply the automatic creation of a new version (visible to other users) 
            or automatic checkin. However, it is an advantage if subsequent GetDocument calls made by 
            the same user using the same key return the latest known content – while other users see 
            the latest checked-in version.
            <para/>
            If the plugin does not support locking and versioning (or such semantics are not requested, see below), 
            then each call to this API overwrites 
            any prior content completely and becomes the new, official content immediately. The Save operation 
            should be atomic, and should not destroy earlier content if it fails.
            <para/>
            If locking is supported and requested, the document is checked out and some other associate than the one 
            that has checked it out calls this API, a failure message should be returned.
            </remarks>
            <param name="incomingInfo">Incoming document metadata, used to identify the document. Metadata
            changes are <b>not</b> to be checked or saved by this operation - only the document stream is saved.</param>
            <param name="content">Document content, a binary stream about which nothing is assumed. The
            document plugin should read-to-end and close this stream.</param>
            <param name="allowedReturnTypes">Array of names of allowed return types; if this array is
            empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")</param>
            <returns>Return value, indicating success/failure and any optional processing to be performed</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)">
            <summary>
            Get document content as a stream. NetServer will read-to-end and close this stream.
            </summary>
            <remarks>
            It is up to the document plugin whether it can open a stream directly into the underlying repository, 
            or whether it has to extract the document to some temporary area and then stream that – 
            however, the fewer buffers the better.
            </remarks>
            <param name="incomingInfo">Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.</param>
            <param name="versionId">Optional version identifier, blank implies 'latest' version</param>
            <returns>Document content stream</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)">
            <summary>
            Get a WebDAV-compliant URL referring to the given document
            </summary>
            <remarks>
            Document plugins may support document access via WebDAV. This call is used to retrieve a WebDAV url that 
            will give the specified access to the document. This URL will be passed to the ultimate client 
            (most probably a text editor application), and control will not return to NetServer.
            <para/>
            The string returned here should be a fully resolved URL that can be given directly to the editor application.
            </remarks>
            <param name="incomingInfo">Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.</param>
            <param name="versionId">Optional version identifier, blank implies 'latest' version</param>
            <param name="writeableUrl">If true, then the request URL should allow the document editor to write content
            back to the repository; otherwise, a url that does not support writeback should be supplied
            if possible.</param>
            <returns>WebDAV-compliant URL that gives access to the document. If the document plugin
            does not support WebDAV access, then a blank string should be returned.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.DeleteDocument(SuperOffice.CRM.IDocumentInfo,System.String[])">
            <summary>
            Delete a document, all versions and all metadata from the repository
            </summary>
            <param name="documentInfo">Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.</param>
            <param name="allowedReturnTypes">Array of names of allowed return types; if this array is
            empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")</param>
            <returns>Return value, indicating success/failure and any optional processing to be performed</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.RenameDocument(SuperOffice.CRM.IDocumentInfo,System.String)">
            <summary>
            Rename a document in the repository
            </summary>
            <remarks>
            The document name should be changed from the existing to the new name. However,
            if the new name is not valid (or collides with an existing name of some other
            document), then the plugin should amend the name to a valid one and return
            it, instead of throwing an exception.
            </remarks>
            <param name="documentInfo">Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.</param>
            <param name="suggestedNewName">Suggested new document name</param>
            <returns>Actual new document name, limited to 254 characters</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetDocumentIdFromPath(System.String)">
            <summary>
            Map a file path to a document. Return 0 if the plugin cannot map the path.
            </summary>
            <param name="documentPathAndName">"c:\path\to\a-document.docx"</param>
            <returns>Document id that matches, or 0 if no match</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)">
            <summary>
            Get the checkout state of a document
            </summary>
            <remarks>
            This API is called from inside document archive providers if the plugin has declared that it
            supports fast fetching of this attribute. If the document plugin does not support locking or
            versioning, then the return value should have state NotCheckedOut, associate id 0 and blank name.
            </remarks>
            <param name="documentInfo">Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.</param>
            <returns>Object that describes the checkout state of the document</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])">
            <summary>
            Check out the document for editing
            </summary>
            <remarks>
            A document plugin that supports versioning may internally prepare to receive new content and 
            prepare a new internal version, but a subsequent <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)"/> call should <b>not</b> 
            show this version – not until <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])"/> has been called. 
            <para/>
            After the completion of this call, the document is in checked out state and <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetCheckoutState(SuperOffice.CRM.IDocumentInfo)"/> 
            should return “Own” as the status. <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)"/> calls on behalf of other users should
            fail, as should <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])"/> and <see cref="M:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])"/> calls on behalf of other users.
            <para/>
            If the document plugin does not support locking or versioning, then this call should perform no action.
            </remarks>
            <param name="documentInfo">Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.</param>
            <param name="allowedReturnTypes">Array of names of allowed return types; if this array is
            empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")</param>
            <returns>Return value, indicating success/failure and any optional processing to be performed</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.CheckinDocument(SuperOffice.CRM.IDocumentInfo,System.String[],System.String,System.String[])">
            <summary>
            Check in a currently checked-out document
            </summary>
            <remarks>
            If the document plugin supports locking and the requesting user is the one who checked out the document, 
            then the last-saved content by that user should become the new publicly visible content, and 
            the checkout state should be reset. Calls by other users should result in failure and no state change.
            <para/>
            If the document plugin does not support locking or versioning, then this call should perform no action.
            </remarks>
            <param name="documentInfo">Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.</param>
            <param name="allowedReturnTypes">Array of names of allowed return types; if this array is
            empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")</param>
            <param name="versionDescription">Version description.</param>
            <param name="versionExtraFields">Extra fields</param>
            <returns>Return value, indicating success/failure and any optional processing to be performed</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.UndoCheckoutDocument(SuperOffice.CRM.IDocumentInfo,System.String[])">
            <summary>
            Undo (abandon) a checkout
            </summary>
            <remarks>
            If the document plugin supports locking and the requesting user is the one who checked out the document, 
            then any content saved since the checkout should be discarded and the checkout state reset. 
            The content will be as before checkout. 
            <para/>
            Calls by other users should result in failure and no state change – except if the calling user has the right to force an undo
            <para/>
            If the document plugin does not support locking or versioning, then this call should perform no action.
            </remarks>
            <param name="documentInfo">Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.</param>
            <param name="allowedReturnTypes">Array of names of allowed return types; if this array is
            empty then no limits are placed on return type. ("None", "Message", "SoProtocol", "CustomGUI", "Other")</param>
            <returns>Return value, indicating success/failure and any optional processing to be performed</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)">
            <summary>
            Get the list of current versions for the given document
            </summary>
            <remarks>
            The list should not include an “in-work” version, if the document is currently checked out – only 
            versions visible and accessible to any authorized user.
            <para/>
            If the document plugin does not support versioning, then this call should return an empty array.
            </remarks>
            <param name="documentInfo">Fully populated document metadata, used to identify the document. Usefully contains ExternalReference and Filename properties.</param>
            <returns>Array of objects describing the existing, committed versions for this document</returns>
        </member>
        <member name="T:SuperOffice.CRM.Documents.IDocumentPluginOptional">
            <summary>
            Optional interface for a document plugin if it needs to determine at 
            runtime (during factory initialization) if it is available/optional.  
            Typical checks could be to see if required configuration, licese of feature toggle.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPluginOptional.IsAvailable">
            <summary>
            Returns true if the document plugin is available.
            </summary>
            <returns>True if the document plugin is available.</returns>
        </member>
        <member name="T:SuperOffice.CRM.Documents.IDocumentPluginTravel">
            <summary>
            Optional interface that Document Plugins can choose to implement. It is called when starting and stopping an offline
            (Travel) session, and is generally used to copy centrally-stored documents to local storage and back again.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPluginTravel.GoTravel(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)">
            <summary>
            Start a Travel (offline) session. This method is called at a time when both the central and local storage
            systems are available, and should copy or otherwise prepare for an offline session. 
            </summary>
            <remarks>
            While offline, the following document archive items need to be available:
            <list type="bullet">
            <item><description>All templates, in all language variants</description></item>
            <item><description>All documents for the current user, in the current period</description></item>
            <item><description>All documents for the current user, in the previous period</description></item>
            </list>
            A period is half a year. In May this would mean the Jul-Dec + Jan-Jun. Since there may be <b>many</b> templates,
            caching them between travel sessions is highly recommended, almost mandatory; otherwise template/document copying
            may be the major time consumer when going on travel.
            </remarks>
            <param name="associateId">ID of associate who is the document owner</param>
            <param name="localArchiveRoot">ROot directory of local archive. This is a value that is only known to the 
            Travel system in the Windows client, so it has to be passed in as a parameter</param>
            <param name="estimate">Callback to set the expected number of items to copy, to scale the progress bar</param>
            <param name="step">Callback to advance the progress bar by one step</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.IDocumentPluginTravel.HomeComing(System.Int32,System.String,SuperOffice.CRM.ProgressEstimateCallback,SuperOffice.CRM.ProgressStepCallback)">
            <summary>
            End a Travel (offline) session. This method is called at a time when both the central and local storage
            systems are available, and should update any documents whose content has been changed locally, into the central storage.
            Templates cannot be changed locally and should not be copied back!
            </summary>
            <remarks>
            </remarks>
            <param name="associateId">ID of associate who is the document owner</param>
            <param name="centralArchiveRoot">Root directory of <b>central!</b> archive. This is a value that is only known to the 
            Travel system in the Windows client at this time, so it has to be passed in as a parameter (ArchivePath points to the local archive)</param>
            <param name="estimate">Callback to set the expected number of items to copy, to scale the progress bar</param>
            <param name="step">Callback to advance the progress bar by one step</param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.CRM.Documents.ITempFileProvider">
            <summary>
            Interface defining a plugin that offers services for reading and writing temporary files.
            </summary>
            <remarks>
            Temporary files are used in several contexts - when transferring documents in chunks into and out of
            NetServer; when uploading a document to be saved through the Document dialog, and when handling mails
            and attachments.
            <para/>
            The default implementation supplied with NetServer provides these services using temporary files,
            controlled by the Documents section in the config file with respect to path and impersonation. 
            Alternative implementations, for instance using database or in-memory storage, are also possible.
            The term <b>file</b> is therefore not to be taken literally - though whatever implementation is
            actually used, the end result should support both sequential and random access, just like files.
            <para/>
            Classes implementing this interface also need to be marked with
            the <see cref="T:SuperOffice.CRM.Documents.TempFileProviderAttribute"/> attribute.
            </remarks>
        </member>
        <member name="M:SuperOffice.CRM.Documents.ITempFileProvider.CreateFile(System.String)">
            <summary>
            Create a temporary 'file'
            </summary>
            <param name="name">Name to be used for later access. The actual key used by the implementation should also take
            into account the associate ID, since multiple concurrent users may use the same name, and that does <b>not</b> mean
            file sharing between users.</param>
        </member>
        <member name="M:SuperOffice.CRM.Documents.ITempFileProvider.CheckIfFileExists(System.String)">
            <summary>
            Check if a named temporary file/storage area exists
            </summary>
            <param name="name">File name to check</param>
            <returns>True if such a file exists</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.ITempFileProvider.ReadFileComplete(System.String)">
            <summary>
            Make the complete content of the file available as a stream (sequential read)
            </summary>
            <param name="name">Name identifying the file. See comments in the <see cref="M:SuperOffice.CRM.Documents.ITempFileProvider.CreateFile(System.String)"/>
            method for more information on how file names are handled.</param>
            <returns>Stream representing the entire current contents of the file</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.ITempFileProvider.ReadFileChunk(System.String,System.Int64,System.Byte[])">
            <summary>
            Read a chunk of data from the file (random access read)
            </summary>
            <param name="name">Name identifying the file. See comments in the <see cref="M:SuperOffice.CRM.Documents.ITempFileProvider.CreateFile(System.String)"/>
            method for more information on how file names are handled.</param>
            <param name="filePosition">Position in bytes, starting at 0, to start reading from</param>
            <param name="bufferToUpdate">Data buffer to update. The length of this buffer is the maximum
            number of bytes that will be read</param>
            <returns>Actual number of bytes read. If less than the length of the buffer, end-of-file is indicated</returns>
        </member>
        <member name="M:SuperOffice.CRM.Documents.ITempFileProvider.WriteFileComplete(System.String,System.IO.Stream)">
            <summary>
            (Over)write - not append - the complete content of the file (sequential write). Any previous content is lost
            </summary>
            <param name="data">Stream to read data from</param>
            <param name="name">Name identifying the file. See comments in the <see cref="M:SuperOffice.CRM.Documents.ITempFileProvider.CreateFile(System.String)"/>
            method for more information on how file names are handled.</param>
        </member>
        <member name="M:SuperOffice.CRM.Documents.ITempFileProvider.WriteFileChunk(System.String,System.Int64,System.Byte[])">
            <summary>
            Write a chunk of data to the file (random access write)
            </summary>
            <param name="name">Name identifying the file. See comments in the <see cref="M:SuperOffice.CRM.Documents.ITempFileProvider.CreateFile(System.String)"/>
            method for more information on how file names are handled.</param>
            <param name="filePosition">Position in bytes, starting at 0, that will be written to</param>
            <param name="bufferToWriteFrom">Buffer to write; buffer length determines the size of the write operation</param>
        </member>
        <member name="M:SuperOffice.CRM.Documents.ITempFileProvider.DeleteFile(System.String)">
            <summary>
            Delete a temporary file
            </summary>
            <param name="name">Name identifying the file. See comments in the <see cref="M:SuperOffice.CRM.Documents.ITempFileProvider.CreateFile(System.String)"/>
            method for more information on how file names are handled.</param>
        </member>
        <member name="M:SuperOffice.CRM.Documents.ITempFileProvider.GetLength(System.String)">
            <summary>
            Get the current length in bytes of a temporary file
            </summary>
            <param name="name">Name identifying the file. See comments in the <see cref="M:SuperOffice.CRM.Documents.ITempFileProvider.CreateFile(System.String)"/>
            method for more information on how file names are handled.</param>
            <returns>Length of file in bytes; -1 if file does not exist</returns>
        </member>
        <member name="T:SuperOffice.CRM.Documents.TempFileProviderAttribute">
            <summary>
            Attribute identifying a class as a provider of temp file services. The class must also
            implement the <see cref="T:SuperOffice.CRM.Documents.ITempFileProvider"/> interface.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.Documents.TempFileProviderAttribute.#ctor(System.String)">
            <summary>
            Create a temp file provider plugin with the default priority int.MaxValue / 2
            </summary>
            <param name="name">Name of provider</param>
        </member>
        <member name="M:SuperOffice.CRM.Documents.TempFileProviderAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Create a temp file provider plugin with a specific priority. Lower values win.
            </summary>
            <param name="name">Name of provider</param>
            <param name="priority">Priority value</param>
        </member>
        <member name="T:SuperOffice.CRM.IDocumentTemplateInfo">
            <summary>
            Interface providing information about the document template.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.Id">
            <summary>
            Primary key of the document template.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.Name">
            <summary>
            Display Name of the document template (in lists).
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.Rank">
            <summary>
            Order for the document template.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.Tooltip">
            <summary>
            Tooltip description for the document template
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.IsDeleted">
            <summary>
            True, if the document is deleted.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.ExternalReference">
            <summary>
            Physical name of the document template. URL or Filename of the content. Stored in database as DocTmpl.Filename
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.MimeType">
            <summary>
            Mime Type of the document template. Set by the document plugin during template creation.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.Registered">
            <summary>
            When the template was created.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.Updated">
            <summary>
            When the template was last updated.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.DocumentStoredInPluginId">
            <summary>
            The id of the document plugin that handles the document generated from the template.
            i.e. the destination plugin. Stored in DocTmpl.AutoEventId in the database.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IDocumentTemplateInfo.TemplateStoredInPluginId">
            <summary>
            The id of the document plugin that handles the document template.
            i.e. the source plugin. Stored in DocTmpl.LoadTemplateFromPlugin in the database.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ActorPluginResponse">
            <summary>
            Extended PluginResponseInfo containing an ErpActor object
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ActorPluginResponse.Actor">
            <summary>
            Main ErpActor object
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ActorPluginResponse.#ctor">
            <summary>
            Default constructor, creates an OK response
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ActorPluginResponse.#ctor(SuperOffice.CRM.ErpActor)">
            <summary>
            Creates an Ok response and sets the Actor object
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ActorPluginResponse.ToString">
            <summary>
            ToString() for debugging
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ActorArrayPluginResponse">
            <summary>
            Extended PluginResponseInfo containing an ErpActor array
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ActorArrayPluginResponse.Actors">
            <summary>
            Main ErpActor array
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ActorArrayPluginResponse.#ctor">
            <summary>
            Default constructor, creates an OK response
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ActorArrayPluginResponse.#ctor(SuperOffice.CRM.ErpActor[])">
            <summary>
            Creates an Ok response and sets the Actor array object
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ActorArrayPluginResponse.ToString">
            <summary>
            ToString() for debugging
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ListItemArrayPluginResponse">
            <summary>
            Extended PluginResponseInfo containing a dictionary of list items (primarykey/displayvalue)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ListItemArrayPluginResponse.ListItems">
            <summary>
            Main list item dictionary
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ListItemArrayPluginResponse.#ctor">
            <summary>
            Default constructor, creates an OK response
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ListItemArrayPluginResponse.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates an Ok response and sets the list item dictionary object
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ListItemArrayPluginResponse.ToString">
            <summary>
            ToString() for debugging
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.StringArrayPluginResponse">
            <summary>
            Extended PluginResponseInfo containing a string array
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.StringArrayPluginResponse.Items">
            <summary>
            Main string array
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.StringArrayPluginResponse.#ctor">
            <summary>
            Default constructor, creates an OK response
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.StringArrayPluginResponse.#ctor(System.String[])">
            <summary>
            Creates an Ok response and sets the string array object
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.StringArrayPluginResponse.ToString">
            <summary>
            ToString() for debugging
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.FieldMetadataInfoArrayPluginResponse">
            <summary>
            Extended PluginResponseInfo containing a FieldMetadataInfo objects in an array
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.FieldMetadataInfoArrayPluginResponse.FieldMetaDataObjects">
            <summary>
            Main FieldMetadataInfo array
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.FieldMetadataInfoArrayPluginResponse.#ctor">
            <summary>
            Default constructor, creates an OK response
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.FieldMetadataInfoArrayPluginResponse.#ctor(SuperOffice.CRM.FieldMetadataInfo[])">
            <summary>
            Creates an Ok response and sets the FieldMetadataInfo array object
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.FieldMetadataInfoArrayPluginResponse.ToString">
            <summary>
            ToString() for debugging
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ErpActor">
            <summary>
            Carrier object representing an Actor inside an ERP Connection, used for sending to and from an ERP Connector
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ErpActor.ActorType">
            <summary>
            Actor type (Customer, Supplier, Partner, Person, Employee, Project, etc)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ErpActor.ErpKey">
            <summary>
            The local identifier (primary key) for the actor in the given connection
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ErpActor.LastModified">
            <summary>
            When was the actor last changed/modified. Absolutely mandatory; used for timestamp comparison and sync loop retrieval.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ErpActor.FieldValues">
            <summary>
            Key/value pairs of field keys and field values (field keys as specified by the given connector/connection)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ErpActor.ParentActorType">
            <summary>
            Actor type for the PARENT actor, (for example the company owner for a contact person)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ErpActor.ParentErpKey">
            <summary>
            The local identifier (primary key) for the PARENT actor in the given connection (for example the company owner for a contact person)
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ErpConnectorAttribute">
            <summary>
            Use this attribute to mark a class as an implementation of an ERP Connector. To be
            recognized by the plugin loader, the class also needs to have a parameterless constructor,
            and implement <see cref="T:SuperOffice.CRM.IErpConnector"/>. The name field of this attribute is used
            to identify the plugin when loading/calling it, and should be &lt;Company%gt;.&lt;Plugin&gt; 
            to be unique.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ErpConnectorAttribute.Name">
            <summary>
            Identify the plugin when loading/calling it, and should be &lt;Company%gt;.&lt;Plugin&gt;
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ErpConnectorAttribute.#ctor(System.String)">
            <summary>
            Mark an EIS Connector implementation, and define its name
            </summary>
            <param name="name">to identify the plugin when loading/calling it, and should be &lt;Company%gt;.&lt;Plugin&gt; 
            to be unique.</param>
        </member>
        <member name="T:SuperOffice.CRM.IErpConnector">
            <summary>
            Interface to be implemented by Connectors in the ERP Integration System; implementations also
            need to be marked with the <see cref="T:SuperOffice.CRM.ErpConnectorAttribute"/> to be recognized by the loader.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.GetConfigData">
            <summary>
            Asks the connector what fields are needed to set up a new connection (e.g. database, username and password)
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.TestConfigData(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new connection, or updates an existing one
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.SaveConnection(System.Guid,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new connection, or updates an existing one
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.TestConnection(System.Guid)">
            <summary>
            Checks if the given connection ID is valid (is the connection up, is the configuration data correct, etc)
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.DeleteConnection(System.Guid)">
            <summary>
            Tells the Connector that a connection has been deleted from EIS, in case the Connector needs to know and take some action.
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.GetSupportedActorTypes(System.Guid)">
            <summary>
            Gets the supported actor types for a given connection
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.GetSupportedActorTypeFields(System.Guid,System.String)">
            <summary>
            Gets a list of fields that are available for a given connection and a given actor type
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.GetActors(System.Guid,System.String,System.String[],System.String[])">
            <summary>
            Retrieves actors based on primary key and actor type
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.GetSearchableFields(System.Guid,System.String)">
            <summary>
            Gets a list of searchable fields for a given actor type
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.SearchActorsAdvanced(System.Guid,System.String,SuperOffice.CRM.SearchRestrictionInfo[],System.String[])">
            <summary>
            Searches for one or more actors given a search string
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.SearchActors(System.Guid,System.String,System.String,System.String[])">
            <summary>
            Searches for one or more actors given a search string
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.SearchActorByParent(System.Guid,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Searches for one or more actors given a search string
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.CreateActor(System.Guid,SuperOffice.CRM.ErpActor)">
            <summary>
            Creates a new actor
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.SaveActors(System.Guid,SuperOffice.CRM.ErpActor[])">
            <summary>
            Saves (updates) existing actors
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.GetList(System.Guid,System.String)">
            <summary>
            Retrieves a list from the connector, using the name specified by the connector itself
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.GetListItems(System.Guid,System.String,System.String[])">
            <summary>
            Retrieves one or more specific list items from the connector, using the list name specified by the connector itself
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IErpConnector.GetActorsByTimestamp(System.Guid,System.String,System.String,System.String[])">
            <summary>
            Retrieves all actors of a specified actor type updated on or after a given date and time.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.FieldMetadataTypeInfo">
            <summary>
            Describes the different widgets that the Connector can use in its configuration dialog.
            </summary>
            <remarks>
            Note #1: Enum is mirrored in C++ code, update iEnum.h when it changes
            <para/>
            Note #2: Enum is mirrored in data model (Enums.cs), which also needs to be updated if this changes
            </remarks>
        </member>
        <member name="F:SuperOffice.CRM.FieldMetadataTypeInfo.Checkbox">
            <summary>
            Checkbox widget: Boolean value  
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.FieldMetadataTypeInfo.Text">
            <summary>
            Single line textbox.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.FieldMetadataTypeInfo.Password">
            <summary>
            Single line edit field with password characters - input is hidden.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.FieldMetadataTypeInfo.Integer">
            <summary>
            Single line integer number field. 
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.FieldMetadataTypeInfo.Double">
            <summary>
            Single line decimal number field. 
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.FieldMetadataTypeInfo.List">
            <summary>
            Dropdown listbox. The list name must be provided. The list items are provided by another method.
            The default value should be the list key, not the text of the list item.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.FieldMetadataTypeInfo.Datetime">
            <summary>
            Datetime
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.FieldMetadataTypeInfo.Label">
            <summary>
            Static text - has no input widget associated with it. Can be used for spacing/layout.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.FieldAccessInfo">
            <summary>
            Access restrictions and mandatory status, if any
            <br/>Note: Enum is mirrored in C++ code, update iEnum.h when it changes
            <br/>Note #2: Enum is mirrored in data model (Enums.cs), which also needs to be updated if this changes
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.FieldAccessInfo.Normal">
            <summary>
            Normal field, no particular restrictions
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.FieldAccessInfo.Mandatory">
            <summary>
            This field is mandatory
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.FieldAccessInfo.ReadOnly">
            <summary>
            This field is read-only
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.FieldMetadataInfo">
            <summary>
            This carrier describes a custom field to be added to the config dialog at runtime. 
            It is used to populate the Admin configuration dialog for a connection.
            Note that this is just a description of the field - it is not the field itself.
            The GUI will use this info to build the user interface controls. The call to the 
            ERP Connector’s GetConfigurationFields method returns a list of fields and field types. 
            The Admin client builds a dialog with these fields.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.FieldMetadataInfo.FieldKey">
            <summary>
            Internal name of the field. Used as the key in the ConnectionConfigFieldInfo values when TestConnection is called.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.FieldMetadataInfo.DisplayName">
            <summary>
            Localized field name – shown in the GUI as the label for the control.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.FieldMetadataInfo.DisplayDescription">
            <summary>
            Tooltip for the field name.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.FieldMetadataInfo.FieldType">
            <summary>
            Kind of field widget to use: textbox, number field, password field, dropdown list or checkbox?
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.FieldMetadataInfo.ListName">
            <summary>
            Used for getting the list items from the list provider. The source of the items must ultimately be exposed via
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetQuoteList(System.String)"/> or <see cref="M:SuperOffice.CRM.IErpConnector.GetList(System.Guid,System.String)"/>, through various naming conventions and adapters. The actual Quote and ERP Connectors
            solve this in slightly different ways.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.FieldMetadataInfo.DefaultValue">
            <summary>
            A default value for the field. The value in the widget when the configure dialog is opened in Add Connection mode.
            This will vary a bit depending on the type, of course.
            Obviously, if the field is a label, text or password, then the text is used.
            If the field is an int or double, we shall try to convert the string into a number. 
            (If the conversion fails, we shall use zero or 0.00 as the default value.)
            If the field is a list, we shall try to find a list item where the fields default value matches the listsitem’s ERPQuoteListItemKey.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.FieldMetadataInfo.Rank">
            <summary>
            A way to set the order of the fields. Lowest value will be displayed first/over the fields with other values.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.FieldMetadataInfo.MaxLength">
            <summary>
            Maximum length for strings, if set. 
            0 means no restriction (though sooner or later <b>something</b> will no doubt overflow if you pile on the gigabytes)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.FieldMetadataInfo.Access">
            <summary>
            Access restrictions on the field
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.FieldMetadataInfo.ToString">
            <summary>
            Override: Useful ToString for debugging
            </summary>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.CRM.ForeignKeyInfo">
            <summary>
            Interface providing information about a ForeignKey.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ForeignKeyInfo.Key">
            <summary>
            Subkey (optional)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ForeignKeyInfo.Value">
            <summary>
            Key value
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ForeignKeyInfo.RecordId">
            <summary>
            Record in the referenced table
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ForeignKeyInfo.TableName">
            <summary>
            Table name, transformed to and from numeric table id by the service layer
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IConfiguration">
            <summary>
            Get values from the SuperOffice config section. 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IConfiguration.NetServerVersionFullName">
            <summary>
            Full name of this version of NetServer: "SuperOffice NetServer 7.1 Release (Build: 7.1.200.300.TEST})"
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IConfiguration.DatabaseOwnerName">
            <summary>
            Company name of the database owner. "Example AS"
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IConfiguration.DatabaseSerialNumber">
            <summary>
            Serial Number. "1230004569"
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IConfiguration.DatabaseType">
            <summary>
            "central", "satellite", or "travel"
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IConfiguration.HasLicense(System.String)">
            <summary>
            Does the system have the given license?
            </summary>
            <param name="licenseName">License code name: "superoffice.server" or "superoffice.quote".  Per user CAL licenses are not useful to check here.</param>
            <returns>true if the system has the given license</returns>
        </member>
        <member name="M:SuperOffice.CRM.IConfiguration.GetConfigString(System.String)">
            <summary>
            String value from the application configuration file (web.config or superoffice.config)
            </summary>
            <param name="path">"SuperOffice/Database/Server"</param>
            <returns>"123" from the web.config or superoffice.config file</returns>
        </member>
        <member name="M:SuperOffice.CRM.IConfiguration.GetConfigInt(System.String)">
            <summary>
            Number value from the application configuration file (web.config or superoffice.config)
            </summary>
            <param name="path">"SuperOffice/Database/Major"</param>
            <returns>123 from the web.config or superoffice.config file</returns>
        </member>
        <member name="M:SuperOffice.CRM.IConfiguration.GetConfigBool(System.String)">
            <summary>
            True/False value from the application configuration file (web.config or superoffice.config)
            </summary>
            <param name="path">"SuperOffice/Diagnostics/LogError"</param>
            <returns>true or false from the web.config or superoffice.config file</returns>
        </member>
        <member name="P:SuperOffice.CRM.IUserInfo2.UserName">
            <summary>
            SuperId user-name
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ListItemInfo">
            <summary>
            One line in a quote list from the ERP connector
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ListItemInfo.ERPQuoteListItemKey">
            <summary>
            Primary key for the item
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ListItemInfo.DisplayValue">
            <summary>
            List item text to display.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ListItemInfo.DisplayDescription">
            <summary>
            Typically used in a tooltip
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ListItemInfo.Icon">
            <summary>
            Icon: Either an URI leading to a JPG or PNG; or the name of an existing icon file in CRM; or a base-64 encoded JPG or PNG
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IPersonInfo">
            <summary>
            Interface providing information about a person
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PersonId">
            <summary>
            Primary key of the person
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.AssociateId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.ContactId">
            <summary>
            Owner contact id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Department">
            <summary>
            Person department
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.MrMrs">
            <summary>
            Mr/Mrs field
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.FirstName">
            <summary>
            First name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.MiddleName">
            <summary>
            Middle name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.MiddleName2">
            <summary>
            Middle name if middle name is in use
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.LastName">
            <summary>
            Last name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PersonNumber">
            <summary>
            The persons number
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Salutation">
            <summary>
            Salutation
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.DateOfBirth">
            <summary>
            Date of birth
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.MobilePhone">
            <summary>
            Mobile phone
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.MobilePhoneId">
            <summary>
            Mobile phone id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.OfficePhone">
            <summary>
            Direct phone
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.OfficePhoneId">
            <summary>
            Direct phone id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Fax">
            <summary>
            Direct fax
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.FaxId">
            <summary>
            Direct fax id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.FaxStripped">
            <summary>
            Fax. Any non digit characters are stripped.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PrivatePhone">
            <summary>
            Home phone
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PrivatePhoneId">
            <summary>
            Home phone id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Pager">
            <summary>
            Pager
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PagerId">
            <summary>
            Pager ID
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.EMailId">
            <summary>
            E-mail id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.EMail">
            <summary>
            E-mail
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.ChatId">
            <summary>
            Chat id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Chat">
            <summary>
            Chat
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.ChatProtocol">
            <summary>
            Chat protocol
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.VoipId">
            <summary>
            Voip id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Voip">
            <summary>
            Voip
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.VoipService">
            <summary>
            Voip service
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Url">
            <summary>
            Voip
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.UrlId">
            <summary>
            Voip service
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Nomailing">
            <summary>
            Mail Stop (for American addresses)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.UsePersonAddress">
            <summary>
            Use the person's postal address instead of the contact's address.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PostalAddressLine1">
            <summary>
            Postal Address, line 1
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PostalAddressLine1Extended">
            <summary>
            First address line, including Mail Stop (for American addresses)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PostalAddressLine2">
            <summary>
            Postal Address, line 2
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PostalAddressLine3">
            <summary>
            Postal Address, line 3
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PostalAddressCity">
            <summary>
            Postal town
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PostalAddressCityFull">
            <summary>
            Postal town, state/province and zipcode (for American, Canadian and Australian addresses, e.g. Bedford, MA 01730).
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PostalAddressZip">
            <summary>
            Postcode. (See also aucs.)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PostalAddressState">
            <summary>
            State/province (for American, Canadian and Australian addresses). (See also aucs.)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PostalAddressCounty">
            <summary>
             County (for UK addresses)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.PostalAddressStateAmericaCanadaAustralia">
            <summary>
            State/province (for American, Canadian and Australian addresses). (See also cszc.)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.LineFeedGermany">
            <summary>
            Line feed for internal post in Germany
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.Country2">
            <summary>
            Country if different from the sender's country
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.CountryCode">
            <summary>
            Country code
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo.CountryId">
            <summary>
            Country ID from database
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IPersonInfo.GetUserDefinedDecimal(System.Int32)">
            <summary>
            User-defined field 1-10 of the decimal (.NET double) number type.
            </summary>
            <param name="fieldNo">Field number (1-10).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IPersonInfo.GetUserDefinedInt(System.Int32)">
            <summary>
            Get user-defined field 1-60 of the whole (.NET Int32) number type.
            </summary>
            <param name="fieldNo">Field number (1-60).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IPersonInfo.GetUserDefinedString(System.Int32)">
            <summary>
            Get user-defined field 1-49 of the text (.NET string) type.
            </summary>
            <param name="fieldNo">Field number (1-39).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IPersonInfo.GetUserDefinedDecimal(System.String)">
            <summary>
            Get the decimal udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>double value of field, or NAN if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IPersonInfo.GetUserDefinedInt(System.String)">
            <summary>
            Get the int udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>int value of field, or MINVALUE if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IPersonInfo.GetUserDefinedString(System.String)">
            <summary>
            Get the string udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>string value of field, or NULL if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IPersonInfo.GetInternationalAddress(System.Int32)">
            <summary>
            Get a line from the international address
            </summary>
            <param name="lineNo"></param>
            <returns></returns>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo2.Retired">
            <summary>
            Is the person retired? English text 'True' or 'False'
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo2.PreferredLanguageId">
            <summary>
            This persons preferred support language ID
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo2.ServicePriority">
            <summary>
            This persons service priority ID 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo2.ServiceContactId">
            <summary>
            Our service contact for this person - ID
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo2.ServiceContactName">
            <summary>
            Our service contact for this person - Full name
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IPersonInfo3">
            <summary>
            Interface providing information about a person with extra and udef fields in custom fields info
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IPersonInfo3.CustomFields">
            <summary>
            UDef fields and extra field values encoded as strings: "x_foo" = "[I:123]", "SuperOffice:1" = "[F:34.56]"
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IProjectInfo">
            <summary>
            Interface providing information about a project.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.ProjectId">
            <summary>
            Primary key for the project
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.Name">
            <summary>
            Name of the project
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.Description">
            <summary>
            Description of the project
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.Manager">
            <summary>
            Project manager
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.Number">
            <summary>
            Project number
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.EventDate">
            <summary>
            Project, event date
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.PublishStartDate">
            <summary>
            Project, start date for publishing.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.PublishEndDate">
            <summary>
            Project, end date for publishing
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.Status">
            <summary>
            Project status
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.Type">
            <summary>
            Project type
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.Web">
            <summary>
            The project's primary web address
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo.WebId">
            <summary>
            The project's primary web address, ID (hidden, unique ID).
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IProjectInfo.GetUserDefinedInt(System.Int32)">
            <summary>
            User defined field x of type integer
            </summary>
            <param name="fieldNo">Field number (1-60)</param>
            <returns>User-defined field value</returns>
        </member>
        <member name="M:SuperOffice.CRM.IProjectInfo.GetUserDefinedDecimal(System.Int32)">
            <summary>
            User defined field x of type double
            </summary>
            <param name="fieldNo">Field number (1-10)</param>
            <returns>User-defined field value</returns>
        </member>
        <member name="M:SuperOffice.CRM.IProjectInfo.GetUserDefinedDecimal(System.String)">
            <summary>
            Get the decimal udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>double value of field, or NAN if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IProjectInfo.GetUserDefinedInt(System.String)">
            <summary>
            Get the int udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>int value of field, or MINVALUE if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IProjectInfo.GetUserDefinedString(System.String)">
            <summary>
            Get the string udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>string value of field, or NULL if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.IProjectInfo.GetUserDefinedString(System.Int32)">
            <summary>
            User defined field x of type string
            </summary>
            <param name="fieldNo">Field number (1-49)</param>
            <returns>User-defined field value</returns>
        </member>
        <member name="T:SuperOffice.CRM.IProjectInfo2">
            <summary>
            Interface providing information about a project with guide and milestones
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IProjectInfo3">
            <summary>
            Interface providing information about a project with extra and udef fields in custom fields info
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IProjectInfo3.CustomFields">
            <summary>
            UDef fields and extra field values encoded as strings: "x_foo" = "[I:123]", "SuperOffice:1" = "[F:34.56]"
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteVersionStatusInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteVersionStatusInfo.Status">
            <summary>
            Status information for the quote version.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteVersionStatusInfo.IconHint">
            <summary>
            Icon hint for the associated message.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteVersionStatusInfo.DisplayMessage">
            <summary>
            Generated error message for the Quote Version. Will check for errors on quote lines, alternatives and the version itself.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteVersionStatusInfo.DisplayTooltip">
            <summary>
            Generated full tooltip for the Quote Version. Will check for errors on quote lines, alternatives and the version itself.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ResponseState">
            <summary>
            State enum for a response, describes the possible states from totally Ok to Error that an action can return
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ResponseState.Ok">
            <summary>
            0: The operation completed normally - nothing to see here
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ResponseState.OkWithInfo">
            <summary>
            1: The operation completed, but there is some information that should be shown or logged
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ResponseState.Warning">
            <summary>
            2: The operation completed, possibly in a degraded fashion. The user should be warned
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ResponseState.Error">
            <summary>
            3: The operation did not complete. The user should be told of the error
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.PluginResponseInfo">
            <summary>
            Response object used by plugin/connector actions, to tell the caller how well the call went.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.PluginResponseInfo.#ctor">
            <summary>
            Default constructor, creates an Ok response
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PluginResponseInfo.State">
            <summary>
            Full response state: Ok, OkWithInfo, Warning or Error.  Summarized in the <see cref="P:SuperOffice.CRM.PluginResponseInfo.IsOk"/> property: true as long as State is not Error.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PluginResponseInfo.IsOk">
            <summary>
            A bool simplification of the response state: Return true if the <see cref="P:SuperOffice.CRM.PluginResponseInfo.State"/> is not ResponseState.Error.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PluginResponseInfo.UserExplanation">
            <summary>
            A localized explanation to the answer.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PluginResponseInfo.TechExplanation">
            <summary>
            Always in English
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PluginResponseInfo.ErrorCode">
            <summary>
            An error code, if available.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.PluginResponseInfo.ToString">
            <summary>
            ToString override. Returns a readable PluginResponseInfo representation
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.PluginResponseInfo.Merge(SuperOffice.CRM.PluginResponseInfo)">
            <summary>
            Concatenates two response object into one. If one is ok and the other not, then the 'not' wins.
            The text is concatenated with lineends.
            </summary>
            <param name="rhs">The object to merge into this.</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.PluginResponseInfo.SetErrorAndUserExplanation(System.String,System.String)">
            <summary>
            Sets the IsOk to false and the user exp to the expl argument
            </summary>
            <param name="expl"></param>
            <param name="tech"></param>
        </member>
        <member name="T:SuperOffice.CRM.ApproveRejectResponseInfo">
            <summary>
            Response object used by Approve/ Reject quote version methods.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ApproveRejectResponseInfo.PluginResponseInfo">
            <summary>
            Standard response object
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ApproveRejectResponseInfo.CreatedAppointmentId">
            <summary>
            ID of follow-up created to log the approval
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ReturnType">
            <summary>
            How should a return value from an API call or command be interpreted by the caller
            </summary>
            <remarks>
            Together with the <see cref="T:SuperOffice.CRM.ReturnInfo"/> data class, this type opens the possibility
            for programming fairly complex workflows, with multiple roundtrips chained from one 
            return to the next.
            <para/>
            The disadvantage is that it places a responsibility on the author for choosing which
            clients to support, and to what extent - noting that the number of clients is always
            increasing, and that clients can have vastly different capabilities; from server-room
            sync processes that have no user interaction at all, to full-featured web or windows
            clients.
            </remarks>
        </member>
        <member name="F:SuperOffice.CRM.ReturnType.None">
            <summary>
            0: There is no return value to be parsed.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ReturnType.Message">
            <summary>
            1: The return value is a string, to be shown to the user as a message. A modal dialog box for example.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ReturnType.SoProtocol">
            <summary>
            2: SoProtocol. The return value is an soprotocol-compliant navigation string, to be parsed
            according to the rules for soprotocol strings. e.g. "contact.main?contact_id=123"
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ReturnType.CustomGui">
            <summary>
            3: The return value is the name of a custom GUI. The GetCustomGui method on the 
            document plugin will be invoked, and the resulting GUI rendered.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ReturnType.Other">
            <summary>
            4: The return value is intended for custom processing; this implies that the document plugin
            has installed some component on the intended client that will intercept and handle
            this return value. 
            <br/>Note that this requires advanced knowledge of the client and its
            construction and navigation. Also note that this will make the functionality client-specific,
            so that it may not be available or work as intended on clients not specifically
            supported or known.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ReturnType.URL">
            <summary>
            5: The return value is a URL that should be opened in a new window.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ReturnInfo">
            <summary>
            Return value object for Document Plugin API calls
            </summary>
            <remarks>
            Many document API calls return this object, which contains both information about which
            document it relates to, a result string value, and a result type that defines how this result
            should be parsed and processed by the caller.
            <para/>
            See the <see cref="T:SuperOffice.CRM.ReturnType"/> enum for more details and some caveats.
            </remarks>
        </member>
        <member name="P:SuperOffice.CRM.ReturnInfo.ExternalReference">
            <summary>
            The document plugin's key that uniquely identifies a document; stored in the externalReference field of the document table
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ReturnInfo.VersionId">
            <summary>
            The document plugin's version id that uniquely identifies one version of a document. If versioning is not
            supported, this will be blank. When versioning is supported, blank values imply the <b>latest checked-in</b> version.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ReturnInfo.Success">
            <summary>
            Did the call succeed. A successful call may still return a message or other return value.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ReturnInfo.Type">
            <summary>
            How is the return value <see cref="P:SuperOffice.CRM.ReturnInfo.Value"/> should be understood by the caller.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ReturnInfo.Value">
            <summary>
            Return value, may be blank. Interpretation depends on the <see cref="P:SuperOffice.CRM.ReturnInfo.Type"/> property.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ReturnInfo.AdditionalInfo">
            <summary>
            Optional, additional information meant for further processing. This member is ignored for
            return types None, Message and SoProtocol. It can be used to pass execution-dependent 
            information to the code that handles CustomGui and Other.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ISaleInfo">
            <summary>
            Interface providing information about a sale.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.SaleId">
            <summary>
            Primary key of the sale record
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Associate">
            <summary>
            Owner of the sale
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Number">
            <summary>
            Sale number
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Title">
            <summary>
            Title of the sale
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Amount">
            <summary>
            Sale amount
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Currency">
            <summary>
            Sale currency
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.PublishStartDate">
            <summary>
            Sale, end date for publishing
            </summary>
            <remarks>
            Assumed to be formatted like "yyyyMMdd"
            </remarks>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.PublishEndDate">
            <summary>
            Sale, start date for publishing
            </summary>
            <remarks>
            Assumed to be formatted like "yyyyMMdd"
            </remarks>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Type">
            <summary>
            Sale type - an MDO list item name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Stage">
            <summary>
            Sale stage - an MDO list item name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Credited">
            <summary>
            Credited to - an MDO list item name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Competitor">
            <summary>
            Main Competitor for sale - an MDO list item name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Probability">
            <summary>
            Probability percent - default derived from Stage list item.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.NextDueDate">
            <summary>
            Date of the first uncompleted activity. 
            </summary>
            <remarks>
            Assumed to be formatted like "yyyyMMdd"
            </remarks>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Reason">
            <summary>
            Reason the sale is lost/sold etc
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.SaleDate">
            <summary>
            Expected closing date
            </summary>
            <remarks>
            Assumed to be formatted like "yyyyMMdd"
            </remarks>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo.Status">
            <summary>
            Open/Sold/Lost/Stalled
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ISaleInfo.GetUserDefinedDecimal(System.Int32)">
            <summary>
            User-defined field 1-10 of the decimal (.NET double) number type.
            </summary>
            <param name="fieldNo">Field number (1-10).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.ISaleInfo.GetUserDefinedInt(System.Int32)">
            <summary>
            Get user-defined field 1-60 of the whole (.NET Int32) number type.
            </summary>
            <param name="fieldNo">Field number (1-60).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.ISaleInfo.GetUserDefinedString(System.Int32)">
            <summary>
            Get user-defined field 1-49 of the text (.NET string) type.
            </summary>
            <param name="fieldNo">Field number (1-39).</param>
            <returns>User-defined field value.</returns>
        </member>
        <member name="M:SuperOffice.CRM.ISaleInfo.GetUserDefinedDecimal(System.String)">
            <summary>
            Get the decimal udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>double value of field, or NAN if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.ISaleInfo.GetUserDefinedInt(System.String)">
            <summary>
            Get the int udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>int value of field, or MINVALUE if field not found</returns>
        </member>
        <member name="M:SuperOffice.CRM.ISaleInfo.GetUserDefinedString(System.String)">
            <summary>
            Get the string udef value based on the prog.id name of the udef field.
            </summary>
            <param name="progId">Program name of udef field</param>
            <returns>string value of field, or NULL if field not found</returns>
        </member>
        <member name="T:SuperOffice.CRM.ISaleInfo3">
            <summary>
            Interface providing information about a sale with extra and udef fields in custom fields info
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISaleInfo3.CustomFields">
            <summary>
            UDef fields and extra field values encoded as strings: "x_foo" = "[I:123]", "SuperOffice:1" = "[F:34.56]"
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ICalculationTarget">
            <summary>
            Quote alternatives and quote lines have much in common, especially 
            when it comes to calculation.
            To avoid copying code, we have made this abstraction over what is 
            shared between them.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.CRMQuoteConnectorCapabilities">
            <summary>
            A list of capabilities that a quote connector can have. These are strings instead of an enum to future proof it, i.e. so that when new capabilities occure
            , you don't have to recompile your connector if you don't want to.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideCost">
            <summary>
            Can the Product Provider fill in the Cost price value?
            Determines if the Cost and Earning field is shown in the GUI.
            <para/>
            If this is FALSE, then the Cost Price, Earning and Earning% fields are not shown in the Quote Line dialog or search dialogs or archive footers.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideMinimumPrice">
            <summary>
            Can the Product Provider define the Minimum price value? 
            Determines if the Minimum Price field is shown in the GUI, and if the minimum price is checked against the list price field. 
            <para/>
            If the list price is less than the minimum price, then an ERROR is signalled, blocking the SEND/PLACE ORDER actions of the quote. 
            The minimum price check cannot be bypassed - it does not trigger a NEEDS APPROVAL workflow.
            <para/>
            If this is FALSE, then the Minimum Price field is not shown in the Quote Line dialog or search dialogs or archives, and no check is done on the list price.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideStockData">
            <summary>
            Can the product provider supply the inStock data?
            Determines whether the inStock values are shown in the GUI or not.
            <para/>
            If this is FALSE, then the inStock column is not shown in the product search results.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideExtraData">
            <summary>
            Does the Product Provider fill in any ExtraData. 
            Determines if the extra data fields are shown in the GUI.
            <para/>
            If this is FALSE: then the extra-fields section in the quote line dialog is not shown.
            If this is false, and no extra fields are in use, then the whole EXTRA tab disappears.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvidePicture">
            <summary>
            Can the Product Provider supply any pictures? 
            Determines if the picture field is shown in the dialog.
            <para/>
            If this is FALSE, then the picture in the quote line dialog is not shown. Thumbnails will still be shown in archives, if a thumbnail is provided.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanSendOrderConfirmation">
            <summary>
            Can the connector send its own order confirmation e-mail? If the connector or the ERP system sends its own e-mail, then SuperOffice doesn't have to do it.
            <para/>
            If the capability is FALSE, then the E-MAIL section of the PLACE ORDER dialog is shown.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanPlaceOrder">
            <summary>
            Can the connector place orders?
            If not then the PlaceOrder method is not called.
            The PLACE ORDER button is still shown, and the quote can be set to ordered.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideOrderState">
            <summary>
            Can the connector check order status in the ERP system. 
            <para/>
            If the capability is FALSE, then no GET STATUS button appears after an order has been placed in the ERP system.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideListBase">
            <summary>
            Base string for the list-specific capability; append list name in lowercase and the &quot;list&quot; suffix with no additional underscores
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideProductCategoryList">
            <summary>
            Can the connector provide the Product category list?
            <para/>
            If the capability is FALSE; then a text field is shown in place of a dropdown list in the QuoteLine and Quote dialogs.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideProductFamilyList">
            <summary>
            Can the connector provide the Product family list?
            <para/>
            If the capability is FALSE; then a text field is shown in place of a dropdown list in the QuoteLine and Quote dialogs.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideProductTypeList">
            <summary>
            Can the connector provide the Product type list?
            <para/>
            If the capability is FALSE; then a text field is shown in place of a dropdown list in the QuoteLine and Product dialogs.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvidePaymentTermsList">
            <summary>
            Can the connector provide the Payment terms list?
            <para/>
            If the capability is FALSE; then a text field is shown in place of a dropdown list in the Quote dialog.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvidePaymentTypeList">
            <summary>
            Can the connector provide the Payment type list?
            <para/>
            If the capability is FALSE; then a text field is shown in place of a dropdown list in the Quote dialog.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideDeliveryTermsList">
            <summary>
            Can the connector provide the Delivery terms list?
            <para/>
            If the capability is FALSE; then a text field is shown in place of a dropdown list in the Quote dialog.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideDeliveryTypeList">
            <summary>
            Can the connector provide the Delivery type list?
            <para/>
            If the capability is FALSE; then a text field is shown in place of a dropdown list in the Quote dialog.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanPerformComplexSearch">
            <summary>
            Can the connector provide the &quot;Advanced Search&quot; feature (magnifying glass next to search field, leading to a full Find dialog);
            if TRUE then <see cref="M:SuperOffice.CRM.IQuoteConnector.GetSearchableFields"/>
            should return at least one criterion field.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanProvideAddresses">
            <summary>
            Can the connector provide addresses at all?
            <para/>
            If the capability is TRUE; then the quote will use the delivery and invoice addresses provided by the connector.
            <para/>
            If the capability is FALSE; then the quote will use the default addresses from SuperOffice.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.CanCachePriceLists">
            <summary>
            Can the quote engine cache the pricelists to increase performance?
            <para />
            This is only available in the online environment and is not used by onsite installations.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.NoCacheQuotelists">
            <summary>
            Should the quote engine NOT cache the list output? e.g. When the list content varies by context for example?
            <para />
            This is only available in the online environment and is not used by onsite installations.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.NoCacheImages">
            <summary>
            Should the quote engine NOT cache the images? e.g. When the images varies?
            <para />
            This is only available in the online environment and is not used by onsite installations.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorCapabilities.All">
            <summary>
            Returns all of the capabilities in a handy array. Useful when iterating.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.CRMQuoteConnectorLists">
            <summary>
            Names of the various lists that the Quote plugins can provide. There is a corresponding Capability for each of these lists.
            <see cref="T:SuperOffice.CRM.CRMQuoteConnectorCapabilities"/>
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorLists.ProductCategory">
            <summary>
            The Product Category list
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorLists.ProductFamily">
            <summary>
            The Product Family list
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorLists.ProductType">
            <summary>
            The Product Type list
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorLists.PaymentTerms">
            <summary>
            The Payment Terms list
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorLists.PaymentType">
            <summary>
            The Payment Type list
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorLists.DeliveryTerms">
            <summary>
            The Delivery Terms list
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.CRMQuoteConnectorLists.DeliveryType">
            <summary>
            The Delivery Type list
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteAction.Unknown">
            <summary>
            Means that there are no known action connected
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteAction.Validate">
            <summary>
            The user has explicitly chosen to re-validate the quote
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteAction.SendQuote">
            <summary>
            The user has pressed the send quote button
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteAction.PlaceOrder">
            <summary>
            The user has pressed the place order button
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteAction.UpdatePrices">
            <summary>
            The user has pressed the update prices button
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IQuoteConnector">
            <summary>
            This is the interface SuperOffice will call to integrate against an ERP system in the realm of quotes and orders.
            You don't have to implement all functions, use the capabilities to tell SuperOffice what the connector can and cannot do.
            <para/>
            If an ERP system does not provide products, or if the ERP system is not available
            , the searches can be delegated to the built-in SuperOffice product registry by using 
            the SuperOffice IProductRegisterCache object that is provided at startup. 
            <para/>
            Currencies are specified in ISO three letter codes: USD, NOK, SEK, EUR, GBP, etc.
            See http://www.currency-iso.org/dl_iso_table_a1.xls for details. 
            <para/>
            The user may click the TEST button in the configuration dialog, which calls the TestConnection method.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.IQuoteConnector.CRMConnectionId">
            <summary>
            The id of this connection in the CRM system
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetConfigurationFields">
            <summary>
            This is a request for metadata needed to populate the Quote connection configuration admin dialog 
            that takes in the information needed to create a connection to an ERP system. 
            The values entered in the dialog are stored in the SuperOffice db and used when 
            <see cref="M:SuperOffice.CRM.IQuoteConnector.InitializeConnection(SuperOffice.CRM.QuoteConnectionInfo,SuperOffice.CRM.UserInfo,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},SuperOffice.CRM.IProductRegisterCache)"/> is called by the client.
            </summary>
            <returns>A list of field descriptions for the GUI to use when populating the config dialog. Make sure that the <see cref="P:SuperOffice.CRM.FieldMetadataInfo.Rank"/> is set.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.TestConnection(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Check that the ERP connection is good. Return some status info that the Admin client can show to the user.
            <para/>
            Testing if the connection data is sufficient to get a connection with the ERP system. 
            The Connector should try to do some operations to check if the connection has sufficient rights 
            to run. The connection has not been created yet. 
            </summary>
            <param name="connectionData">{"name" = "value"}. The names are defined by the FieldMetadata. The values are what the user typed into the fields in the configure connection dialog.</param>
            <returns>Ok or not + a status or error message. This message is shown in a result dialog.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.InitializeConnection(SuperOffice.CRM.QuoteConnectionInfo,SuperOffice.CRM.UserInfo,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},SuperOffice.CRM.IProductRegisterCache)">
            <summary>
            Set up the connection to the ERP system.
            Will be called as part of SuperOffice client startup for each installed connection. 
            Configuration data comes from the configuration dialog shown in the Admin client (<see cref="M:SuperOffice.CRM.IQuoteConnector.GetConfigurationFields"/>)
            </summary>
            <param name="connectionData">Contains the configuration values defined in the Admin client.</param>
            <param name="user">Information about the logged in user</param>
            <param name="isOnTravel">Is the user on Travel?</param>
            <param name="connectionConfigFields">{"name" = "value"}. The names are defined by the FieldMetadata. The values are what the user typed into the fields in the configure connection dialog.</param>
            <param name="productRegister">Product caching object that allows connectors to stash product information in the SuperOffice database for off-line use.</param>
            <returns>IsOk set to false if connector can’t provide service (no network); 
            The connector is then ignored until the application restarts.
            </returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetCapabilities">
            <summary>
            Return a set of capability name &gt; status pairs that tell the system what capabilities this connector provides.
            Using the <see cref="T:SuperOffice.CRM.PluginResponseInfo"/> gives the connector the possibility to disable a capability,
            with a reason string that might be shown to the user.
            </summary>
            <returns>List of all capabilities</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.CanProvideCapability(System.String)">
            <summary>
            Check if one named capability can be provided (now)
            Using the <see cref="T:SuperOffice.CRM.PluginResponseInfo"/> gives the connector the possibility to disable a capability,
            with a reason string that might be shown to the user.
            </summary>
            <param name="capabilityName">Name of the capability, see <see cref="T:SuperOffice.CRM.CRMQuoteConnectorCapabilities"/></param>
            <returns>True if connector has this capability</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.OnBeforeCreateQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Called when a user is creating a quote.
            The Quote does not exist in database at this time; 
            any changes in the returned QuoteResponseInfo will be saved and the GUI updated. 
            </summary>
            <param name="context">The quote and its parts.</param>
            <returns>An updated quote. If returns IsOk = false, then quote creation is aborted.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.OnBeforeCreateQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Called when a user is creating a new quoteversion.
            The version does not exist in database at this time; 
            any changes in the returned QuoteVersionResponseInfo will be saved and the GUI updated. 
            </summary>
            <param name="context">The quote and its parts.</param>
            <returns>An updated quote version. If returns IsOk = false, then quoteversion creation is aborted.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.OnBeforeCreateQuoteAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Called when a user is creating a quote alternative.
            The quote alternative does not exist in database at this time; 
            any changes in the returned Quote alternative will be saved and the GUI updated. 
            </summary>
            <param name="context">The quote and its parts.</param>
            <returns>An updated quote alternative. If returns IsOk = false, then quote alternative creation is aborted.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.OnAfterSaveQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Called after a sale containing a quote is saved or created. (Notice that new items have now gotten their ids in the CRM system.)
            </summary>
            <param name="context">The quote and its parts. Contact, Person, Project are read-only. Quote, QuoteRevision, QuoteAlternative parts can be changed before the save.</param>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.OnBeforeDeleteQuote(SuperOffice.CRM.QuoteInfo,SuperOffice.CRM.ISaleInfo,SuperOffice.CRM.IContactInfo)">
            <summary>
            Called before a sale containing a quote is deleted. 
            Clean up in the ERP system, if needed.
            <para/>
            The connector cannot stop the quote being deleted in the CRM system.
            </summary>
            <param name="quote">The Quote being deleted</param>
            <param name="sale">The sale the quote belongs to</param>
            <param name="contact">The main contact on the sale</param>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.OnAfterSentQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Called after a quote version is sent to the user's customer.
            <para/>
            You may do extra work and return the modified the Quote Version info, but you cannot
            abort the sending process. Any mail or document generation in SuperOffice is 
            independent of the connector.
            </summary>
            <param name="quoteContext">The Quote Version that was sent to the customer</param>
            <returns>URL and/or modified quote version info.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetQuoteList(System.String)">
            <summary>
            Gets a named list from the connector.
            <para/>
            There are a few lists in the ERP system that we would like to show to the users: 
            payment terms and types, delivery terms and types, and product classifications (product category, product family and product type).
            These lists can be supplied by the ERP connector using this interface.
            SuperOffice will take these values and convert the simple flat list of values into a SuperOffice list that appears in the GUI.
            If the ERP connector wants to supply a more complex nested list, then the ERP connector can implement a full MDO Provider.
            <para/>
            There are some lists in the system we would like the ERP system to provide data for, if it can:<para/>
            •	ProductCategory<para/>
            •	ProductFamily<para/>
            •	ProductType<para/>
            •	PaymentTerms<para/>
            •	PaymentType<para/>
            •	DeliveryTerms<para/>
            •	DeliveryType <para/>
            If a quote list is NULL, then the GUI will fall back to a text input field, where the user can enter text. 
            This text is passed to the ERP plugin unchanged.<para/>
            The Quote configuration API may also refer to custom list names which will be filled in by asking here. 
            I.e. you will be asked for more lists than just the ones mentioned here, if you have added custom lists to the configuration dialog.
            </summary>
            <param name="quoteListType">The quoteListType parameter is case insensitive.</param>
            <returns>
            Return array of QuoteListItems.
            Return NULL if the given list is not supported.
            </returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetNumberOfActivePriceLists(System.String)">
            <summary>
            Is used to warn the user if there is no active pricelists in a given currency.
            </summary>
            <param name="isoCurrencyCode">Iso currency code like: USD or NOK. Case insensitive. </param>
            <returns>
            Return all pricelists if isoCurrencyCode is empty.	
            Return an empty array if there is no PriceList with the stated currency available.
            </returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetActivePriceLists(System.String)">
            <summary>
            Used by the admin client.
            Gets the available active PriceLists in a specific currency.
            </summary>
            <param name="isoCurrencyCode">Iso currency like: USD or NOK. Case insensitive. </param>
            <returns>
            Return empty array if there is no PriceList available in the currency.
            Return all pricelists if isoCurrencyCode is empty.
            </returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetAllPriceLists(System.String)">
            <summary>
            Used by the admin client.
            Gets the all PriceLists in the given currency, including those inactive.
            </summary>
            <param name="isoCurrencyCode">Iso currency like: USD or NOK. Case insensitive. </param>
            <returns>
            Return empty array if there is no PriceList available.
            Return all pricelists if isoCurrencyCode is empty.
            </returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.FindProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String,System.String,System.String)">
            <summary>
            The connector should treat this as a freetext search, the user might want to enter several words 
            and expect the system to search for through several fields like name, description, product code, extrafields, etc. 
            <para/>
            Since the return list is a potentially large return value, the connector or the ERP system should 
            limit the number of matches returned to a few hundred.
            <para/>
            The dropdown fast searcher calls this function to populate the dropdown list.
            </summary>
            <param name="context"></param>
            <param name="currencyCode"></param>
            <param name="userinput"></param>
            <param name="priceListKey">If the pricelist is empty, the function will search in all active pricelists.</param>
            <returns>An array of products matching the search words</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String)">
            <summary>
            Gets a product based on erpProductKey
            </summary>
            <param name="context"></param>
            <param name="erpProductKey"></param>
            <exception cref="T:System.ArgumentException">If the argument is null or empty
            , the function will throw an ArgumentException.</exception>
            <exception cref="T:System.Exception">If the product is not found
            , the function will throw an Exception.</exception>
            <returns>Returns the product with the specified key.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetProducts(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String[])">
            <summary>
            See GetProduct for details
            </summary>
            <param name="context"></param>
            <param name="erpProductKeys"></param>
            <returns>Return products based on an array of unique ERP keys; handy when you’ve found products through archiveproviders or other mechanisms that leave you holding an ERPKey</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetQuoteLinesFromProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String)">
            <summary>
            Given a product ERP Key, return one or more quote lines with the product data filled in, and some default values
            , typically quantity set to 1 (but not necessarily!)
            The quoteLineId will be provided by SuperOffice later.
            </summary>
            <param name="erpProductKey"></param>
            <param name="context"></param>
            <returns>Return the QuoteLine(-s) with the product info filled in.</returns>
            <exception cref="T:System.ArgumentException">If the erpProductKey is null or empty
            , the function will throw an ArgumentException.</exception>
            <exception cref="T:System.Exception">If the product is not found
            , the function will throw an Exception.</exception>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetNumberOfProductImages(System.String)">
            <summary>
            Gets the number of images available for this product
            </summary>
            <param name="erpProductKey"></param>
            <returns>Count of images</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetProductImage(System.String,System.Int32)">
            <summary>
            Gets the full size picture of the given product.
            </summary>
            <param name="erpProductKey"></param>
            <param name="rank">Which of the images to return, will in the first version only ask for the first.</param>
            <exception cref="T:System.ArgumentException">If the erpProductKey is null or empty
            , the function will throw an ArgumentException.</exception>
            <exception cref="T:System.Exception">If the product is not found
            , the function will throw an Exception.</exception>
            <returns>
            Returns the full size picture of the given product.
            Return NULL if no picture available.
            </returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetSearchableFields">
            <summary>
            Get metadata about the fields that can be used as search criteria. Note that
            they do not have to be the same as the fields in the ProductInfo structure;
            but erpPriceListKey has to be supported.
            </summary>
            <remarks>
            There are three levels of searching:<br/>
            a) Quick search through IProductProvider.FindProduct - this is mandatory for all connectors that provide products<br/>
            b) Advanced search through IProductSearchProvider - this is optional, and implements are more generic search, 
            but still with a fixed result type (ProductInfo array)<br/>
            c) Implement an Archive Provider called FindProduct&lt;Your connector name&gt; - this is a fully custom provider
            that can do whatever it wants, but it has to support a minimal result and restriction column set.
            <para/>
            This interface defines alternative <b>b)</b> of the above list.
            </remarks>
            <returns>Metadata structures</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetSearchResults(SuperOffice.CRM.SearchRestrictionInfo[])">
            <summary>
            Perform the advanced search and return results
            </summary>
            <param name="restrictions">Array of restrictions chosen by the user; see <see cref="T:SuperOffice.CRM.SearchRestrictionInfo"/> for details</param>
            <returns>Array (possibly empty) of hits, populated as fully as reasonably possible (should follow same policy as <see cref="!:IProductProvider.FindProducts"/></returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.OnQuoteLineChanged(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.String[])">
            <summary>
            Called when the user has changed a field in the Quote Line.
            The QuoteContext is readonly; QuoteLine may be changed in the return value. 
            Response time must be fast since this method is called often (every time a field is changed).
            </summary>
            <remarks>
            The connect can signal errors or warnings by setting the <see cref="P:SuperOffice.CRM.QuoteLineInfo.Status"/> and <see cref="P:SuperOffice.CRM.QuoteLineInfo.Reason"/> fields. 
            This information will be displayed in the Quote Line dialog and in the quote-line archive.
            </remarks>
            <param name="context">The alternative this quoteline belongs to</param>
            <param name="ql">The changed quoteline</param>
            <param name="changedFields">List of fields that were changed, in the format: "TableName.FieldName"</param>
            <returns>The updated quote line</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.RecalculateQuoteAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            The user is finished with entering the quotelines, and wants to calculate the order discount (alternative discount)
            on this alternative.
            This method is called whenever the quote lines are changed in the alternative, or when the user clicks the RECALCULATE button. 
            </summary>
            <remarks>
            The connector may signal problems with the quote by setting the <see cref="P:SuperOffice.CRM.QuoteAlternativeInfo.Status">Quote Alternative Status</see> 
            to Error, Warning or OkWithInfo, and fill in the alternative's Reason field with an explanation.
            <para/>
            Use <see cref="M:SuperOffice.CRM.QuoteCalculation.CalculateQuoteAlternativeWithLines(SuperOffice.CRM.QuoteAlternativeWithLinesInfo)"/> to help you calculate amounts.
            </remarks>
            <param name="context">The context as it appears to the user</param>
            <returns>The updated alternative</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.ValidateQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction)">
            <summary>
            Validates the version, looks for problems. Will typically change the Status and Reason fields, possibly change the State to NeedsApproval.
            Should validate all the alternatives and their quote-lines.
            The user is finished with entering the quote-lines, and wants to prepare the sending of the quote. 
            This method gives the ERP system a chance to enforce its business rules.
            <para/>
            This method is called whenever the user clicks the SEND button, the PLACE ORDER or closes the quote dialog. 
            Quote Lines, Alternatives, Version and Quote fields can be changed in the return value. 
            Use <see cref="M:SuperOffice.CRM.QuoteCalculation.CalculateVersionWithAlternatives(SuperOffice.CRM.QuoteVersionContextInfo)"/> to help you calculate amounts.
            </summary>
            <remarks>
            Validation should not change the prices on quotelines - it should ensure conformance to business rules.
            <para/>
            A draft quote version will have state = <see cref="F:QuoteVersionStateInfo.DraftNotCalculated"/> when called. 
            The connector should set the version state to <see cref="!:QuoteVersionStateInfo.DraftCalculated"/>
            if the calculations were successful. Leave the state as DraftNotCalculated if the ERP system was not available or some other factor that made the calculation unsuccessful.
            <para/>
            The connector can trigger the approval workflow by setting the state to <see cref="F:QuoteVersionStateInfo.DraftNeedsApproval"/>. When a user with the approval permission 
            has approved or rejected the quote, the quote version state will be <see cref="F:QuoteVersionStateInfo.DraftApproved"/> or <see cref="F:QuoteVersionStateInfo.DraftNotApproved"/>.
            <para/>
            Note that recalculate may also be called when the quote is Approved, or Archived.  In these cases, please leave the quote version state alone.
            <para/>
            The connector may signal problems with the quote by setting the <see cref="P:SuperOffice.CRM.QuoteVersionInfo.Status">Quote Version Status</see> 
            to Error, Warning or OkWithInfo, and fill in the version's Reason field with an explanation.
            <para/>
            The <see cref="T:SuperOffice.CRM.QuoteConnectorBase"/> implementation of this method defines methods for validating <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateQuoteLine(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.Boolean)"/>
            </remarks>
            <param name="context">The context as it appears to the user</param>
            <param name="action">The action that started this call; the context it is called in, like place order or send quote</param>
            <returns>The updated Context, with changes to State and UserExplanation if needed.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.UpdateQuoteVersionPrices(SuperOffice.CRM.QuoteVersionContextInfo,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Fetch new prices from the pricelist for all the alternatives in the quote.
            This method is explicitly triggered by the user clicking the UPDATE PRICES button in the quote dialog.
            <para/>
            The connector should update all the quotelines on all the alternatives with new list prices, minimum prices, cost prices, etc from the pricelist, and update the ERP discount suggestions.
            </summary>
            <remarks>
            The system will call <see cref="M:SuperOffice.CRM.IQuoteConnector.ValidateQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction)"/> after calling this method to determine the new version state.
            </remarks>
            <param name="context">The quote version, with alternatives and quote lines</param>
            <param name="writeableFields">Collection of quoteline fieldnames that are writeable according to the QuotelineConfiguration table. Fieldnames are all lowercase.</param>
            <returns>Updated quote version, with alternatives and quote lines.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.PlaceOrder(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Some ERP systems will be able to turn quotes into orders. The user selects a quote alternative to send to 
            the ERP system and clicks OK in the CREATE ORDER dialog.
            After the Quote has been accepted/sold, then the user can check the delivery status with the ERP system.
            <para/>
            Place the order in the ERP system. 
            If the operation retuns successfully, the Quote will be locked (completed) in the CRM system
            and all updates will come from the ERP system thru the GetOrderState function.
            <para/>
            Requires that the Create-Order capability is true. If the Create-Order capability is false, then this
            function is not called.
            </summary>
            <param name="context">The selected Quote Alternative, along with the version and lines</param>
            <returns>The context, with any updates. The ERPOrderKey should be filled in with the id of the generated order.
            If the returned state in not OK, then the PlaceOrder call is aborted and the error message displayed.
            </returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetOrderState(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            After the order is created in the ERP system and the user wants to see what the current state of 
            the order is this function gets called.
            <para/>
            This new version will be displayed in the GUI.
            <para/>
            Requires that the Order-State capability is true.
            </summary>
            <param name="context"></param>
            <returns>
            If nothing has changed it should return null.
            To create a new QuoteVersion, set OrderResponseInfo.CRMQuoteVersion.QuoteVersionId to 0, and return a new version with a new alternative and quotelines describing the current state.
            </returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector.GetAddresses(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Gets two addresses:<para/>
            - the invoice address - [0]. <para/>
            - the delivery address - [1]. <para/>
            </summary>
            <param name="context"></param>
            <returns>Returns null if no address was found.</returns>
        </member>
        <member name="T:SuperOffice.CRM.InMemoryProductProvider">
            <summary>
            Class where you load up the products and pricelists in memory and use from memory.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.InMemoryProductProvider.ValidateData">
            <summary>
            Checks the loaded pricelists and products for duplicate keys
            </summary>
            <returns></returns>
        </member>
        <member name="P:SuperOffice.CRM.InMemoryProductProvider.Products">
            <summary>
            The products
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.InMemoryProductProvider.PriceLists">
            <summary>
            The pricelists
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.InMemoryProductProvider.Images">
            <summary>
            The images
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.InMemoryProductProvider.GetNumberOfActivePriceLists(System.String)">
            <summary>
            <see cref="!:IProductProvider.GetNumberOfActivePriceLists"/>
            </summary>
            <param name="isoCurrencyCode"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.InMemoryProductProvider.GetActivePriceLists(System.String)">
            <summary>
            <see cref="!:IProductProvider.GetActivePriceLists"/>
            </summary>
            <param name="isoCurrencyCode"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.InMemoryProductProvider.GetAllPriceLists(System.String)">
            <summary>
            <see cref="!:IProductProvider.GetAllPriceLists"/>
            </summary>
            <param name="isoCurrencyCode"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.InMemoryProductProvider.FindProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String,System.String,System.String)">
            <summary>
            <see cref="!:IProductProvider.FindProduct"/>
            </summary>
            <param name="context"></param>
            <param name="currencyCode"></param>
            <param name="userinput"></param>
            <param name="priceListKey"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.InMemoryProductProvider.GetProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String)">
            <summary>
            <see cref="!:IProductProvider.GetProduct"/>
            </summary>
            <param name="context"></param>
            <param name="erpProductKey"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.InMemoryProductProvider.GetProducts(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String[])">
            <summary>
            <see cref="!:IProductProvider.GetProducts"/>
            </summary>
            <param name="context"></param>
            <param name="erpProductKeys"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.InMemoryProductProvider.GetQuoteLinesFromProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String)">
            <summary>
            <see cref="!:IProductProvider.GetQuoteLinesFromProduct"/>
            </summary>
            <param name="context"></param>
            <param name="erpProductKey"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.InMemoryProductProvider.GetNumberOfProductImages(System.String)">
            <summary>
            <see cref="!:IProductProvider.GetNumberOfProductImages"/>
            </summary>
            <param name="erpProductKey"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.InMemoryProductProvider.GetProductImage(System.String,System.Int32)">
            <summary>
            <see cref="!:IProductProvider.GetProductImage"/>
            </summary>
            <param name="erpProductKey"></param>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.CRM.OrderResponseInfo">
            <summary>
            Response from a Get order state command
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.OrderResponseInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.OrderResponseInfo.#ctor(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Copies quote, version and alternativwlines
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:SuperOffice.CRM.OrderResponseInfo.CRMQuote">
            <summary>
            The possibly changed Quote with for instance the key to the order in the ERP system.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.OrderResponseInfo.CRMQuoteVersion">
            <summary>
            The possibly changed Version  with for instance the key to the order in the ERP system.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.OrderResponseInfo.CRMAlternativeWithLines">
            <summary>
            The possibly changed alternative with for instance the key to the order in the ERP system.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.PlaceOrderResponseInfo">
            <summary>
            Response from a Place order command
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.PlaceOrderResponseInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.PlaceOrderResponseInfo.#ctor(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Copies quote, version and alternativwlines
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:SuperOffice.CRM.PlaceOrderResponseInfo.Url">
            <summary>
            Url to navigate to, if non-blank
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteSentResponseInfo">
            <summary>
            Response from a OnAfterSentQuoteVersion command. Adds a URL field to the QuoteVersion context.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteSentResponseInfo.VersionResponse">
            <summary>
            The Quote Version info describing what was sent.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteSentResponseInfo.Url">
            <summary>
            Url to navigate to, if non-blank
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.IProductRegisterCache">
            <summary>
            SuperOffice has its own simple Product table. This table can be used by the ERP connectors as a cache for ERP data. 
            
            This interface will be implemented by SuperOffice. The implementation is passed to all connectors as an initialization parameter.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IProductRegisterCache.CreatePriceList(SuperOffice.CRM.PriceListInfo)">
            <summary>
            Creates a pricelist in the SuperOffice database.
            </summary>
            <param name="pricelist"></param>
            <returns>Returns the id to the pricelist.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IProductRegisterCache.InsertProducts(System.Int32,SuperOffice.CRM.ProductInfo[])">
            <summary>
            Insert a set of products into the SuperOffice database. 
            </summary>
            <param name="pricelistId"></param>
            <param name="products"></param>
            <returns>Returns the products updated with their new ids.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IProductRegisterCache.UpdateProduct(SuperOffice.CRM.ProductInfo)">
            <summary>
            Update a product in the cache with new information
            </summary>
            <param name="newProd"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.IProductRegisterCache.GetSuperOfficeProductProvider(System.Int32)">
            <summary>
            Here you can get the data you have inserted into the SuperOffice tables.
            </summary>
            <param name="quoteConnectionId"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.IProductRegisterCache.RemovePriceList(System.Int32,System.Boolean)">
            <summary>
            Remove a pricelist and any associated products.
            </summary>
            <param name="pricelistId"></param>
            <param name="alsoRemoveRelatedProducts"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.IProductRegisterCache.RemoveProduct(System.Int32)">
            <summary>
            Will remove a product if it is in a pricelist related to the connection, and the pricelist is an ERP copy. 
            </summary>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.IProductRegisterCache.InsertImage(System.Int32,System.Drawing.Image,System.Int32)">
            <summary>
            Will insert an image in SuperOffice
            </summary>
            <param name="productId"></param>
            <param name="img"></param>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.IProductRegisterCache.RemoveImage(System.Int32)">
            <summary>
            Will remove an image from SuperOffice
            </summary>
            <param name="imageId"></param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.CRM.IQuoteConnector2">
            <summary>
            Enhanced Quote Connector abilities: modify state changes (approvals)
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector2.OnQuoteVersionRequestApproval(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Called when a version needs approval before it can be sent.
            </summary>
            <param name="context">Quote Version that needs approval</param>
            <returns>Updated version state.</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector2.OnQuoteVersionApproved(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Called when quote that needs approval is approved.
            </summary>
            <param name="context">Quote version after approval</param>
            <returns>Updated quote version</returns>
        </member>
        <member name="M:SuperOffice.CRM.IQuoteConnector2.OnQuoteVersionRejected(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Called when quote that needs approval is rejected.
            </summary>
            <param name="context">Version state after rejection</param>
            <returns>Updated version state.</returns>
        </member>
        <member name="T:SuperOffice.CRM.QuoteConnectorAttribute">
            <summary>
            Connector to ERP system
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorAttribute.#ctor(System.String)">
            <summary>
            Connector to ERP system
            </summary>
            <param name="connectorName">Name of the connector as field ConnectorName in table ERPConnection</param>
        </member>
        <member name="T:SuperOffice.CRM.PriceListInfo">
            <summary>
            A pricelist is basically a collection of products. 
            It can be valid in a time period, and outright deactivated. 
            All prices in the product list is in a specific currency.
            We have decieded not to separate prices and products
            , which means that we get a simpler data model, but some redundancy.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.PriceListInfo.ToString">
            <summary>
            Helper for simplified debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SuperOffice.CRM.PriceListInfo.ERPPriceListKey">
            <summary>
            Reference to the pricelist in the product supplier system.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PriceListInfo.QuoteConnectionId">
            <summary>
            The connection in SuperOffice this pricelist comes from.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PriceListInfo.Name">
            <summary>
            Name of this pricelist to use in the user interface.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PriceListInfo.Description">
            <summary>
            Description of this pricelist , will be used as tool-tip in the user interface.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PriceListInfo.Currency">
            <summary>
            The iso currency code, like 'USD' or 'NOK'.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PriceListInfo.CurrencyName">
            <summary>
            The name to use in the user interface, like perhaps 'US dollar' or '$'
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PriceListInfo.ValidFrom">
            <summary>
            The date (inclusive) the pricelist start to be valid. 
            This can be DateTime.MinValue to signal that it doesn't have a specific start date.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.PriceListInfo.ValidTo">
            <summary>
            The date (inclusive) the pricelist ends to be valid. 
            This can be DateTime.MaxValue to signal that it doesn't have a specific end date.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.PriceListInfo.IsValid">
            <summary>
            Checks if the pricelist is valid according to the current date
            </summary>
            <returns>True if valid according to current date</returns>
            <remarks>
            If ValidTo is set to DateTime.MinValue, it will be interpreted as valid
            </remarks>
        </member>
        <member name="P:SuperOffice.CRM.PriceListInfo.IsActive">
            <summary>
            Is the list active (as opposed to being worked on, suddenly canceled, etc.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ExtraDataFieldTypeInfo">
            <summary>
            String, int, decimal, image, url, etc. How should the value be interpreted.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ExtraDataFieldTypeInfo.String">
            <summary>
            0: Anything to be shown as text, left aligned.
            The field can contain formatspecifiers (use this for displaying numbers correctly as the users computer is set up)
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ExtraDataFieldTypeInfo.Url">
            <summary>
            1: A web address
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ExtraDataFieldTypeInfo.Image">
            <summary>
            2: Contains the url of the image, or a base64 encoded version of it.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ProductExtraDataFieldInfo">
            <summary>
            A way to show some simple extra data on a product, typically to hep the user to identify the correct product. 
            Basically a bucket of additional info that the ERP system would like to store and show in the user interface. 
            Information placed here is shown in the GUI if the “provide-extra-data” capability is true.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductExtraDataFieldInfo.Name">
            <summary>
            Label for the field
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductExtraDataFieldInfo.Value">
            <summary>
            Value for the field. If type is string, it can contain formatspecifiers (use this for displaying numbers correctly as the users computer is set up).
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductExtraDataFieldInfo.Type">
            <summary>
            String, image, url,. 
            How the value should be interpreted.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ProductExtraDataFieldInfo.GetXMLRepresentation(SuperOffice.CRM.ProductExtraDataFieldInfo[])">
            <summary>
            Creates a XML representation of an array of ProductExtraDataFieldInfo
            </summary>
            <param name="productExtraInfos">Extra information structures</param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.CRM.ProductDataInfo">
            <summary>
            Data shared between a product and a quote line.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ERPProductKey">
            <summary>
            Reference/foreign key to the product in the product supplier system, if it exists there.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.Name">
            <summary>
            The name to use in the user interface
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.Description">
            <summary>
            The description to use, with potentially several lines.
            Will be used as tool-tip to use in the list user interface too.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.Code">
            <summary>
            The product code / article number in the product supplier system.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.QuantityUnit">
            <summary>
            Unit for setting the sales quantity: 5-Pack, 10-cm, meter, ton, bushel, microsecond, gradus, τρυβλίον, 五合枡, دونم or whatever
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.PriceUnit">
            <summary>
            Unit for determining the price: 5-Pack, 10-cm, meter, ton, bushel, microsecond, gradus, τρυβλίον, 五合枡, دونم or whatever
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.IsSubscription">
            <summary>
            Is this a running subscription, rather than a one-time buy
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.SubscriptionUnit">
            <summary>
            Either a List id to an id from a connector provided list, 
            or, if the connection doesn’t support lists, a text with the actual subscription unit (year, month, ... or some kind of volume unit).
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ItemNumber">
            <summary>
            Line item number, NOR: «Postnummer». Specific numbers from some hierarchy, for instance “1.4.3.2P”. 
            Typically used to sort the items in the quote by some standard way.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.Url">
            <summary>
            URL to product information web page
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ProductCategoryKey">
            <summary>
            Either a List id to an id from a connector provided list, 
            or, if the connection doesn’t support lists, a text with the actual product category.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ProductFamilyKey">
            <summary>
            Either a List id to an id from a connector provided list, 
            or, if the connection doesn't support lists, a text with the actual product family.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ProductTypeKey">
            <summary>
            Either a List id to an id from a connector provided list, 
            or, if the connection doesn’t support lists, a text with the actual product type.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.Supplier">
            <summary>
            Name of the supplier of the product
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.SupplierCode">
            <summary>
            Suppliers part code/number or other key-like field
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.Thumbnail">
            <summary>
            The thumbnail of the product, if it exists. Base64 encoded string, or a valid URI that resolves to an image.
            Requires the “Provide-Thumbnail” capability.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.VATInfo">
            <summary>
            A field for putting VATInfo you need to show in the final quoteDocument, like the VAT type that is used.
            Not used in any business logic in SuperOffice; available to document templates.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.VAT">
            <summary>
            Tax/VAT if available from ERP system. 
            Could be either the percentage or the actual value.
            This is just to help out the layout of the quote in a document
            , but SuperOffice will not try to calculate this value.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.UnitCost">
            <summary>
            The cost price. 
            Might not be given, use Decimal.MinValue to signal this.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.UnitMinimumPrice">
            <summary>
            The minimum price this salesman can offer to his customer. This might be cost price if there is no policy.
            Might not be given, use Decimal.MinValue to signal this.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.UnitListPrice">
            <summary>
            (Basic Price, normal price, standard price.)
            This is the basic price from which the discount is computed from. 
            The ListPrice will stay the same even when a larger amount is ordered.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ExtraInfo">
            <summary>
            Extra data (fields with labels). Shall be shown in the quoteline dialog.
            Bucket of additional info that the ERP system would like to store and show in the user interface. 
            <para />
            Information placed here is shown in the GUI if the “provide-extra-data” capability is true.
            Different products can have different fields.
            It will not be possible to directly put info here into the quote document.
            </summary>
            <example>
            &lt;Fields&gt;
            &lt;Field Name="Weight" Type="Double" Value="16.6" /&gt;
             &lt;Field Name="Height" Type="Double" Value="4.0" /&gt;
             &lt;Field Name="Arms" Type="Integer" Value="2" /&gt;
             &lt;Field Name="Certification" Type="String" Value="AB-ICE"  /&gt;
             &lt;Field Name="Weight" Type="String" Value="40°C" /&gt;
            &lt;/Fields&gt;
            </example>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.RawExtraInfo">
            <summary>
            Extra data (fields with labels) as string. Shall be shown in the quoteline dialog.
            Bucket of additional info that the ERP system would like to store and show in the user interface. 
            <para />
            Information placed here is shown in the GUI if the “provide-extra-data” capability is true.
            Different products can have different fields.
            It will not be possible to directly put info here into the quote document.
            </summary>
            <example>
            &lt;Fields&gt;
            &lt;Field Name="Weight" Type="Double" Value="16.6" /&gt;
             &lt;Field Name="Height" Type="Double" Value="4.0" /&gt;
             &lt;Field Name="Arms" Type="Integer" Value="2" /&gt;
             &lt;Field Name="Certification" Type="String" Value="AB-ICE"  /&gt;
             &lt;Field Name="Weight" Type="String" Value="40°C" /&gt;
            &lt;/Fields&gt;
            </example>
        </member>
        <member name="F:SuperOffice.CRM.ProductDataInfo.fieldRights">
            <summary>
            name=right&amp;... of any fields that have non-standard field access rights
            Will be used by SuperOffice to control the user interface when showing the record.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.Rights">
            <summary>
            Rights attribute
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ProductDataInfo.GetFieldRight(System.String)">
            <summary>
            Returns the special product or quoteline right this product have
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.ProductDataInfo.HasFieldRight(System.String)">
            <summary>
            Does the name field have any right override?
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.ProductDataInfo.HasFieldRight(System.String,System.Char)">
            <summary>
            Does the named field has any special right overrides in this product or Quoteline?
            </summary>
            <param name="fieldname"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.ProductDataInfo.IsFieldWritable(System.String)">
            <summary>
            Both 'M' and 'W' is editable / writable
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.ProductDataInfo.SetRight(System.String,System.String)">
            <summary>
            Sets the right on the named field
            </summary>
            <param name="fieldname">case-sensitive name of QuoteLine field without tablename</param>
            <param name="fieldRight">N=None/hidden, R=Read-only, W=Write/Editable, M=Editable+Mandatory</param>
            <example>
            Rights field = ""
            fieldname="Quantity"
            fieldRight="W"
            
            Result: Rights field = "Quanity=W"
            </example>
            <example>
            Rights field = "Quanity=M;SomeOtherField=W"
            fieldname="Quantity"
            fieldRight="W"
            
            Result: Rights field = "Quanity=W;SomeOtherField=W"
            </example>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.Rule">
            <summary>
            The names of one or more calculation rules that are in effect for this line, comma-separated case-insensitive
            Will NOT be used by SuperOffice.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ExtraField1">
            <summary>
            This a simple field for adding information that the Connector can provide
            , and that the quote document need to display.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ExtraField2">
            <summary>
            This a simple field for adding information that the Connector can provide
            , and that the quote document need to display.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ExtraField3">
            <summary>
            This a simple field for adding information that the Connector can provide
            , and that the quote document need to display.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ExtraField4">
            <summary>
            This a simple field for adding information that the Connector can provide
            , and that the quote document need to display.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductDataInfo.ExtraField5">
            <summary>
            This a simple field for adding information that the Connector can provide
            , and that the quote document need to display.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ProductInfo">
            <summary>
            A product is some thing or service that can be sold or leased to a customer.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ProductInfo.ToString">
            <summary>
            Helper for simplified debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SuperOffice.CRM.ProductInfo.ERPPriceListKey">
            <summary>
            Foreign key to the price list that this quoteline is a part of.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductInfo.InAssortment">
            <summary>
            True for products that should currently be offered, false when the product is discontinued and should not ordinarily be offered.
            
            When false the product no longer appears in search results.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductInfo.InStock">
            <summary>
            Negative numbers will be interpreted as how many is ordered. 
            
            Might not be available.
            Requires the “Provide-Stock-data” capability, and that the ERP system is available.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ProductInfo.DefaultSubscriptionQuantity">
            <summary>
            If <see cref="P:SuperOffice.CRM.ProductDataInfo.IsSubscription"/>, then this field specifies the default number of <see cref="P:SuperOffice.CRM.ProductDataInfo.SubscriptionUnit"/> offered
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.ProductInfo.GetQuoteLineFromProduct(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Returns a QuoteLineInfo from the current ProductDataInfo object
            </summary>
            <param name="context">Context to perform a conversion in</param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.CRM.QuoteAlternativeInfo">
            <summary>
            Quote Version is made up of one or more Alternatives. One of 1..n possible alternatives in a Quote Version.
            The reason we have alternatives is that a quote can say to a customer, “we can solve you problem in two (or more) 
            different ways, with different technology and sideeffects (and price)”.
            An Alternative may have discounts on the total amount. The Alternative tracks whether the user on the order level 
            entered the Discount %, the Discount amount, the Earning%, Earning amount or the TotalPrice fields so that the 
            discount and earning and total can be re-calculated correctly when Quote Lines are added or changed.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.QuoteAlternativeId">
            <summary>
            Primary key to the Alternative in the CRM system.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.ERPQuoteAlternativeKey">
            <summary>
            Key that identifies this alternative in the ERP system, if it exists there.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.QuoteVersionId">
            <summary>
            Foreign key to quote version.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.Name">
            <summary>
            Name of Alternative. Shown in tab in user interface.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.Description">
            <summary>
            The tool-tip to use in the user interface (on the tab, for instance).
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.Status">
            <summary>
            If there was a problem with for instance calculation, this field is set to warning or error.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.Reason">
            <summary>
            If there was a problem, this field contains a localized explanation of the problem and possible steps 
            to fix it that the user can be shown. 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.ERPDiscountPercent">
            <summary>
            The discount the system calculates based on customer /amount / whatever. Can be overrided by the salesman 
            in the field ‘discountPercent’ or ‘discountAmount’.
            Both the two ‘ERPDiscountPercent’ and ‘ERPDiscountAmount’ shall be filled out.
            If UserValueOverride is 'None', then the ERPDiscountAmount shall be copied into DiscountAmount 
            and ERPDiscountPercent into DiscountPercent.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.ERPDiscountAmount">
            <summary>
            The discount the system calculates based on customer /amount / whatever. Can be overrided by the salesman 
            in the field ‘discountPercent’ or ‘discountAmount’.
            Both the two ‘ERPDiscountPercent’ and ‘ERPDiscountAmount’ shall be filled out.
            If UserValueOverride is 'None', then the ERPDiscountAmount shall be copied into DiscountAmount 
            and ERPDiscountPercent into DiscountPercent
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.DiscountPercent">
            <summary>
            The discount the salesman specifies, in percent. 
            Both the two ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride 
            field must be set to the field the user actually changed.
            If this field is filled out by the user, it overrides the discount suggested by the connector.
            If the user has not filled any values, the system will copy the ERP discount % value into this field.
            The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.DiscountAmount">
            <summary>
            The discount the salesman specifies, in whatever currency the sale is in. 
            Both the two ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, 
            but the UserValueOverride field must be set to the field the user actually changed.
            If this field is filled out by the user, it overrides the discount suggested by the connector.
            If the user has not filled any values, the system will copy the ERP discount amount value into this field.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.UserValueOverride">
            <summary>
            Has the pre-calculated (from ERP) price information been overridden, and how.
            </summary>
            <example>
            If the user has filled out the discountpercentage field
            , then the UserValueOverride field is set to OverridePercent.
            (The DiscountAmount, EarningPercent, EarningAmount and TotalPrice fields 
            are then calculated based on the discountPercent.)
            </example>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.VATInfo">
            <summary>
            Extra info about VAT that the connector might insert. 
            This is just to help out the layout of the quote in a document.
            In this field we store VAT info that needs to be printed out on the quote, like “Inc VAT” or “12% VAT”.
            
            May or may not be filled out.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.VAT">
            <summary>
            Tax/VAT if available from ERP system; not used in any business logic. 
            This is just to help out the layout of the quote in a document, but SuperOffice will 
            not try to calculate this value. 
            May or may not be filled out.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.EarningAmount">
            <summary>
            Earning on this alternative, as an absolute amount (in money).
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.EarningPercent">
            <summary>
            The earning on this alternative, in percent of total. 
            The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.SubTotal">
            <summary>
            The sum of the quotelines totalPrice (and not the sum of their subtotal!!).
            
            Think of it as sum before discount.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.TotalPrice">
            <summary>
            Sum of the QuoteLines.TotalPrice - Discount
            or QuoteLines.TotalCost + Earning
            based on what, if anything, the user has entered last.
            Shall be calculated by the connector.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.ExtraField1">
            <summary>
            This a simple field for adding information that the Connector can provide
            , and that the quote document need to display.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.ExtraField2">
            <summary>
            This a simple field for adding information that the Connector can provide
            , and that the quote document need to display.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.ExtraField3">
            <summary>
            This a simple field for adding information that the Connector can provide
            , and that the quote document need to display.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.ExtraField4">
            <summary>
            This a simple field for adding information that the Connector can provide
            , and that the quote document need to display.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeInfo.ExtraField5">
            <summary>
            This a simple field for adding information that the Connector can provide
            , and that the quote document need to display.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteAlternativeInfo.ClearStatus">
            <summary>
            Setting the status to ok and clearing the Reason field.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteAlternativeInfo.AddStatus(SuperOffice.CRM.QuoteStatusInfo,System.String)">
            <summary>
            Increases the status if necesarry, but doesn't decrease the status. (Error > Warning > Ok)
            Appends quoteline reason to alternative with quoteline name prefixed. 
            Adds newlines to alternative reason if needed.
            </summary>
            <param name="status">new status</param>
            <param name="reason">new reason to be appended</param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteAlternativeInfo.AddStatus(SuperOffice.CRM.QuoteLineInfo,SuperOffice.CRM.QuoteStatusInfo,System.String)">
            <summary>
            Increases the status if necesarry, but doesn't decrease the status. (Error > Warning > Ok)
            Appends quoteline reason to alternative with quoteline name prefixed. 
            Adds newlines to alternative reason if needed.
            </summary>
            <param name="ql">QuoteLine</param>
            <param name="status">new status</param>
            <param name="reason">new reason to be appended</param>
        </member>
        <member name="T:SuperOffice.CRM.QuoteAlternativeRecalculatedInfo">
            <summary>
            Describes the changes done while recalculating the quote alternative
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeRecalculatedInfo.QuoteLinesHasChanged">
            <summary>
            If true any of the quotelines for the alternative has been changed.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeRecalculatedInfo.ChangedQuoteAlternative">
            <summary>
            Information about the alternative itself
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeRecalculatedInfo.Changed">
            <summary>
            Ids of changed quote lines
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeRecalculatedInfo.Deleted">
            <summary>
            Ids of deleted quotelines
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeRecalculatedInfo.Added">
            <summary>
            Ids of added quote lines
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteAlternativeResponseInfo">
            <summary>
            Response with QuoteAlternative and QuoteLine information
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeResponseInfo.CRMAlternativesWithLines">
            <summary>
            Alternative information.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteAlternativeResponseInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteAlternativeResponseInfo.#ctor(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Constructor - copies version context.
            </summary>
            <param name="context">version</param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteAlternativeResponseInfo.#ctor(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Constructor - copies alternative into version context.
            </summary>
            <param name="context">an alternative</param>
        </member>
        <member name="T:SuperOffice.CRM.QuoteCalculation">
            <summary>
            Contains helper methods and utilities for implementors of Quote Connectors.
            Used by the <see cref="T:SuperOffice.CRM.QuoteConnectorBase"/> to handle calculations.
            <para/>
            Typically you would call <see cref="M:SuperOffice.CRM.QuoteCalculation.CalculateQuoteAlternativeWithLines(SuperOffice.CRM.QuoteAlternativeWithLinesInfo)"/> from your connector
            to get the basic summation and discount calculations done. You could then add anything you were interested in on 
            top of the standard calculations.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateVersionWithAlternatives(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            
            </summary>
            <param name="context">The context</param>
            <returns>Potentionaly changed context</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateQuoteAlternativeWithLines(SuperOffice.CRM.QuoteAlternativeWithLinesInfo)">
             <summary>
             Some formulaes:
             <para/> SubTotal = Quantity * UnitListPrice
             <para/>TotalCost = Quantity * UnitCost
            <para/>
             <para/>TotalPrice = SubTotal - DiscountAmount
             <para/>TotalPrice = TotalCost + EarningAmount
             <para/>
             <para/>DiscountAmount = DiscountPercent * SubTotal / 100
             <para/>DiscountPercent = DiscountAmount * 100 / SubTotal
             <para/>
             <para/>EarningAmount = EarningPercent * TotalCost / 100
             <para/>EarningPercent = EarningAmount * 100 / TotalPrice
             <para/>
             Thus, you can change any of the 5: 
             TotalPrice, DiscountAmount, DiscountPercent, EarningAmount and EarningPercent
             and calculate the other 4.
             <para/>
             Independently, you can change Quantity, UnitListPrice and UnitCost.
             <para/>
             Subscriptions imply that Quantity and SubscriptionQuantity are multiplied when calculating amounts.
             </summary>
             <param name="alt">The Quote Alternative</param>
             <returns>The alternative with new values filled in on the quote lines</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateQuoteLines(SuperOffice.CRM.QuoteLineInfo[])">
            <summary>
            Loop through and perform calculation on each line in an alternative.
            </summary>
            <param name="lines">The quote lines</param>
            <returns>The same quote alternative, but with the new calculated values on the quote lines</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateTotalPriceFromEarningPercent(SuperOffice.CRM.ICalculationTarget,System.Double)">
            <remarks>
            Converting to decimal to avoid double-trouble with subtraction:
            http://stackoverflow.com/questions/2211378/c-weird-outcome-when-subtracting-doubles
            </remarks>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateTotalPriceFromEarning(SuperOffice.CRM.ICalculationTarget,System.Double)">
            <remarks>
            Converting to decimal to avoid double-trouble with subtraction:
            http://stackoverflow.com/questions/2211378/c-weird-outcome-when-subtracting-doubles
            </remarks>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateDiscountAmountFromTotal(SuperOffice.CRM.ICalculationTarget)">
            <remarks>
            Converting to decimal to avoid double-trouble with subtraction:
            http://stackoverflow.com/questions/2211378/c-weird-outcome-when-subtracting-doubles
            </remarks>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateEarningAmountFromTotalPrice(SuperOffice.CRM.ICalculationTarget,System.Double)">
            <remarks>
            Converting to decimal to avoid double-trouble with subtraction:
            http://stackoverflow.com/questions/2211378/c-weird-outcome-when-subtracting-doubles
            </remarks>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateTotalPriceFromDiscount(SuperOffice.CRM.ICalculationTarget)">
            <remarks>
            Converting to decimal to avoid double-trouble with subtraction:
            http://stackoverflow.com/questions/2211378/c-weird-outcome-when-subtracting-doubles
            </remarks>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateValues(SuperOffice.CRM.QuoteLineInfo)">
            <summary>
            Calculates SubTotal, DiscountAmount, DiscountPercent, EarningAmount, EarningPercent and Total
            </summary>
            <returns>The updated QuoteLine</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateValues(SuperOffice.CRM.QuoteAlternativeWithLinesInfo)">
            <summary>
            Calculates SubTotal, DiscountAmount, DiscountPercent, EarningAmount, EarningPercent and Total
            </summary>
            <returns>The updated QuoteAlternative</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateTotalPriceWithAlternativeDiscount(SuperOffice.CRM.QuoteAlternativeWithLinesInfo)">
            <summary>
            Calculates Quoteline.TotalPriceWithAlternativeDiscount
            </summary>
            <param name="alt"></param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateTotalPriceWithAlternativeDiscount(System.Collections.Generic.IEnumerable{SuperOffice.CRM.QuoteLineInfo},System.Double)">
            <summary>
            Calculates Quoteline.TotalPriceWithAlternativeDiscount
            </summary>
            <param name="quoteLines"></param>
            <param name="discountPercent">The alternatives discountpercent</param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateVat(SuperOffice.CRM.QuoteAlternativeWithLinesInfo)">
            <summary>
            The VAT is computed from the sum of the quotelines TotalPriceWithAlternativeDiscount * VAT:
            
            We assume that the VAT in the quotelines is saved as a percentage
            i.e. 12% is stored as 12.
            If any number is negative, we don't know what to do with it so we leave it alone.
            </summary>
            <param name="alt"></param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateQuoteLineSubTotal(SuperOffice.CRM.QuoteLineInfo)">
            <summary>
             Quantity * Unit List Price
            </summary>
            <param name="line"></param>
            <returns>Quantity * Unit List Price</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateQuoteAlternativeSubTotal(SuperOffice.CRM.QuoteLineInfo[])">
            <summary>
            Sum of quotelines (quantity * listprice)
            </summary>
            <param name="quoteLines"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateAlternativeCost(SuperOffice.CRM.QuoteLineInfo[])">
            <summary>
            Basically sum of quotelines( quantity * unitcost )
            </summary>
            <param name="quoteLines"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteCalculation.CalculateAlternativeMinimum(SuperOffice.CRM.QuoteLineInfo[])">
            <summary>
            Basically sum of quotelines( quantity * unitminprice)
            </summary>
            <param name="quoteLines"></param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.CRM.QuoteConnectionInfo">
            <summary>
            A Quote Connection is set up in the SuperOffice Admin client. 
            It collects the parameters needed to talk to a single ERP client, and gives it a name and an id.
            
            Quote connections will be stored in the table “QuoteConnection” in the CRM database.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectionInfo.CRMConnectionId">
            <summary>
            Primary key in the CRM database. Definition of a connection to an external system, for the Quote system.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectionInfo.ERPClientName">
            <summary>
            Name of the client (company) in the ERP system
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectionInfo.ERPClientKey">
            <summary>
            The identifier for the client in the ERP system.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectionInfo.DisplayName">
            <summary>
            Connection name shown to user; multi-language support. The name of the connector to display in a 
            list so that the users can choose between them. 
            Typically the name of the client, with maybe the ERP system in parenthesis.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectionInfo.DisplayDescription">
            <summary>
            Tooltip/description shown to user; multi-language support. Any other info available that would 
            make an uncertain user chose the right connector. 
            Typically, used for tooltip.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteConnectorBase">
            <summary>
            A base class with som typical quote functionality: Price calculations from the <see cref="T:SuperOffice.CRM.QuoteCalculation"/> helper class.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteConnectorBase.CRMConnectionId">
            <summary>
            <see cref="P:SuperOffice.CRM.IQuoteConnector.CRMConnectionId"/>
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.InsertCaption(System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.FieldMetadataInfo},System.Int32,System.String,System.String)">
            <summary>
            Inserts a blank line and a caption line
            </summary>
            <param name="dic"></param>
            <param name="rank"></param>
            <param name="caption"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.InitializeConnection(SuperOffice.CRM.QuoteConnectionInfo,SuperOffice.CRM.UserInfo,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},SuperOffice.CRM.IProductRegisterCache)">
            <summary>
            cref="IQuoteConnector.InitializeConnection"/>
            </summary>
            <param name="connectionData">Information about the connection</param>
            <param name="isOnTravel">True if we are currently on travel</param>
            <param name="connectionConfigFields">Configuration parameters</param>
            <param name="productRegister">Interface to call if a product register cache is desired</param>
            <param name="user">Information about the current user</param>
            <returns>Ok if connection to ERP system established. Error if connection is not usable.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.CanProvideCapability(System.String)">
            <summary>
            <see cref="M:SuperOffice.CRM.IQuoteConnector.CanProvideCapability(System.String)"/>
            </summary>
            <param name="capabilityName">Name of the capability, see <see cref="T:SuperOffice.CRM.CRMQuoteConnectorCapabilities"/></param>
            <returns>True if the connector can provide the requested function.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetCapabilityNames">
            <summary>
            All the known names for capabilities.
            </summary>
            <seealso cref="T:SuperOffice.CRM.CRMQuoteConnectorCapabilities"/>
            <returns>Array of strings with capabilites</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetCapabilities">
            <summary>
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetCapabilities"/>
            </summary>
            <returns>All capability responses</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.OnBeforeCreateQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnBeforeCreateQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)"/>
            </summary>
            <param name="context">The alternative</param>
            <returns> Changed values. Null means no change </returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.OnBeforeCreateQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnBeforeCreateQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo)"/>
            </summary>
            <param name="context">The alternative</param>
            <returns>Changed values. Null means no change</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.OnBeforeCreateQuoteAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnBeforeCreateQuoteAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo)"/>
            </summary>
            <param name="context">The alternative</param>
            <returns>Changed values. Null means no change</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.OnAfterSaveQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnAfterSaveQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)"/>
            </summary>
            <param name="context">The alternative</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.OnBeforeDeleteQuote(SuperOffice.CRM.QuoteInfo,SuperOffice.CRM.ISaleInfo,SuperOffice.CRM.IContactInfo)">
            <summary>
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnBeforeDeleteQuote(SuperOffice.CRM.QuoteInfo,SuperOffice.CRM.ISaleInfo,SuperOffice.CRM.IContactInfo)"/>
            </summary>
            <param name="quote">Quote that will be deleted</param>
            <param name="sale">Sale the quote belongs to</param>
            <param name="contact">Contact the sale belongs to</param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.OnAfterSentQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnAfterSentQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo)"/>
            </summary>
            <param name="context">The version that was sent</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.OnQuoteLineChanged(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.String[])">
            <summary>
            Some formulaes:
            <list type="bullet">
            <item>
            <description>
            SubTotal = Quantity * UnitListPrice
            </description>
            </item> 
            <item>
            <description>
            TotalCost = Quantity * UnitCost
            </description>
            </item> 
            <item>
            <description>
            TotalPrice = SubTotal - DiscountAmount
            </description>
            </item> 
            <item>
            <description>
            TotalPrice = TotalCost + EarningAmount
            </description>
            </item> 
            <item>
            <description>
            DiscountAmount = DiscountPercent * SubTotal / 100
            </description>
            </item> 
            <item>
            <description>
            DiscountPercent = DiscountAmount * 100 / SubTotal
            </description>
            </item> 
            <item>
            <description>
            EarningAmount = EarningPercent * TotalCost / 100
            </description>
            </item> 
            <item>
            <description>
            EarningPercent = EarningAmount * 100 / TotalPrice
            </description>
            </item> 
            </list>
            Thus, you can change any of the 5: 
            TotalPrice, DiscountAmount, DiscountPercent, EarningAmount and EarningPercent
            and calculate the other 4.
            <para/>
            Independently, you can change Quantity, UnitListPrice and UnitCost.
            </summary>
            <remarks>
            Calls <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateQuoteLine(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.Boolean)"/> to check that the business rules are ok.
            </remarks>
            <param name="context">The alternative containing the quote line</param>
            <param name="ql">The QuoteLine to calculate</param>
            <param name="changedFields">not used</param>
            <returns>The QuoteLine, with modifications, after validation</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.RecalculateQuoteAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Some formulaes:
            <list type="bullet">
            <item>
            <description>
            SubTotal = Quantity * UnitListPrice
            </description>
            </item> 
            <item>
            <description>
            TotalCost = Quantity * UnitCost
            </description>
            </item> 
            <item>
            <description>
            TotalPrice = SubTotal - DiscountAmount
            </description>
            </item> 
            <item>
            <description>
            TotalPrice = TotalCost + EarningAmount
            </description>
            </item> 
            <item>
            <description>
            DiscountAmount = DiscountPercent * SubTotal / 100
            </description>
            </item> 
            <item>
            <description>
            DiscountPercent = DiscountAmount * 100 / SubTotal
            </description>
            </item> 
            <item>
            <description>
            EarningAmount = EarningPercent * TotalCost / 100
            </description>
            </item> 
            <item>
            <description>
            EarningPercent = EarningAmount * 100 / TotalPrice
            </description>
            </item> 
            </list>
            Thus, you can change any of the 5: 
            TotalPrice, DiscountAmount, DiscountPercent, EarningAmount and EarningPercent
            and calculate the other 4.
            <para/>
            Independently, you can change Quantity, UnitListPrice and UnitCost.
            </summary>
            <remarks>
            Sets the QuoteVersion.State to Calculated if the state was NotCalculated.
            <para/>
            Calls <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo,System.Boolean)"/> to check the alternative 
            after calling <see cref="M:SuperOffice.CRM.QuoteCalculation.CalculateQuoteAlternativeWithLines(SuperOffice.CRM.QuoteAlternativeWithLinesInfo)"/>
            to sum all the quotelines together.
            </remarks>
            <param name="inContext">The alternative</param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.ValidateQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction)">
            <summary>
            Will loop thru and validate all the alternatives and then validate the version state.
            </summary>
            <remarks>
            Calls <see cref="M:SuperOffice.CRM.QuoteCalculation.CalculateVersionWithAlternatives(SuperOffice.CRM.QuoteVersionContextInfo)"/> and <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction,System.Boolean)"/> to do the actual validation.
            </remarks>
            <param name="context">The current quote version</param>
            <param name="action">The action that started this call; the context it is called in, like place order or send quote</param>
            <returns>Updated quote version, with state and status set.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.UpdateQuoteVersionPrices(SuperOffice.CRM.QuoteVersionContextInfo,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Should loop thru and update all the alternatives with new prices from the pricelists.
            This implementation does nothing.
            </summary>
            <param name="context">Current quote version</param>
            <param name="writeableFields">Names of writable fields</param>
            <returns>Updated quote version</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.CleanOutStatusAndReason(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Sets status to OK, and reason to string.Empty in all levels (Version, Alternatives, QuoteLines).
            </summary>
            <param name="context">The version</param>
            <returns>The same version, with all quotelines in all alternatives and the version status + reason fields blanked.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.ValidateVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction,System.Boolean)">
            <summary>
            Validates the version, looks for problems. Will typically change the Status and Reason fields.
            Basically validates the alternatives and then concaternates the problems.
            Calls <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo,System.Boolean)"/> to validate each alternative.
            Called from <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction)"/>.
            </summary>
            <param name="context"></param>
            <param name="clearOldValues">Should the function clear out old values for status and reason?</param>
            <returns>A potentially changed context, with Status and Reason filled in</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.ValidateAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo,System.Boolean)">
            <summary>
            Check rules for the quote alternative and fill out the status and reason fields if there is a problem.
            Calls <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateQuoteLine(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.Boolean)"/> for each quoteline in the alternative.
            Called from <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction,System.Boolean)"/> for each alternative in the quote version.
            </summary>
            <remarks>
            Enforces basic checks on the alternative's total price against the Zero/Negative values, and the total Cost and Minimum price values.
            Implement your own <see cref="M:SuperOffice.CRM.QuoteConnectorBase.GetQuoteStatusInfo(System.String)"/> method to define responses to these standard checks.
            </remarks>
            <param name="context">The alternative to validate</param>
            <param name="clearOldValues">Should the function clear out old values for status and reason?</param>
            <returns>Updated quote alternative and quote lines.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.ValidateQuoteLine(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.Boolean)">
            <summary>
            Check rules for the quoteline and fill out the status and reason fields if there is a problem.
            </summary>
            <remarks>
            Called from the <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo,System.Boolean)"/> and <see cref="M:SuperOffice.CRM.QuoteConnectorBase.OnQuoteLineChanged(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.String[])"/> .
            <para/>
            Calls the <see cref="M:SuperOffice.CRM.QuoteConnectorBase.GetQuoteStatusInfo(System.String)"/> function to determine what the status on the quoteline should be.
            i.e. Should a Negative TotalPrice be flagged as an error or a warning?
            </remarks>
            <param name="context">The Alternative that this quoteline belongs to.</param>
            <param name="ql">The original quoteline</param>
            <param name="clearOldValues">Should the function clear out old values for status and reason?</param>
            <returns>A potentially changed quoteline</returns>
        </member>
        <member name="T:SuperOffice.CRM.QuoteConnectorBase.ConfigNames">
            <summary>
            Names of different situations that the list price can end up in that the Quote Connector needs to respond to. 
            Used for referring to the configuration settings in the SuperOffice Quote Connector.
            <see cref="M:SuperOffice.CRM.QuoteConnectorBase.GetQuoteStatusInfo(System.String)"/> for usage.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectorBase.ConfigNames.Assortment">
            <summary>
            Product is not active in list-price any more
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectorBase.ConfigNames.Expired">
            <summary>
            Price list that product is in is now expired, no longer active.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectorBase.ConfigNames.BelowMinPrice">
            <summary>
            Discounted price for quote line is below the minimum price for this product.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectorBase.ConfigNames.BelowCost">
            <summary>
            Discounted price for quote line is below the cost price for this product.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectorBase.ConfigNames.Zero">
            <summary>
            Total price for quote line is zero
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectorBase.ConfigNames.Negative">
            <summary>
            Total price for quote line is below zero
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetQuoteStatusInfo(System.String)">
            <summary>
            Return the status that should be given for a given type of situation.
            Called from <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateQuoteLine(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.Boolean)"/> to determine how to handle various situations.
            <para/>
            i.e. should the situation BelowCost be flagged as a Warning or an Error?
            </summary>
            <param name="key">The kind of list price situation (belowminimumprice, negative). <see cref="T:SuperOffice.CRM.QuoteConnectorBase.ConfigNames"/> for values used.</param>
            <returns>OkWithInfo - override this method to supply your own logic</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetConfigurationFields">
            <summary>
            Returns no configuration fields
            </summary>
            <returns>Empty dictionary. Override if you need configuration fields.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.TestConnection(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Test the connection. Base implementation Always returns IsOk - Ok
            </summary>
            <param name="connectionData">Configuration fields</param>
            <returns>Always returns OK - override with a better implementation.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetQuoteList(System.String)">
            <summary>
            Always return an empty list (array of length 0).
            </summary>
            <param name="quoteListType"></param>
            <returns>Array of length 0</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetNumberOfActivePriceLists(System.String)">
            <summary>
            Always return 0
            </summary>
            <param name="isoCurrencyCode"></param>
            <returns>Zero</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetActivePriceLists(System.String)">
            <summary>
            Always return empty list (array of length 0).
            </summary>
            <param name="isoCurrencyCode"></param>
            <returns>Array of length 0</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetAllPriceLists(System.String)">
            <summary>
            Always return empty list (array of length 0).
            </summary>
            <param name="isoCurrencyCode"></param>
            <returns>Array of length 0</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetNumberOfProductImages(System.String)">
            <summary>
            Always returns 0. Override if you want to have images.
            </summary>
            <param name="erpProductKey"></param>
            <returns>Zero</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetProductImage(System.String,System.Int32)">
            <summary>
            Always return blank.
            </summary>
            <param name="erpProductKey"></param>
            <param name="rank">Image number</param>
            <returns>Empty string - no image.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetSearchableFields">
            <summary>
            Always return no fields.
            </summary>
            <returns>Array of length 0</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetSearchResults(SuperOffice.CRM.SearchRestrictionInfo[])">
            <summary>
            Always return empty result.
            </summary>
            <param name="restrictions"></param>
            <returns>Array of length 0</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.PlaceOrder(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Always return Ok.
            </summary>
            <param name="context"></param>
            <returns>Ok.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetOrderState(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Always returns NULL.
            </summary>
            <param name="context"></param>
            <returns>NULL</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.GetAddresses(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Always returns null.
            </summary>
            <param name="context"></param>
            <returns>NULL</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.CanUserWriteToField(System.String,SuperOffice.CRM.QuoteLineInfo,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Check if the given quoteline field is writeable by the user. 
            This method first checks the Rights field of the quoteline, then the quoteline configuration fields from the database.
            </summary>
            <param name="fieldName">The fieldname to check</param>
            <param name="quoteLineInfo">QuoteLineInfo object with fieldrights</param>
            <param name="writeableFields">Collection of fields writeable by the user. This is the settings from the database. </param>
            <returns>true if the field is writeable.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.OnQuoteVersionRequestApproval(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Returns quote version unchanged.
            </summary>
            <param name="context">Quote version</param>
            <returns>Unchanged quote version</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.OnQuoteVersionApproved(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Returns quote version unchanged.
            </summary>
            <param name="context">Quote version</param>
            <returns>Unchanged quote version</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorBase.OnQuoteVersionRejected(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Returns quote version unchanged.
            </summary>
            <param name="context">Quote version</param>
            <returns>Unchanged quote version</returns>
        </member>
        <member name="T:SuperOffice.CRM.QuoteConnectorExtender">
            <summary>
            Base class that allows 3rd party modules to extend the SuperOffice Quote Connector without directly linking to the specific version of the QuoteConnector.dll
            <para/>
            This class is made to make it easier to make some installation specific changes to a connector 
            without directly linking to the connector itself.
            <para/>
            Just inherit QuoteConnectorExtender and override the function you need to change or extend the functionality.
            <see cref="T:SuperOffice.CRM.IQuoteConnector"/>
            </summary>
            <remarks>
            This class will call your interface implementations if they exist, otherwise it will call the inherited 
            </remarks>
        </member>
        <member name="F:SuperOffice.CRM.QuoteConnectorExtender._connector">
            <summary>
            The connector that the extender extends.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.#ctor">
            <summary>
            Default Constructor of the extender. Extend the SuperOfficeQuoteConnector in "SuperOffice.QuoteConnector.Dll".
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.#ctor(System.String)">
            <summary>
            Constructor of the extender.
            </summary>
            <param name="nameOfPluginToExtend">
            Relative or absolute path to the assembly, 
            Ex: "C:\Program Files (x86)\SuperOffice\Plugins\MyConnector.dll"
            </param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.SetConnectorToExtend(System.String)">
            <summary>
            Same as constructor
            </summary>
            <param name="nameOfPluginToExtend"></param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetConfigurationFields">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetConfigurationFields"/>
            unless you override this method.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SuperOffice.CRM.QuoteConnectorExtender.NextConnectorKeyname">
            <summary>
            Concatenates the ConnectorName and "_NextConnectorKey"
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteConnectorExtender.ConnectorName">
            <summary>
            Returns the ConnectorName from the attribute
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.TestConnection(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.TestConnection(System.Collections.Generic.Dictionary{System.String,System.String})"/>
            unless you override this method.
            </summary>
            <param name="connectionData"></param>
            <returns></returns>
        </member>
        <member name="P:SuperOffice.CRM.QuoteConnectorExtender.CRMConnectionId">
            <summary>
            Return the id of this connector.
            <see cref="P:SuperOffice.CRM.IQuoteConnector.CRMConnectionId"/>
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetCapabilities">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetCapabilities"/>
            unless you override this method.
            </summary>
            <returns>List of what the connector can do</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.CanProvideCapability(System.String)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.CanProvideCapability(System.String)"/>
            unless you override this method.
            </summary>
            <param name="capabilityName">Name of the capability, see <see cref="T:SuperOffice.CRM.CRMQuoteConnectorCapabilities"/></param>
            <returns>List of what the connector can do</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.InitializeConnection(SuperOffice.CRM.QuoteConnectionInfo,SuperOffice.CRM.UserInfo,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},SuperOffice.CRM.IProductRegisterCache)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.InitializeConnection(SuperOffice.CRM.QuoteConnectionInfo,SuperOffice.CRM.UserInfo,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},SuperOffice.CRM.IProductRegisterCache)"/>
            unless you override this method.
            </summary>
            <param name="connectionData">Information about the connection</param>
            <param name="isOnTravel">True if we are currently on travel</param>
            <param name="connectionConfigFields">Configuration parameters</param>
            <param name="productRegister">Interface to call if a product register cache is desired</param>
            <param name="user">Information about the current user</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.OnAfterSaveQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnAfterSaveQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.OnBeforeCreateQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnBeforeCreateQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.OnBeforeCreateQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnBeforeCreateQuote(SuperOffice.CRM.QuoteAlternativeContextInfo)"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.OnBeforeCreateQuoteAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnBeforeCreateQuoteAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo)"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.OnBeforeDeleteQuote(SuperOffice.CRM.QuoteInfo,SuperOffice.CRM.ISaleInfo,SuperOffice.CRM.IContactInfo)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnBeforeDeleteQuote(SuperOffice.CRM.QuoteInfo,SuperOffice.CRM.ISaleInfo,SuperOffice.CRM.IContactInfo)"/>
            unless you override this method.
            </summary>
            <param name="quote">Quote that will be deleted</param>
            <param name="sale">Sale the quote belongs to</param>
            <param name="contact">Contact the sale belongs to</param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.OnAfterSentQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnAfterSentQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo)"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.FindProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String,System.String,System.String)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.FindProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String,System.String,System.String)"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
            <param name="currencyCode"></param>
            <param name="userinput"></param>
            <param name="priceListKey"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetNumberOfActivePriceLists(System.String)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetNumberOfActivePriceLists(System.String)"/>
            unless you override this method.
            </summary>
            <param name="isoCurrencyCode"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetActivePriceLists(System.String)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetActivePriceLists(System.String)"/>
            unless you override this method.
            </summary>
            <param name="isoCurrencyCode"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetAllPriceLists(System.String)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetAllPriceLists(System.String)"/>
            unless you override this method.
            </summary>
            <param name="isoCurrencyCode"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String)"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
            <param name="erpProductKey"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetProducts(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String[])">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetProducts(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String[])"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
            <param name="erpProductKeys"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetQuoteLinesFromProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetQuoteLinesFromProduct(SuperOffice.CRM.QuoteAlternativeContextInfo,System.String)"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
            <param name="erpProductKey"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetNumberOfProductImages(System.String)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetNumberOfProductImages(System.String)"/>
            unless you override this method.
            </summary>
            <param name="erpProductKey"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetProductImage(System.String,System.Int32)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetProductImage(System.String,System.Int32)"/>
            unless you override this method.
            </summary>
            <param name="erpProductKey"></param>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.OnQuoteLineChanged(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.String[])">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.OnQuoteLineChanged(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.String[])"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
            <param name="ql"></param>
            <param name="changedFields"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.RecalculateQuoteAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.RecalculateQuoteAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo)"/>
            unless you override this method.
            </summary>
            <param name="context"></param>
            <returns>Updated </returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.ValidateQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.ValidateQuoteVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction)"/>
            unless you override this method.
            </summary>
            <param name="context">The version with it's context</param>
            <param name="action"></param>
            <returns>A potentially changed context</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.ValidateVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction,System.Boolean)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateVersion(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAction,System.Boolean)"/>
            unless you override this method.
            Does nothing if you are extending a connector that is not based on QuoteConnectorBase.
            </summary>
            <param name="context"></param>
            <param name="action"></param>
            <param name="clearOldValues">Should the function clear out old values for status and reason?</param>
            <returns>A potentially changed version with alternative AND quotelines</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.ValidateAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo,System.Boolean)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateAlternative(SuperOffice.CRM.QuoteAlternativeContextInfo,System.Boolean)"/>
            unless you override this method.
            Does nothing if you are extending a connector that is not based on QuoteConnectorBase.
            </summary>
            <param name="context"></param>
            <param name="clearOldValues">Should the function clear out old values for status and reason?</param>
            <returns>A potentially changed alternative AND quotelines</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.ValidateQuoteLine(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.Boolean)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.QuoteConnectorBase.ValidateQuoteLine(SuperOffice.CRM.QuoteAlternativeContextInfo,SuperOffice.CRM.QuoteLineInfo,System.Boolean)"/>
            unless you override this method.
            Does nothing if you are extending a connector that is not based on QuoteConnectorBase.
            </summary>
            <param name="ql"></param>
            <param name="clearOldValues">Should the function clear out old values for status and reason?</param>
            <returns>A potentially changed quoteline</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.UpdateQuoteVersionPrices(SuperOffice.CRM.QuoteVersionContextInfo,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.UpdateQuoteVersionPrices(SuperOffice.CRM.QuoteVersionContextInfo,System.Collections.Generic.HashSet{System.String})"/>
            unless you override this method.
            </summary>
            <param name="context">Current quote version</param>
            <returns>Updated quote version</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetQuoteList(System.String)">
            <summary>
            Will call the base connector's
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetQuoteList(System.String)"/>
            unless you override this method.
            </summary>
            <param name="quoteListType"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.PlaceOrder(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Calls the base class's implementation of 
            <see cref="M:SuperOffice.CRM.IQuoteConnector.PlaceOrder(SuperOffice.CRM.QuoteAlternativeContextInfo)"/>
            unless you override this method.
            </summary>
            <param name="context">The alternative to place and order for</param>
            <returns>How it went</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetOrderState(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Calls the base class's implementation of 
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetOrderState(SuperOffice.CRM.QuoteAlternativeContextInfo)"/>
            unless you override this method.
            </summary>
            <param name="context">The alternative to place and order for</param>
            <returns>An updated alternative. Fill in the delivered quantity, change the state or reason flags on quote lines to reflect the state of the order in the ERP system.</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetSearchableFields">
            <summary>
            Calls the base class's implementation of 
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetSearchableFields"/>
            unless you override this method.
            </summary>
            <returns>Metadata structures</returns>
        </member>
        <member name="M:SuperOffice.CRM.QuoteConnectorExtender.GetSearchResults(SuperOffice.CRM.SearchRestrictionInfo[])">
            <summary>
            Calls the base class's implementation of 
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetSearchResults(SuperOffice.CRM.SearchRestrictionInfo[])"/>
            unless you override this method.
            </summary>
            <param name="restrictions">Array of restrictions chosen by the user; see <see cref="T:SuperOffice.CRM.SearchRestrictionInfo"/> for details</param>
            <returns>Array (possibly empty) of hits, populated as fully as reasonably possible (should follow same policy as <see cref="!:IProductProvider.FindProducts"/></returns>
        </member>
        <member name="T:SuperOffice.CRM.QuoteContextInfo">
            <summary>
            QuoteContextInfo contains all the information for communicating with the ERP connector.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteContextInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteContextInfo.Assign(SuperOffice.CRM.QuoteContextInfo)">
            <summary>
            Will copy the values of the src into this.
            </summary>
            <param name="src"></param>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.CRMAssociate">
            <summary>
            Read-only. The logged in user (the salesman)
            Note: not necessarily the the owner of the sale – that is exposed via the SaleInfo object
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.CRMCompany">
            <summary>
            Read-only information about the company the sale is attached to.
            The CRM client will update the amount + cost fields on the sale based on the quote values.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.CRMPerson">
            <summary>
            Read-only information about the person the sale is attached to.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.CRMProject">
            <summary>
            Read-only. The sales related project info (if any).
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.CRMSale">
            <summary>
            Read-only information about the sale the quote is attached to.
            The CRM client will update the amount + cost fields on the sale based on the quote values.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.CRMForeignKeys">
            <summary>
            The foreign keys that is related to this quote.
            Contact keys, project keys, sales keys and quotekeys.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.CRMQuote">
            <summary>
            Read + Write quote information
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.CRMQuoteVersion">
            <summary>
            Read + Write version information.
            
            This is the active version
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.InvoiceAddress">
            <summary>
            The invoice address this quote/order shall be sent to.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.DeliveryAddress">
            <summary>
            The delivery address this quote/order shall be sent to.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.EISConnectionId">
            <summary>
            The id of the EIS Connection in the CRM system.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.EISConnectionGuid">
            <summary>
            A conversation identifier
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.ERPCompanyKey">
            <summary>
            A key to the equivalent id in the ERP system, from the EIS System.
            May be empty.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.ERPPersonKey">
            <summary>
            A key to the equivalent id in the ERP system, from the EIS System.
            May be empty.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.ERPProjectKey">
            <summary>
            A key to the equivalent id in the ERP system, from the EIS System.
            May be empty.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.ERPSaleKey">
            <summary>
            A key to the equivalent id in the ERP system, from the EIS System.
            May be empty.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteContextInfo.UserLanguageCode">
            <summary>
            The language the users uses in the CRM client. The connector should preferably respond using this language.
            .net culture code: “nb-NO”, “en-US” etc.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteAlternativeContextInfo">
            <summary>
            QuoteAlternativeContextInfo contains all the information for communicating with the ERP connector.
            It contains information about the quote with a single alternative.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeContextInfo.CRMAlternativeWithLines">
            <summary>
            Read + Write alternative information.
            
            This is the active alternative
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteAlternativeContextInfo.Assign(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Will copy the values of the src into this.
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteAlternativeContextInfo.Assign(SuperOffice.CRM.QuoteVersionContextInfo,SuperOffice.CRM.QuoteAlternativeWithLinesInfo)">
            <summary>
            Will copy the values of the src and the alt into this.
            </summary>
            <param name="src"></param>
            <param name="alt"></param>
        </member>
        <member name="T:SuperOffice.CRM.QuoteAlternativeWithLinesInfo">
            <summary>
            Sometimes, when we work in context of an alternative, we need all the alternatives.
            We then use an array of this class.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteAlternativeWithLinesInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeWithLinesInfo.CRMAlternative">
            <summary>
            Read + Write alternative information.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteAlternativeWithLinesInfo.CRMQuoteLines">
            <summary>
            The quotelines that the alternative consists of.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteVersionContextInfo">
            <summary>
            QuoteAlternativeContextInfo contains all the information for communicating with the ERP connector.
            It contains information about the quote with a version and all its alternatives.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteVersionContextInfo.Assign(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Will copy the values of the src into this.
            </summary>
            <param name="src"></param>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionContextInfo.CRMAlternativesWithLines">
            <summary>
            Collection of QuoteAlternativeWithLinesInfo which contains information about several alternatives with quotelines.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteInfo">
            <summary>
            A Sale can have a quote, and have then a 1-1 relationship with the QuoteInfo.
            Read-write Quote information.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.QuoteId">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.SaleId">
            <summary>
            The foreign key to the corresponding sale.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.QuoteConnectionId">
            <summary>
            The connection in the CRM system where this quote came from. 
            Identifies the ERP connection used for this quote. Each quote is bound to one and only one connection.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.ERPQuoteKey">
            <summary>
            Foreign key of quote (if available).
            The key in the ERP system that identifies this sale's Quote (as opposed to the later Order information).
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.ERPOrderKey">
            <summary>
            The key in the ERP system that identifies this sale's Order, as transferred and possibly later 
            edited in the ERP system. 
            Only filled out if there exists a corresponding order representation of the quote in the ERP system.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.ActiveQuoteVersionId">
            <summary>
            The active version will always be the latest version.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.AcceptedQuoteAlternativeId">
            <summary>
            The primary key of the Quote Alternative which was finally accepted by the customer. 
            Set when the user is marking a quote as accepted.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.DocumentId">
            <summary>
            The ID of the main Quote Document. This is not the document containing the products, but the other one.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.PoNumber">
            <summary>
            Customer's Purchase order number
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.OrderComment">
            <summary>
            A comment that is intended for the Invoice, Order, Packing list and similar stages - AFTER the quote has become an order and goes to ERP for processing
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteInfo.PreferredCulture">
            <summary>
            When emails are sent (offer or confirmation), a language can be chosen in the GUI; this field saves the most recent choice and can be used to default the next such choice. Default-default is user's current language
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteLineInfo">
            <summary>
            One line in a QuoteAlternative.
            QuoteLines are mainly information copied from the Products provider. 
            Products information is sometimes edited by the user before being included in the quote
            , so most information is duplicated from Product rather than referenced directly.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.QuoteLineId">
            <summary>
            Primary key in the CRM system
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.ERPQuoteLineKey">
            <summary>
            The foreign key to the quoteline in ERP system (if it has such a representation). 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.QuoteAlternativeId">
            <summary>
            The alternative this line is part of, the conceptual Parent in CRM database.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.Status">
            <summary>
            If there was a problem with for instance calculation, this field is set to warning or error.
            Typically shown as an icon. QuoteStatus is an enum with statuses: OK, OKWithInfo, Warning, Error.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.Reason">
            <summary>
            If QuoteStatus is not OK, then this field contains a localized explanation that the user can be shown.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.Quantity">
            <summary>
            How many units; this is a decimal field since you might want to offer fractional units (2.5kg, or 0.5PC)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.SubscriptionQuantity">
            <summary>
            If <see cref="P:SuperOffice.CRM.ProductDataInfo.IsSubscription"/>, then this field specifies the number of <see cref="P:SuperOffice.CRM.ProductDataInfo.SubscriptionUnit"/> offered
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.SubscriptionStart">
            <summary>
            If <see cref="P:SuperOffice.CRM.ProductDataInfo.IsSubscription"/>, then this field specifies the start date of the subscription offered
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.DeliveredQuantity">
            <summary>
            How many units have been delivered - updated by ERP system.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.Rank">
            <summary>
            QuoteLines can be re-ordered, so we must track the ordering.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.ERPDiscountAmount">
            <summary>
            The discount the system calculates based on customer /amount / whatever. 
            Can be overrided by the salesman in the field DiscountPercent' or 'DiscountAmount'. 
            Both fields ERPDiscountPercent and ERPDiscountAmountwill be filled out.
            The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.ERPDiscountPercent">
            <summary>
            The discount the system calculates based on customer / quantity / whatever. 
            Can be overrided by the salesman in the field 'DiscountPercent' or 'DiscountAmount'. 
            Both fields ERPDiscountPercent and ERPDiscountAmountwill be filled out.
            The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.DiscountAmount">
            <summary>
            The discount for the line, in whatever currency the sale is in.
            Both ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride 
            field must be set to the field the user actually changed last.
            If this field is filled out by the user, it overrides any discount suggested by the connector.
            If the user has not filled this in, the system will copy the ERP discount amount to this field.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.DiscountPercent">
            <summary>
            The discount for the line, in percent. 
            Both ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride 
            field must be set to the field the user actually changed last.
            If this field is filled out by the user, it overrides any discount suggested by the connector.
            If the user has not filled this in, the system will copy the ERP discount amount to this field. 
            The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.UserValueOverride">
            <summary>
            Has the pre-calculated (from ERP) price information been overridden, and how.
            If the user has filled out the discountpercentage field, then the UserValueOverride field is set to OverridePercent.
            (The DiscountAmount, EarningPercent, EarningAmount and TotalPrice fields are calculated based on the DiscountPercent.)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.EarningAmount">
            <summary>
            The earning, in money
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.EarningPercent">
            <summary>
            The earning, in percent
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.SubTotal">
            <summary>
            (UnitListPrice * Quantity)
            Calculated by the ERPconnector
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.TotalPrice">
            <summary>
            TotalPrice  = SubTotal - DiscountAmount 
            or 
            TotalPrice = (UnitCost * Quantity) + EarningAmount
            , according to what the user changed last.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteLineInfo.TotalPriceWithAlternativeDiscount">
            <summary>
            Created to help calculation of for instance VAT
            TotalPriceWithAlternativeDiscount = TotalPrice * (1 - Alternative.DiscountPercent)
            </summary>
            <example>
            So, if the TotalPrice of the QuoteLine is 200 and the Alternative.DiscountPercent 0.1 (= 10%)
            then the TotalPriceWithAlternativeDiscount = 200 * ( 1 - 0.1 ) = 180
            </example>
        </member>
        <member name="M:SuperOffice.CRM.QuoteLineInfo.ClearStatus">
            <summary>
            Setting the status to ok and clearing the Reason field.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteLineInfo.AddStatus(SuperOffice.CRM.QuoteStatusInfo,System.String)">
            <summary>
            Increases the status if necesarry, but doesn't decrease the status
            Adds new line for the reason if needed.
            </summary>
            <param name="status">new status</param>
            <param name="reason">why the new status</param>
        </member>
        <member name="T:SuperOffice.CRM.QuoteResponseInfo">
            <summary>
            Response with Quote, QuoteVersion, QuoteAlternative and QuoteLine information
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteResponseInfo.CRMQuote">
            <summary>
            Quote information
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteResponseInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteResponseInfo.#ctor(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Constructor - copies version context.
            </summary>
            <param name="context">version</param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteResponseInfo.#ctor(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Constructor - copies alternative into version context.
            </summary>
            <param name="context">an alternative</param>
        </member>
        <member name="T:SuperOffice.CRM.QuoteStatusInfo">
            <summary>
            The state of a quote-alternative or -line
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteStatusInfo.Ok">
            <summary>
            0: Ok
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteStatusInfo.OkWithInfo">
            <summary>
            1: Ok with info
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteStatusInfo.Warning">
            <summary>
            2: Warning
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.QuoteStatusInfo.Error">
            <summary>
            3: Error
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteVersionInfo">
            <summary>
            Represent a version of a quote
            <p/>
            A quote is divided into one or more versions (or revisions, if you like), so a quote have 1..n QuoteVersions. 
            I.e. a QuoteVersion always have a quote.
            <p/>
            Even if versioning is disabled, a single version will exist.  When versioning is disabled, new versions are not created
            , but the only one is reused.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteVersionInfo.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.QuoteVersionId">
            <summary>
            Primary key in the CRM system
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ERPQuoteVersionKey">
            <summary>
            Key in the ERP system that uniquely identifies this Version within the ERP system (if available, the field may be empty).
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.QuoteId">
            <summary>
            Foreign key to CRM quote (the conceptual parent)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.Description">
            <summary>
            Description of Version.
            Potentially longer text description, typically used in a tooltip. 
            Max 2K.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.Number">
            <summary>
            A quote number that the user (or ERP connector) can fill out.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.State">
            <summary>
            Current state of this quote version.
            The states will be like: CalculatedDraft, NotCalculatedDraft, Published, etc.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ArchivedState">
            <summary>
            State that this quote version had, right before it was changed to Archived; 
            in this way we can show what happened before the archiving.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.LikelyQuoteAlternativeId">
            <summary>
            The alternative that is considered most likely to be accepted. 
            Used to calculate probable income.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.SentDate">
            <summary>
            The date the version was sent to the customer. 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.FollowupId">
            <summary>
            Link to a follow-up activity, created when this quote version was sent to the customer.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ExpirationDate">
            <summary>
            Last date the quote Version is valid, expiration is at midnight end of this day.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.DeliveryCountryId">
            <summary>
            Country of delivery address, typically copied from the contact record
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.HasOwnDeliveryAddress">
            <summary>
            The delivery address is not the same as the contact's Street address
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.InvoiceCountryId">
            <summary>
            Country of invoice address, typically copied from contact record
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.HasOwnInvoiceAddress">
            <summary>
            The quote has an address for Invoicing. This will typically be copied from the company's addresses.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ERPPaymentTermsKey">
            <summary>
            Either a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text.
            For instance: «Standard 30 days»
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ERPPaymentTypeKey">
            <summary>
            Either a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text.
            For instance: “Invoice”
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ERPDeliveryTermsKey">
            <summary>
            Either a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text.
            For instance: 'FOB' ('Free on board')
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ERPDeliveryTypeKey">
            <summary>
            Either a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text.
            For instance: “Air” 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.Rank">
            <summary>
            Rank/Version number, starts at 1.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.Status">
            <summary>
            If there was a problem with for instance calculation, this field is set to warning or error.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.Reason">
            <summary>
            If there was a problem, this field contains a localized explanation of the problem and possible steps to fix it that the user can be shown.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ApprovedBy">
            <summary>
            Id of associate who approved (or rejected approval) for this version
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ApprovedText">
            <summary>
            Text with comments on why approval was granted (or rejected)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ApprovedRegisteredBy">
            <summary>
            Id of associate who actually entered the approval; might be different from ApprovedBy (f.x. due to telephone consultation/approval)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ApprovedRegisteredDate">
            <summary>
            When was approval granted or rejected
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ExtraField1">
            <summary>
            Optional information added by Quote Connector; usable in the quote document merge process.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ExtraField2">
            <summary>
            Optional information added by Quote Connector; usable in the quote document merge process.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ExtraField3">
            <summary>
            Optional information added by Quote Connector; usable in the quote document merge process.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ExtraField4">
            <summary>
            Optional information added by Quote Connector; usable in the quote document merge process.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.ExtraField5">
            <summary>
            Optional information added by Quote Connector; usable in the quote document merge process.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.LastRecalculated">
            <summary>
            .NET type: DateTime. When this version was last subjected to a total recalculation. 
            This field must be set by the connector, since the connector may choose to ignore a RecalculateVersion call 
            based on policies and possibly the current value of this field. 
            SuperOffice will set this field to 1.1.1760 whenever any change occurs to the quote, to indicate that a 
            recalculation is needed.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.Updated">
            <summary>
            Last updated
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.RequestAssociateId">
            <summary>
            User choosen to approve this quote version
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionInfo.RequestComment">
            <summary>
            Reason for why this quoteversion should be approved
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteVersionInfo.ClearStatus">
            <summary>
            Setting the status to ok and clearing the Reason field.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteVersionInfo.AddStatus(SuperOffice.CRM.QuoteStatusInfo,System.String,System.String)">
            <summary>
            Increases the status if necesarry, but doesn't decrease the status
            Adds line for the reason + the alternative name
            </summary>
            <param name="name">name of the alternative/quoteline that triggered the reason</param>
            <param name="status">alternative status</param>
            <param name="reason">alternative reason</param>
        </member>
        <member name="T:SuperOffice.CRM.QuoteVersionRecalculatedInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionRecalculatedInfo.ChangedSale">
            <summary>
            If the sale has been changed, the interface will be set
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionRecalculatedInfo.ChangedQuote">
            <summary>
            The recalculated version is a member of Quote
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionRecalculatedInfo.ChangedQuoteVersion">
            <summary>
            The recalculated QuoteVersion
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionRecalculatedInfo.ChangedQuoteAlternatives">
            <summary>
            The changed QuoteAlternatives
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.QuoteVersionResponseInfo">
            <summary>
            Response with Version and Quote Information
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionResponseInfo.CRMQuoteVersion">
            <summary>
            Version information.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteVersionResponseInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.QuoteVersionResponseInfo.#ctor(SuperOffice.CRM.QuoteVersionContextInfo)">
            <summary>
            Constructor - copies version context.
            </summary>
            <param name="context">version</param>
        </member>
        <member name="M:SuperOffice.CRM.QuoteVersionResponseInfo.#ctor(SuperOffice.CRM.QuoteAlternativeContextInfo)">
            <summary>
            Constructor - copies alternative into version context.
            </summary>
            <param name="context">an alternative</param>
        </member>
        <member name="T:SuperOffice.CRM.QuoteVersionValidatedInfo">
            <summary>
            Return object from QuoteVersionValidate connector call 
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionValidatedInfo.ChangedSale">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionValidatedInfo.ChangedQuote">
            <summary>
            The recalculated version is a member of Quote
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionValidatedInfo.ChangedQuoteVersion">
            <summary>
            The recalculated QuoteVersion
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.QuoteVersionValidatedInfo.ChangedQuoteAlternatives">
            <summary>
            The changed QuoteAlternatives
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.ValueOverrideInfo">
            <summary>
            Which field the user changed last.
            This helps the calulation to calculate the other fields correctly.
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ValueOverrideInfo.None">
            <summary>
            0: Discount data is from the ERP system and has not been overridden
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ValueOverrideInfo.OverrideTotal">
            <summary>
            1: The Total amount has been overridden; all other fields should be recalculated
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ValueOverrideInfo.OverrideDiscountPercent">
            <summary>
            2: The discount percentage has been overriden; all other fields should be recalculated
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ValueOverrideInfo.OverrideDiscountAmount">
            <summary>
            3: The discount amount has been overridden; all other fields should be recalculated
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ValueOverrideInfo.OverrideEarningPercent">
            <summary>
            4: The earning percent has been overridden; all other fields should be recalculated
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.ValueOverrideInfo.OverrideEarningAmount">
            <summary>
            5: The earning amount has been overridden; all other fields should be recalculated
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.SearchRestrictionInfo">
            <summary>
            This class represents one restriction in an &quot;Advanced Find&quot; supported by an ERP (Sync/Quote) connector
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.SearchRestrictionInfo.FieldKey">
            <summary>
            Field key, corresponding to a previously-returned FieldKey in a <see cref="T:SuperOffice.CRM.FieldMetadataInfo"/> structure;
            uniquely identifies the field to search for
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.SearchRestrictionInfo.Operator">
            <summary>
            Operator to be applied in this search. Operators are: =, !=, &gt;, &lt; between and IN for all data types; 
            in addition, strings should support begins and contains with % as the wildcard placeholder
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.SearchRestrictionInfo.Values">
            <summary>
            Array of values to apply in search. Most operators take just one value, and the <see cref="P:SuperOffice.CRM.SearchRestrictionInfo.ScalarValue"/> derived
            property can be used to get/set the value
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.SearchRestrictionInfo.ScalarValue">
            <summary>
            Simplified get/set property for the one-and-only element of the <see cref="P:SuperOffice.CRM.SearchRestrictionInfo.Values"/> array, for operators
            that take only one value.
            </summary>
        </member>
        <member name="M:SuperOffice.CRM.SearchRestrictionInfo.ToString">
            <summary>
            ToString override formatting the search restriction
            </summary>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.CRM.ISelectionInfo">
            <summary>
            Interface providing information about a selection.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISelectionInfo.SelectionId">
            <summary>
            Primary key of the selection record
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISelectionInfo.Name">
            <summary>
            Name of the selection
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.ISelectionInfo.SelectedMembers">
            <summary>
            Highlighted list from selection. (space separated list consisting of comma separated contacts and persons from selection.)
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.UserInfo">
            <summary>
            Class providing information about the associate (user).
            This should have been an interface. Sorry about that.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.AssociateId">
            <summary>
            Primary key for the Associate
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.AssociateName">
            <summary>
            Username for the Associate
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.FullName">
            <summary>
            Firstname Lastname combined in a culture specific way.
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.Email">
            <summary>
            E-mail address
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.RoleId">
            <summary>
            Role primary key
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.RoleName">
            <summary>
            Role name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.CountryId">
            <summary>
            User's country id. The user's person's country id
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.CountryName">
            <summary>
            User's country name. The user's person's country name
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.CountryDomainName">
            <summary>
            User's country domain name. The user's person's country domain name (uk, no, se)
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.FunctionRights">
            <summary>
            Function Rights assigned to this user via the role: "admin-all", "allow-bulk-delete", "quote-can-approve", etc
            See also SuperOffice.CRM.FunctionRightStrings
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.Licenses">
            <summary>
            Licenses for this user: "superoffice.server", "superoffice.quote", "superoffice.quote-cal", "superoffice.user", etc.
            See also SuperOffice.License.SoLicenseNames
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo.Ticket">
            <summary>
            Netserver ticket which can be used for impersonating the user.
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.UserInfo2">
            <summary>
            User info extended with username and custom fields values
            </summary>
        </member>
        <member name="P:SuperOffice.CRM.UserInfo2.UserName">
            <summary>
            SuperId user-name
            </summary>
        </member>
        <member name="T:SuperOffice.CRM.Globalization.CultureDataFormatter">
            <summary>
            This is a helper class designed to encode, parse and reformat culturally sensitive data types between
            an application server without culture knowledge, and a front-end with such knowledge.
            </summary>
            <remarks>
            <para/>
            The problem: The application server does not know the culture of the current client. At the same time,
            we need to be able to include culturally sensitive data (such as a date) as part of a tooltip or other
            server-side generated text. Before displaying this text to the user, culturally sensitive elements need 
            to be parsed and reformatted to the correct culture.
            <para/>
            The methods in this class take care of both sides of this process. The Encode methods, such as 
            <see cref="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeDate(System.DateTime)"/>, take a native data type as input and return a string that contains both
            a specification of what it is (a date) and the value formatted in the invariant culture.
            <para/>
            The <see cref="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalizeEncoded(System.String)"/> method will take such a formatted element, and by calling on the
            proper LocalFormat method (such as <see cref="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalFormatDate(System.DateTime)"/>, return it in its correct form according
            to the current culture settings for the thread.
            </remarks>
        </member>
        <member name="F:SuperOffice.CRM.Globalization.CultureDataFormatter.MarkerSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="F:SuperOffice.CRM.Globalization.CultureDataFormatter.BeginTag">
            The begin tag
        </member>
        <member name="F:SuperOffice.CRM.Globalization.CultureDataFormatter.EndTag">
            The end tag
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.Encode(System.Object)">
            <summary>
            Encode a object based on type. Types supported: DateTime, Double, Integer, String and Boolean
            </summary>
            <param name="value">Object to be encoded</param>
            <returns>Encoded object</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeDate(System.DateTime)">
            <summary>
            Encode a date, without a time part
            </summary>
            <param name="dateTime">DateTime whose date component is to be encoded</param>
            <returns>Encoded date</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeDate(System.DateTime,System.Boolean)">
            <summary>
            Encode a date, without a time part.
            Optionally skip encoding and return an empty string instead.
            </summary>
            <param name="dateTime">DateTime whose date component is to be encoded</param>
            <param name="performEncode">If true, the input parameter is encoded to string. If false, an empty string is returned instead.
            This parameter is implemented to streamline coding of optimized field population in the archive providers, where a mode
            switch may eliminate the need for string-encoded display values.</param>
            <returns>Encoded date</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeDateTime(System.DateTime)">
            <summary>
            Encode a date, with a time part.
            </summary>
            <param name="dateTime">DateTime whose date and time components are to be encoded</param>
            <returns>Encoded date/time</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeDateTime(System.DateTime,System.Boolean)">
            <summary>
            Encode a date, with a time part.
            Optionally skip encoding and return an empty string instead.
            </summary>
            <param name="dateTime">DateTime whose date and time components are to be encoded</param>
            <param name="performEncode">If true, the input parameter is encoded to string. If false, an empty string is returned instead.
            This parameter is implemented to streamline coding of optimized field population in the archive providers, where a mode
            switch may eliminate the need for string-encoded display values.</param>
            <returns>Encoded date/time</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeTime(System.DateTime)">
            <summary>
            Encode a time, without a date part
            </summary>
            <param name="dateTime">DateTime whose time component is to be encoded</param>
            <returns>Encoded time</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeTime(System.DateTime,System.Boolean)">
            <summary>
            Encode a time, without a date part.
            Optionally skip encoding and return an empty string instead.
            </summary>
            <param name="dateTime">DateTime whose time component is to be encoded</param>
            <param name="performEncode">If true, the input parameter is encoded to string. If false, an empty string is returned instead.
            This parameter is implemented to streamline coding of optimized field population in the archive providers, where a mode
            switch may eliminate the need for string-encoded display values.</param>
            <returns>Encoded time</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeTimeSpan(System.TimeSpan,System.Boolean)">
            <summary>
            Encode a timespan, encodes total number of seconds
            Optionally skip encoding and return an empty string instead.
            </summary>
            <param name="timeSpan">TimeSpan to be encoded.</param>
            <param name="performEncode">If true, the input parameter is encoded to string. If false, an empty string is returned instead.
            This parameter is implemented to streamline coding of optimized field population in the archive providers, where a mode
            switch may eliminate the need for string-encoded display values.</param>
            <returns>Encoded time</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeTimeSpan(System.Int32,System.Boolean)">
            <summary>
            Encode a timespan
            Optionally skip encoding and return an empty string instead.
            </summary>
            <param name="seconds">Seconds to be encoded.</param>
            <param name="performEncode">If true, the input parameter is encoded to string. If false, an empty string is returned instead.
            This parameter is implemented to streamline coding of optimized field population in the archive providers, where a mode
            switch may eliminate the need for string-encoded display values.</param>
            <returns>Encoded time</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeDouble(System.Double,System.Int32)">
            <summary>
            Encode a double (decimal value), with the given number of decimals. Note that the full
            precision is included here, but rounded to the given number of decimals on (re)localization.
            Also note that currency amounts should use the EncodeMoney method, if the cultural settings for 
            money are to be taken into account (though the currency symbol is NOT used in localization, 
            because we may be displaying non-native currencies, saying $ when it's actually € or NOK is silly).
            </summary>
            <param name="val">Value to be encoded</param>
            <param name="decimals">Final desired number of decimals</param>
            <returns>Encoded value</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeDouble(System.Double,System.Int32,System.Boolean)">
            <summary>
            Encode a double (decimal value), with the given number of decimals. Note that the full
            precision is included here, but rounded to the given number of decimals on (re)localization.
            Also note that currency amounts should use the EncodeMoney method, if the cultural settings for 
            money are to be taken into account (though the currency symbol is NOT used in localization, 
            because we may be displaying non-native currencies, saying $ when it's actually € or NOK is silly).
            Optionally skip encoding and return an empty string instead.
            </summary>
            <param name="val">Value to be encoded</param>
            <param name="decimals">Final desired number of decimals</param>
            <param name="performEncode">If true, the input parameter is encoded to string. If false, an empty string is returned instead.
            This parameter is implemented to streamline coding of optimized field population in the archive providers, where a mode
            switch may eliminate the need for string-encoded display values.</param>
            <returns>Encoded value</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeDouble(System.Double)">
            <summary>
            Encode a double (decimal value). On localization, the default number of decimal digits will be used.
            Also note that currency amounts should use the EncodeMoney method, if the cultural settings for 
            money are to be taken into account (though the currency symbol is NOT used in localization, 
            because we may be displaying non-native currencies).
            </summary>
            <param name="val">Value to be encoded</param>
            <returns>Encoded value</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeDouble(System.Double,System.Boolean)">
            <summary>
            Encode a double (decimal value). On localization, the default number of decimal digits will be used.
            Also note that currency amounts should use the EncodeMoney method, if the cultural settings for 
            money are to be taken into account (though the currency symbol is NOT used in localization, 
            because we may be displaying non-native currencies).
            Optionally skip encoding and return an empty string instead.
            </summary>
            <param name="val">Value to be encoded</param>
            <param name="performEncode">If true, the input parameter is encoded to string. If false, an empty string is returned instead.
            This parameter is implemented to streamline coding of optimized field population in the archive providers, where a mode
            switch may eliminate the need for string-encoded display values.</param>
            <returns>Encoded value</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeInt(System.Int32)">
            <summary>
            Encode an integer. Integers are usually not culturally sensitive... but who knows.
            </summary>
            <param name="val">Value to encode</param>
            <returns>Encoded value</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeInt(System.Int32,System.Boolean)">
            <summary>
            Encode an integer. Integers are usually not culturally sensitive... but who knows.
            Optionally skip encoding and return an empty string instead.
            </summary>
            <param name="val">Value to encode</param>
            <param name="performEncode">If true, the input parameter is encoded to string. If false, an empty string is returned instead.
            This parameter is implemented to streamline coding of optimized field population in the archive providers, where a mode
            switch may eliminate the need for string-encoded display values.</param>
            <returns>Encoded value</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeMoney(System.Double)">
            <summary>
            Encode a double, for displaying it as money. The local user settings for currency, EXCEPT the currency
            symbol, will be used for display. No currency symbol will be display regardless of settings.
            </summary>
            <param name="val">Value to encode</param>
            <returns>Encoded value</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeMoney(System.Double,System.Boolean)">
            <summary>
            Encode a double, for displaying it as money. The local user settings for currency, EXCEPT the currency
            symbol, will be used for display. No currency symbol will be display regardless of settings.
            Optionally skip encoding and return an empty string instead.
            </summary>
            <param name="val">Value to encode</param>
            <param name="performEncode">If true, the input parameter is encoded to string. If false, an empty string is returned instead.
            This parameter is implemented to streamline coding of optimized field population in the archive providers, where a mode
            switch may eliminate the need for string-encoded display values.</param>
            <returns>Encoded value</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalizeEncoded(System.String)">
            <summary>
            Take an encoded value of any type, parse it, and reformat it to its localized (current culture) string form
            </summary>
            <param name="encodedSomething">Output from one of the Encode methods</param>
            <returns>Equivalent, localized value</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.GetReadableTimeSpan(System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Convert the time/duration/timespan to a &quot;readable&quot; text - either seconds, or day/hour/minute/second
            </summary>
            <param name="seconds">Total seconds to convert</param>
            <param name="mostSignificant">If true, then only show the most-significant unit; otherwise show d/h/m/s</param>
            <param name="daySignifier">The string to use for the day component suffix</param>
            <param name="hourSignifier">The string to use for the hour component suffix</param>
            <param name="minuteSignifier">The string to use for the minute component suffix</param>
            <param name="secondSignifier">The string to use for the second component suffix</param>
            <param name="zeroSignifier">The suffix string to use when 0 seconds were passed. Empty string might be returned if this parameter was missing</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.CompareEncoded(System.String,System.String)">
            <summary>
            Compare two encoded strings, by parsing them into their underlying data datatype and comparing those
            </summary>
            <param name="x">Formatted string</param>
            <param name="y">Formatted string</param>
            <returns>-1, 0 or 1 depending on the ordering relation between x and y</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseEncodedDate(System.String)">
            <summary>
            
            </summary>
            <param name="encodedDate"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseEncodedInt(System.String)">
            <summary>
            Parse "123" and "[I:123]" into 123.
            Parse "abc" into 0.
            Does not throw, but returns 0.
            </summary>
            <param name="encodedInt">"123" or "[I:123]"</param>
            <returns>The value as int, or 0 if not an integer</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseEncodedInt(System.String,System.Boolean)">
            <summary>
            Parse "123" and "[I:123]" into 123.
            </summary>
            <param name="encodedInt">"123" or "[I:123]"</param>
            <param name="strictly">If true, then throws instead of returning 0 for non-numbers</param>
            <returns>The value or an exception if not an integer</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseEncodedDouble(System.String)">
            <summary>
            Parse "123.4" and "[F:123.4]" into 123.4
            </summary>
            <param name="encodedDouble">"123.4" or "[F:123.4]"</param>
            <returns>The value or an exception if not an double</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseEncodedDecimal(System.String)">
            <summary>
            Parse "123.4" and "[F:123.4]" into 123.4
            </summary>
            <param name="encodedDecimal">"123.4" or "[F:123.4]"</param>
            <returns>The value or an exception if not a decimal</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseEncodedBinary(System.String)">
            <summary>
            Parse/decode an encoded binary data block - either with a marker, or just a Base64 encoded string
            </summary>
            <param name="encodedBinary"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.TryParse(System.String,System.Int32@)">
            <summary>
            Try to parse a string as an encoded or bare InvariantCulture Integer32
            </summary>
            <param name="encoded">String, either marked with [I: ] or just an integer</param>
            <param name="result">Int value, if return value is true; otherwise 0</param>
            <returns>true if parsing succeeded</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.TryParse(System.String,System.Double@)">
            <summary>
            Try to parse a string as an encoded or bare InvariantCulture Double
            </summary>
            <param name="encoded">String, either marked with [F: ] or just a date</param>
            <param name="result">Double value, if return value is true; otherwise 0</param>
            <returns>true if parsing succeeded</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.TryParse(System.String,System.DateTime@)">
            <summary>
            Try to parse a string as an encoded or bare InvariantCulture DateTime
            </summary>
            <param name="encoded">String, either marked with [DT: ] or just a datetime</param>
            <param name="result">DateTime value, if return value is true; otherwise <see cref="F:System.DateTime.MinValue"/></param>
            <returns>true if parsing succeeded</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseEncoded(System.String)">
            <summary>
            Inspect the marker and parse the content, returning a strongly typed object (double, int, byte[], DateTime etc)
            </summary>
            <param name="encodedSomething"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalFormatDate(System.DateTime)">
            <summary>
            Format a date (without time) according to current settings
            </summary>
            <param name="dateTime">DateTime to be formatted</param>
            <returns>Formatted date</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalFormatLongDate(System.DateTime)">
            <summary>
            Format a long date (without time) according to current settings
            </summary>
            <param name="dateTime">DateTime to be formatted</param>
            <returns>Formatted long date</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalFormatDateTime(System.DateTime)">
            <summary>
            Format a date with time according to current settings
            </summary>
            <param name="dateTime">Datetime to be formatted</param>
            <returns>Formatted date and time</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalFormatLongDateTime(System.DateTime)">
            <summary>
            Format a long date with a short time according to current settings
            </summary>
            <param name="dateTime">Datetime to be formatted</param>
            <returns>Formatted long date and short time</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalFormatTime(System.DateTime)">
            <summary>
            Format a time without date according to current settings
            </summary>
            <param name="dateTime">DateTime to be formatted</param>
            <returns>Formatted time, without date</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalFormatDouble(System.Double,System.Int32)">
            <summary>
            Format a double, with the given number of decimal digits; otherwise the current settings will be followed
            </summary>
            <param name="val">Double to be formatted</param>
            <param name="decimals">Desired number of decimals</param>
            <returns>Formatted number</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalFormatInt(System.Int32)">
            <summary>
            Format an integer according to current settings
            </summary>
            <param name="val">int to be formatted</param>
            <returns>Formatted integer</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.LocalFormatMoney(System.Double)">
            <summary>
            Format a double as a currency value, though without a currency symbol. Other local settings for currencies will be followed.
            </summary>
            <param name="val">Double to be formatted</param>
            <returns>Formatted amount</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.StripTerminator(System.String,System.String)">
            <summary>
            Strip a terminator from a string. Whitespace is first trimmed from both sides of the string,
            the terminator is removed if present, and any whitespace now at the end of the string is also removed
            </summary>
            <param name="label">String to process</param>
            <param name="terminator">Terminator to remove</param>
            <returns>Original string minus terminator</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.AddTerminator(System.String,System.String)">
            <summary>
            Add a terminator to a string. The string is first stripped, then the terminator is added at the end with no whitespace.
            </summary>
            <param name="label">String to process</param>
            <param name="terminator">Terminator to add</param>
            <returns>String, now ending with terminator and no white space</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.AddColon(System.String)">
            <summary>
            Add a colon to a string if it was not already there, strip any whitespace
            </summary>
            <param name="label">String to process</param>
            <returns>Original string, now guaranteed to end in exactly one colon</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.StripColon(System.String)">
            <summary>
            Strip a terminating colon from a string, and any whitespace
            </summary>
            <param name="label">String to process</param>
            <returns>String, without colon and without leading/trailing whitespace</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.StripCountrySpecificsFromLanguageName(System.String)">
            <summary>
            Converts "English (Zimbabwe)" into plain "English" by removing anything in parenthesis and stripping spaces.
            </summary>
            <param name="languageName">Human readable language name: "Norsk (Bokmål)" or "Francaise"</param>
            <returns>Simplified language name with initial capital: "Norsk" or "Francaise"</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.MapSuperOfficeLanguageToCulture(System.String)">
            <summary>
            Converts a SuperOffice language code ("SW") to a neutral .net culture name ("sv")
            </summary>
            <remarks>
            If unable to determine a mapping, the default is US (English).
            <para/>
            See also <a href="http://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx">MSDN on culture codes</a>.
            </remarks>
            <param name="superOfficeLanguageCode">SuperOffice language code. (US, NO, SW, DA, FI, FR, GE, IT, NL, SP, PL, RU, CN, CZ, JP, UK, KO, VI, BR, CH)</param>
            <returns>.net neutral Culture name, or empty string (invariant culture) if no mapping found</returns>
            <seealso cref="M:SuperOffice.CRM.Globalization.CultureDataFormatter.MapCultureToSuperOfficeLanguage(System.String)"/>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.GetSuperOfficeLanguages">
            <summary>
            Get all current supported superoffice languages, by superoffice language code (win legacy)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.MapCultureToSuperOfficeLanguage(System.String)">
            <summary>
            Converts .net Culture name ("sv-SE") to SuperOffice language code ("SW").
            </summary>
            <remarks>
            Converting to a SuperOffice language code twice is harmless.
            <para/>
            If unable to determine a mapping, the default is US (English).
            <para/>
            See also <a href="http://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx">MSDN on culture codes</a>.
            </remarks>
            <param name="cultureName">Either a culture name or a SuperOffice language code.</param>
            <returns>A SuperOffice language code. (US, NO, SW, DA, FI, FR, GE, IT, NL, SP, PL, RU, CN, CZ, JP, UK, KO, VI, BR, CH)</returns>
            <seealso cref="M:SuperOffice.CRM.Globalization.CultureDataFormatter.MapSuperOfficeLanguageToCulture(System.String)"/>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.MapLCIDToSuperOfficeLanguage(System.Int32)">
            <summary>
            Converts a .net culture LCID to SuperOffice Language Code
            </summary>
            <param name="lcid">The LCID to convert</param>
            <returns>The SuperOffice language code if defined - the two letter iso name if undefined</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.MapLanguageToCsLanguage(System.String)">
            <summary>
            Convert a language code to the language code expected by CS.
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.MapCsLanguageToSuperOfficeLanguage(System.String)">
            <summary>
            Convert a language code from cs to SuperOffice language code.
            </summary>
            <param name="languageCode"></param>
            <returns>SuperOffice languagecode or string.empty if none found</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseMultiLanguageString(System.String,System.String)">
            <summary>
            Returns the string part of the specified culture from the multi language string
            These strings are typically used in SuperOffice list and description data
            <example>
            String example from PrefDesc table:
            US:"Location and size";GE:"Position und Größe";NO:"Posisjon og størrelse"
            </example>
            </summary>
            <remarks>
            This version will also accept strings that have non-multilanguage text before and after the multilanguage
            block, and even multiple multilanguage blocks (provided there is at least one non-conforming character between them),
            isolating them and parsing each one separately. Non-conforming text is kept in place in the output.
            </remarks>
            <param name="multilangString">The multilanguage string to parse: <code>US:"Location and size";GE:"Position und Größe";NO:"Posisjon og størrelse"</code></param>
            <param name="cultureName">The cultureName, typically en-US, nb-NO, but also US, NO is accepted</param>
            <returns>Culture specific string part, or original string if there is a problem</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseInlineMultiLanguageString(System.String,System.String,System.Int32)">
            <summary>
            Parses the string for multilang strings and uses <see cref="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseMultiLanguageString(System.String,System.String)"/>	to translate
            the fragment to a culture specific string part
            </summary>
            <param name="multilangString">The multilanguage string to parse: <code>US:"Location and size";GE:"Position und Größe";NO:"Posisjon og størrelse"</code></param>
            <param name="cultureName">The cultureName, typically en-US, nb-NO, but also US, NO is accepted</param>
            <param name="startingIndex">The starting index for the parsing</param>
            <returns>All culture specific string parts translated, or original string if there is a problem</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.ParseInlineElements(System.String,System.String)">
            <summary>
            Parses a resource string with inline culture-sensitive data in the text, for instance dates... provided they have
            been encoded using the <see cref="T:SuperOffice.CRM.Globalization.CultureDataFormatter"/> in the first place.
            Multi-language elements are also handled, before any culture-sensitive elements.
            </summary>
            <param name="resourceString">The string to parse</param>
            <param name="cultureName">The cultureName, typically en-US, nb-NO, but also US, NO is accepted</param>
            <returns>Parsed resource string.</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeBinary(System.IO.Stream)">
            <summary>
            Encode a block of binary data, such as an image
            </summary>
            <param name="data">DateTime whose date component is to be encoded</param>
            <returns>Encoded date</returns>
        </member>
        <member name="M:SuperOffice.CRM.Globalization.CultureDataFormatter.EncodeBinary(System.IO.Stream,System.Boolean)">
            <summary>
            Encode a block of binary data, such as an image
            </summary>
            <param name="data">Stream be encoded</param>
            <param name="performEncode">If true, the input parameter is encoded to string. If false, an empty string is returned instead.
            This parameter is implemented to streamline coding of optimized field population in the archive providers, where a mode
            switch may eliminate the need for string-encoded display values.</param>
            <returns>Encoded date</returns>
        </member>
        <member name="T:SuperOffice.Plugins.CRM.Documents.IAssociateRename">
            <summary>
            Interface for document plugins that need to know if an associate has changed his name.
            </summary>
        </member>
        <member name="M:SuperOffice.Plugins.CRM.Documents.IAssociateRename.AssociateRename(System.String,System.String)">
            <summary>
            Called when an associate changes name.
            </summary>
            <param name="oldName">Old name</param>
            <param name="newName">New name</param>
        </member>
        <member name="M:SuperOffice.Plugins.CRM.Documents.IAssociateRename.IsNameValid(System.String)">
            <summary>
            Call to check if the name given is valid
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.Plugins.CRM.IExtendedLoggerPlugin">
            <summary>
            Plugin for the entity-based extended logging system; its task is to take a log document and save it somewhere safe
            </summary>
        </member>
        <member name="M:SuperOffice.Plugins.CRM.IExtendedLoggerPlugin.LogItem(System.Object)">
            <summary>
            Save this log item
            </summary>
            <param name="logDocument">Either a Dictionary&lt;string, object&gt; that represents a dynamic JSON structure, or a class to be JSOM serialized</param>
        </member>
        <member name="T:SuperOffice.Plugins.CRM.ExtendedLoggerPluginAttribute">
            <summary>
            Marker attribute for <see cref="T:SuperOffice.Plugins.CRM.IExtendedLoggerPlugin"/> implementations; multiple plugins can coexist and are called in no particular order
            </summary>
        </member>
        <member name="M:SuperOffice.Plugins.CRM.ExtendedLoggerPluginAttribute.#ctor(System.String)">
            <summary>
            Mark a class as an implementation of <see cref="T:SuperOffice.Plugins.CRM.IExtendedLoggerPlugin"/>
            </summary>
            <param name="name">Plugin name, of no importance but needs to be unique</param>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute">
            <summary>
            Attribute to inject metadata about a configuration field, for a Quote or EIS connector. Use on
            fields with default get/set
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute.DisplayName">
            <summary>
            The name (label) shown in the GUI
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute.DisplayDescription">
            <summary>
            The description shown in the GUI
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute.FieldType">
            <summary>
            The field type, must correspond to the actual type of the member
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute.DefaultValue">
            <summary>
            Contains the default value, if any
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute.Access">
            <summary>
            The access rights for the field
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute.ListName">
            <summary>
            This will contain the list name if the field is a list
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute.MaxLength">
            <summary>
            Maximum length of the field
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute.Rank">
            <summary>
            The rank (sort order) of the field
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute.#ctor(System.String,SuperOffice.CRM.FieldMetadataTypeInfo)">
            <summary>
            Mark this field as configuration data. Use optional named fields to initialize
            values that are not part of the constructor.
            </summary>
            <param name="displayName">The name (label) shown in the GUI</param>
            <param name="type">The field type, must correspond to the actual type of the member</param>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorWS.ConfigDataHelper">
            <summary>
            Class that translates between name/value data dictionaries and strongly typed config data classes,
            as well as handling in-memory caching and on-disk persistence
            </summary>
            <remarks>
            This class operates on a 'parameter class', which generally looks something like this:
            <code>
            public class DummyArguments
            {
            	[ConfigField("A String", CRM.FieldMetadataTypeInfo.Text, DisplayDescription = "This is just a string")]
            	public string AString;
            
            	[ConfigField("A Date", CRM.FieldMetadataTypeInfo.Datetime, DisplayDescription = "This is just a date picker")]
            	public DateTime ADate;
            
            	[ConfigField("A Password", CRM.FieldMetadataTypeInfo.Password, DisplayDescription = "This is just a password")]
            	public string APassword;
            
            	[ConfigField("Mandatory Int", CRM.FieldMetadataTypeInfo.Integer, DisplayDescription = "This is just a number", Access = CRM.FieldAccessInfo.Mandatory)]
            	public int MandatoryInt;
            	
            	[ConfigField("A Checkbox", CRM.FieldMetadataTypeInfo.Checkbox, DisplayDescription = "This is just an option")]
            	public int ACheckbox;
            }
            </code>
            Data is cached in an in-memory cache, and persisted to Isolated Storage files for later retrieval. In general,
            name-value dictionaries with data passed in must conform <b>exactly</b> to the parameter class definition.
            <para/>
            Passwords are persisted in an encrypted manner.
            <para/>
            Connection GUID to config mappings are persisted using <see cref="T:SuperOffice.ErpSync.ConnectorWS.IConfigDataStore"/>. The default implementation writes in isolated storage per-user, per-assembly, per-domain. This means that changing the identity of the app-pool or moving to a 
            different machine will reset all connection config values. You can create your own implementation of <see cref="T:SuperOffice.ErpSync.ConnectorWS.IConfigDataStore"/> to replace the isolated storage with something else if you want.
            </remarks>
        </member>
        <member name="F:SuperOffice.ErpSync.ConnectorWS.ConfigDataHelper._configCache">
            <summary>
            In-memory cache of configuration objects
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ConfigDataHelper.GetMetaData``1">
            <summary>
            Get metadata for a configuration data class, ready to send to SuperOffice for display in a data-driven GUI
            </summary>
            <typeparam name="ArgClass">The class that contains your parameters, tagged with <see cref="T:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute"/> attributes</typeparam>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ConfigDataHelper.DeleteData(System.Guid)">
            <summary>
            Delete persisted &amp; cached data for a given Guid
            </summary>
            <param name="key">Unique key</param>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ConfigDataHelper.DeleteData(System.String)">
            <summary>
            Delete persisted &amp; cached data for a given Guid
            </summary>
            <param name="key">Unique key</param>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ConfigDataHelper.SaveData``1(System.Guid,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Save (perrsistent &amp; cached stores) data for a given Guid
            </summary>
            <param name="key">Unique key</param>
            <param name="data">Configuration data to save; must <b>exactly</b> match the argument class</param>
            <typeparam name="ArgClass">The class that contains your parameters, tagged with <see cref="T:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute"/> attributes</typeparam>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ConfigDataHelper.SaveData``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Save (perrsistent &amp; cached stores) data for a given Guid
            </summary>
            <param name="key">Unique key</param>
            <param name="data">Configuration data to save; must <b>exactly</b> match the argument class</param>
            <typeparam name="ArgClass">The class that contains your parameters, tagged with <see cref="T:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute"/> attributes</typeparam>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ConfigDataHelper.GetData``1(System.Guid)">
            <summary>
            Retrieve data for a given key; from cache if possible, otherwise from persistent, isolated storage
            </summary>
            <param name="key">Unique key</param>
            <typeparam name="ArgClass">The class that contains your parameters, tagged with <see cref="T:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute"/> attributes</typeparam>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ConfigDataHelper.GetData``1(System.String)">
            <summary>
            Retrieve data for a given key; from cache if possible, otherwise from persistent, isolated storage
            </summary>
            <param name="key">Unique key</param>
            <typeparam name="ArgClass">The class that contains your parameters, tagged with <see cref="T:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute"/> attributes</typeparam>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ConfigDataHelper.GetData``1(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Translate data for a given key; from wire format (dictionary of name/value) to strongly typed class.
            Dictionary must match class <b>exactly</b>.
            This is called when Testing newly created connections.
            </summary>
            <param name="wireFormat">Dictionary of names/values to decode</param>
            <typeparam name="ArgClass">The class that contains your parameters, tagged with <see cref="T:SuperOffice.ErpSync.ConnectorWS.ConfigFieldAttribute"/> attributes</typeparam>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorWS.ReversibleEncryptedString">
            <summary>
            This class implements a simple string encryptor/decryptor using the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> crypto provider.
            The class will encrypt and decrypt strings and base 64 encode them.
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ReversibleEncryptedString.Decrypt(System.String)">
            <summary>
            Decrypts the encrypted text. Uses the encryption prefix to test to see if the text
            is actually encrypted before it decrypts it. 
            </summary>
            <param name="encryptedText">Encrypted Base64 text</param>
            <returns>Plain text</returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ReversibleEncryptedString.Encrypt(System.String)">
            <summary>
            Encrypts the passed String object.
            </summary>
            <param name="text">string to encrypt</param>
            <returns>Encrypted and Base64 encoded string</returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ReversibleEncryptedString.GetCryptoProvider">
            <summary>
            Instantiates and returns a Rijndael Crypto Provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ReversibleEncryptedString.EncryptString(System.String)">
            <summary>
            Encrypts a text string. If the string is already encrypted, it will not be encrypted again.
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ReversibleEncryptedString.DecryptString(System.String)">
            <summary>
            Decrypts a text string
            </summary>
            <param name="cipherText"></param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorWS.Converters">
            <summary>
            Converter helpers for EIS Connector / Web services
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)">
            <summary>
            Map enum values from one enum to another; assumes that the values have the <b>same names</b> throughout,
            but they do not need to have the same int's
            </summary>
            <typeparam name="From">Source enum type</typeparam>
            <typeparam name="To">Destination enum type</typeparam>
            <param name="from">Source enum value</param>
            <returns>Same named value from the target enum, as the source value</returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.Converters.FromPlugin(SuperOffice.CRM.FieldMetadataInfo)">
            <summary>
            Convert FieldMetadataInfo from plugin to Web Service object
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.Converters.ToPlugin(SuperOffice.ErpSync.FieldMetadataInfoWS)">
            <summary>
            Convert FieldMetadataInfo from Web Service object to plugin
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.Converters.FromPlugin(SuperOffice.CRM.ErpActor)">
            <summary>
            Convert ErpActor from plugin to Web Service object
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.Converters.ToPlugin(SuperOffice.ErpSync.ErpActorWS)">
            <summary>
            Convert ErpActor from Web Service object to plugin
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.Converters.FromPlugin(SuperOffice.CRM.SearchRestrictionInfo)">
            <summary>
            Convert SearchRestrictionInfo from plugin to Web Service object
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.Converters.ToPlugin(SuperOffice.ErpSync.SearchRestrictionInfoWS)">
            <summary>
            Convert SearchRestrictionInfo from Web Service object to plugin
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorWS.IConfigDataStore">
            <summary>
            Defines load/save of Connection configuration data.
            Default implementation in <see cref="T:SuperOffice.ErpSync.ConnectorWS.IsolatedStorageConfigDataStore"/>. 
            Use <see cref="T:SuperOffice.ErpSync.ConnectorWS.ConfigDataStoreAttribute"/> to declare replacement implementation if you want to store data .
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.IConfigDataStore.DeleteData(System.String)">
            <summary>
            Remove all trace of configuration from data store.
            </summary>
            <param name="key">Connection id</param>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.IConfigDataStore.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.FieldMetadataTypeInfo},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Persist data to storage, taking care to only store data listed in members collection.  
            Passwords should be stored in encrypted format.
            </summary>
            <param name="key">Connection id</param>
            <param name="members">Collection of field names and their types.</param>
            <param name="data">Collection of field names and values in CultureEncoded format: "[I:1234]" rather than 1234.</param>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.IConfigDataStore.LoadData(System.String,System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.FieldMetadataTypeInfo},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Retrieve data from storage, taking care to only fill the data collection with values listed in the members collection.  
            Passwords should be decrypted before being placed in data output collection.
            </summary>
            <param name="key">Connection id</param>
            <param name="members">Collection of field names and their types to be loaded.</param>
            <param name="data">Fill this collection of field names and values in CultureEncoded format: "[I:1234]" rather than 1234.</param>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorWS.ConfigDataStoreAttribute">
            <summary>
            Attribute declaring a plugin implementing the <see cref="T:SuperOffice.ErpSync.ConnectorWS.IConfigDataStore"/> interface.
            Smaller priorities override higher ones. Default plugin implementation found
            in <see cref="T:SuperOffice.ErpSync.ConnectorWS.IsolatedStorageConfigDataStore"/>. 
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ConfigDataStoreAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Attribute declaring a plugin implementing the <see cref="T:SuperOffice.ErpSync.ConnectorWS.IConfigDataStore"/> interface.
            </summary>
            <param name="name">Not really used for anything.</param>
            <param name="priority">Smallest number wins.</param>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorWS.IsolatedStorageConfigDataStore">
            <summary>
            Default implementation of IConfigDataStore which stores config data in the user's isolated storage folder isolated
            per-user, per-assembly, per-appdomain.
            <para/>
            Implement your own IConfigDataStore to override and replace this implementation with something else.
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.IsolatedStorageConfigDataStore.DeleteData(System.String)">
            <summary>
            Remove all trace of configuration from data store.
            </summary>
            <param name="key">Connection id</param>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.IsolatedStorageConfigDataStore.SaveData(System.String,System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.FieldMetadataTypeInfo},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Persist data to storage, taking care to only store data listed in members collection.  Passwords should be stored in encrypted format.
            </summary>
            <param name="key">Connection id</param>
            <param name="members">Collection of field names and their types.</param>
            <param name="data">Collection of field names and CultureFormatted values to be saved to storage.</param>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.IsolatedStorageConfigDataStore.LoadData(System.String,System.Collections.Generic.Dictionary{System.String,SuperOffice.CRM.FieldMetadataTypeInfo},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Retrieve data from storage, taking care to only fill the data collection with fields listed in the members collection.  Passwords should be decrypted before being placed in data.
            </summary>
            <param name="key">Connection id</param>
            <param name="members">Collection of field names and their types.</param>
            <param name="data">Collection of field names and CultureFormatted values - to be loaded from storage.</param>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorWS.EisPluginLoader">
            <summary>
            Class used to load the registered Erp Sync connectors
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorWS.EisPluginLoader.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.EisPluginLoader.GetConnector(System.Uri,System.String[])">
            <summary>
            Get the connector
            </summary>
            <param name="serviceUri">Query string may contain CONNECTORNAME to specify one particular connector plugin</param>
            <param name="assemblyFiles">Assemblies to scan for plugins</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.EisPluginLoader.GetConnector(System.String)">
            <summary>
            Get the connector given a name
            </summary>
            <param name="name">Optional plugin name. If blank, then the first plugin will be returned</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.EisPluginLoader.ParseAdditionalAssembly(System.String)">
            <summary>
            Load and parse a named assembly file
            </summary>
            <param name="assemblyFile">Name of the assembly</param>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.EisPluginLoader.#ctor">
            <summary>
            Parse all currently loaded assemblies and initialize list of plugins
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.EisPluginLoader.ParseAssembly(System.Reflection.Assembly)">
            <summary>
            Parse one assembly. Look for plugins that implement IErpConnector and have ErpConnectorAttribute
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorWS.ResponseErrorCodes">
            <summary>
            Error codes used by ErpSync connector
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.ConnectorWS.ResponseErrorCodes.UNKNOWN_CONNECTION_ID">
            <summary>
            Unknown connection id used
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.ConnectorWS.ResponseErrorCodes.UNKNOWN_FIELDKEY">
            <summary>
            Unknown field key used
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.ConnectorWS.ResponseErrorCodes.UNKNOWN_LISTITEM_ID">
            <summary>
            Unknown list item id used
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorWS.ResponseHelper">
            <summary>
            Static class with a collection of helper methods used in creating response objects
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ResponseHelper.CreateWSResponse``1(SuperOffice.CRM.PluginResponseInfo)">
            <summary>
            Create a WCF response object based on a PluginResponseInfo
            </summary>
            <typeparam name="R">Actual response object type</typeparam>
            <param name="implementationResponse">Response object to translate</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ResponseHelper.CreateWSResponse``1(System.Exception)">
            <summary>
            Create a WCF response object based on an Exception
            </summary>
            <typeparam name="R">Actual response object type</typeparam>
            <param name="crash">Exception to translate</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ResponseHelper.CreateResponse``1(SuperOffice.ErpSync.ConnectorResultBaseWS)">
            <summary>
            Create a PluginResponseInfo object based on a WCF ConnectorResultBaseWS
            </summary>
            <typeparam name="R">Actual response object type</typeparam>
            <param name="wsResult">ConnectorResultBaseWS to translate</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ResponseHelper.CreateResponse``1(System.Exception)">
            <summary>
            Create a PluginResponseInfo object based on a Exception
            </summary>
            <typeparam name="R">Actual response object type</typeparam>
            <param name="crash">Exception to translate</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorWS.ResponseHelper.CreateOkResponse``1">
            <summary>
            Create a PluginResponseInfo where everything is OK
            </summary>
            <typeparam name="R">Actual response object type</typeparam>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.ErpSync.ErpActorWS">
            <summary>
            Carrier object representing an Actor inside an ERP Connection, used for sending to and from an ERP Connector
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ErpActorWS.ActorType">
            <summary>
            Actor type (Customer, Supplier, Partner, Person, Employee, Project, etc)
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ErpActorWS.ErpKey">
            <summary>
            The local identifier (primary key) for the actor in the given connection
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ErpActorWS.LastModified">
            <summary>
            When was the actor last changed/modified. Absolutely mandatory; used for timestamp comparison and sync loop retrieval.
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ErpActorWS.FieldValues">
            <summary>
            Key/value pairs of field keys and field values (field keys as specified by the given connector/connection)
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ErpActorWS.ParentActorType">
            <summary>
            Actor type for the PARENT actor, (for example the company owner for a contact person)
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ErpActorWS.ParentErpKey">
            <summary>
            The local identifier (primary key) for the PARENT actor in the given connection (for example the company owner for a contact person)
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.FieldMetadataTypeInfoWS">
            <summary>
            Describes the different widgets that the QuoteConnector can use in its configuration dialog.
            <br/>Note: Enum is mirrored in C++ code, update iEnum.h when it changes
            <br/>Note #2: Enum is mirrored in data model (Enums.cs), which also needs to be updated if this changes
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldMetadataTypeInfoWS.Checkbox">
            <summary>
            Checkbox widget: Boolean value  
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldMetadataTypeInfoWS.Text">
            <summary>
            Single line textbox.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldMetadataTypeInfoWS.Password">
            <summary>
            Single line edit field with password characters - input is hidden.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldMetadataTypeInfoWS.Integer">
            <summary>
            Single line integer number field. 
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldMetadataTypeInfoWS.Double">
            <summary>
            Single line decimal number field. 
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldMetadataTypeInfoWS.List">
            <summary>
            Dropdown listbox. The list name must be provided. The list items are provided by another interface.
            The default value should be the list key, not the text of the list item.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldMetadataTypeInfoWS.Datetime">
            <summary>
            Datetime
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldMetadataTypeInfoWS.Label">
            <summary>
            Static text - has no input widget associated with it. Can be used for spacing/layout.
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.FieldAccessInfoWS">
            <summary>
            Access restrictions and mandatory status, if any
            <br/>Note: Enum is mirrored in C++ code, update iEnum.h when it changes
            <br/>Note #2: Enum is mirrored in data model (Enums.cs), which also needs to be updated if this changes
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldAccessInfoWS.Normal">
            <summary>
            Normal field, no particular restrictions
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldAccessInfoWS.Mandatory">
            <summary>
            This field is mandatory
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.FieldAccessInfoWS.ReadOnly">
            <summary>
            This field is read-only
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.FieldMetadataInfoWS">
            <summary>
            This carrier describes a custom field to be added to the config dialog at runtime. 
            It is used to populate the Admin configuration dialog for a connection.
            Note that this is just a description of the field - it is not the field itself.
            The GUI will use this info to build the user interface controls. The call to the 
            ERP Connector’s GetConfigurationFields method returns a list of fields and field types. 
            The Admin client builds a dialog with these fields.
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.FieldMetadataInfoWS.FieldKey">
            <summary>
            Internal name of the field. Used as the key in the ConnectionConfigFieldInfo values when TestConnection is called.
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.FieldMetadataInfoWS.DisplayName">
            <summary>
            Localized field name – shown in the GUI as the label for the control.
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.FieldMetadataInfoWS.DisplayDescription">
            <summary>
            Tooltip for the field name.
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.FieldMetadataInfoWS.FieldType">
            <summary>
            Kind of field widget to use: textbox, number field, password field, dropdown list or checkbox?
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.FieldMetadataInfoWS.ListName">
            <summary>
            Used for getting the list items from the list provider. The source of the items are ultimately be accessed via
            <see cref="M:SuperOffice.CRM.IQuoteConnector.GetQuoteList(System.String)"/> or <see cref="M:SuperOffice.CRM.IErpConnector.GetList(System.Guid,System.String)"/>, through various naming conventions and adapters. The actual Quote and ERP Connectors
            solve this in slightly different ways.
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.FieldMetadataInfoWS.DefaultValue">
            <summary>
            A default value for the field. The value in the widget when the configure dialog is opened in Add Connection mode.
            This will vary a bit depending on the type, of course.
            Obviously, if the field is a label, text or password, then the text is used.
            <para/>
            If the field is an int or double, we shall try to convert the string into a number. 
            (If the conversion fails, we shall use zero or 0.00 as the default value.)
            <para/>
            If the field is a list, we shall try to find a list item where the fields default value matches the listsitem’s ERPQuoteListItemKey.
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.FieldMetadataInfoWS.Rank">
            <summary>
            A way to set the order of the fields. Lowest value will be displayed first/over the fields with other values.
            Duplicate ranks are not allowed.
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.FieldMetadataInfoWS.MaxLength">
            <summary>
            Maximum length for strings, if set. 
            0 means no restriction (though sooner or later <b>something</b> will no doubt overflow if you pile on the gigabytes)
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.FieldMetadataInfoWS.Access">
            <summary>
            Access restrictions on the field
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.FieldMetadataInfoWS.ToString">
            <summary>
            Override: Useful ToString for debugging
            </summary>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.ErpSync.EisConnectorWSVersion">
            <summary>
            Contains the namespace string for the Erp connector
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.EisConnectorWSVersion.Namespace">
            <summary>
            Contains the actual namespace string
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.IErpConnectorWS">
            <summary>
            EIS Connector, WCF Interface declaration
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSGetConfigData">
            <summary>
            Asks the connector what fields are needed to set up a new connection (e.g. database, username and password)
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSTestConfigData(SuperOffice.ErpSync.TestConfigDataRequestWS)">
            <summary>
            Creates a new connection, or updates an existing one
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSSaveConnection(SuperOffice.ErpSync.SaveConnectionRequestWS)">
            <summary>
            Creates a new connection, or updates an existing one
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSTestConnection(SuperOffice.ErpSync.RequestBaseWS)">
            <summary>
            Checks if the given connection ID is valid (is the connection up, is the configuration data correct, etc)
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSDeleteConnection(SuperOffice.ErpSync.RequestBaseWS)">
            <summary>
            Tells the Connector that a connection has been deleted from EIS, in case the Connector needs to know and take some action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSGetSupportedActorTypes(SuperOffice.ErpSync.RequestBaseWS)">
            <summary>
            Gets the supported actor types for a given connection
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSGetSupportedActorTypeFields(SuperOffice.ErpSync.GetSupportedActorTypeFieldsRequestWS)">
            <summary>
            Gets a list of fields that are available for a given connection and a given actor type
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSGetActors(SuperOffice.ErpSync.GetActorsRequestWS)">
            <summary>
            Retrieves actors based on primary key and actor type
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSGetSearchableFields(SuperOffice.ErpSync.GetSearchableFieldsRequestWS)">
            <summary>
            Retrieves a list of searchable fields for a given actor type
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSSearchActorsAdvanced(SuperOffice.ErpSync.SearchActorsAdvancedRequestWS)">
            <summary>
            Searches for one or more actors given a search string
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSSearchActors(SuperOffice.ErpSync.SearchActorsRequestWS)">
            <summary>
            Searches for one or more actors given a search string
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSSearchActorByParent(SuperOffice.ErpSync.SearchActorByParentRequestWS)">
            <summary>
            Searches for one or more actors given a search string
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSCreateActor(SuperOffice.ErpSync.CreateActorRequestWS)">
            <summary>
            Creates a new actor
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSSaveActors(SuperOffice.ErpSync.SaveActorsRequestWS)">
            <summary>
            Saves (updates) existing actors
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSGetList(SuperOffice.ErpSync.GetListRequestWS)">
            <summary>
            Retrieves a list from the connector, using the name specified by the connector itself
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSGetListItems(SuperOffice.ErpSync.GetListItemsRequestWS)">
            <summary>
            Retrieves one or more specific list items from the connector, using the list name specified by the connector itself
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectorWS.WSGetActorsByTimestamp(SuperOffice.ErpSync.GetActorsByTimestampRequestWS)">
            <summary>
            Retrieves all actors of a specified actor type updated on or after a given date and time.
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.ErpConnectoUrlResolverPluginAttribute">
            <summary>
            Plugin for overriding resolving url's from Online
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ErpConnectoUrlResolverPluginAttribute.#ctor(System.String)">
            <summary>
            Defualt constructor for ErpConnectoUrlResolver Plugin attribute
            </summary>
            <param name="supportedScheme">Scheme supported by the plugin (http, https, app, etc.)</param>
            <param name="pluginInterface">Type of plugin</param>
        </member>
        <member name="T:SuperOffice.ErpSync.IErpConnectoUrlResolverPlugin">
            <summary>
            Interface that must be implemented by plugins for resolving erp sync client urls
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.IErpConnectoUrlResolverPlugin.ResolveUrl(System.String,SuperOffice.CRM.IConfiguration)">
            <summary>
            Resolve the actual url to use.
            </summary>
            <param name="targetUrl"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.ErpSync.TestConfigDataRequestWS">
            <summary>
            Parameters for TestConfigData
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.TestConfigDataRequestWS.ConnectionInfo">
            <summary>
            Dictionary containing all settings for a connection
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.RequestBaseWS">
            <summary>
            Request base for all Erp Sync connector methods
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.RequestBaseWS.ConnectionGuid">
            <summary>
            The guid for the connection
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.SaveConnectionRequestWS">
            <summary>
            Parameters for SaveConnection
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SaveConnectionRequestWS.ConnectionInfo">
            <summary>
            Dictionary containing all settings for a connection
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.GetSupportedActorTypeFieldsRequestWS">
            <summary>
            Parameters for GetSupportedActorTypeField
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetSupportedActorTypeFieldsRequestWS.ActorType">
            <summary>
            Contains the Actor type as a string
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.GetActorsRequestWS">
            <summary>
            Parameters for GetActors
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetActorsRequestWS.ActorType">
            <summary>
            Contains the Actor type as a string
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetActorsRequestWS.ErpKeys">
            <summary>
            Array containing the erp keys
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetActorsRequestWS.FieldKeys">
            <summary>
            Array containing the field keys
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.GetSearchableFieldsRequestWS">
            <summary>
            Parameters for GetSearchableFields
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetSearchableFieldsRequestWS.ActorType">
            <summary>
            Contains the Actor type as a string
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.SearchActorsAdvancedRequestWS">
            <summary>
            Parameters for SearchActorsAdvanced
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorsAdvancedRequestWS.ActorType">
            <summary>
            Contains the Actor type as a string
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorsAdvancedRequestWS.Restrictions">
            <summary>
            Array containing the search restrictions
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorsAdvancedRequestWS.FieldKeys">
            <summary>
            Array containing the field keys
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.SearchActorsRequestWS">
            <summary>
            Parameters for SearchActors
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorsRequestWS.ActorType">
            <summary>
            Contains the Actor type as a string
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorsRequestWS.SearchText">
            <summary>
            Contains the actual text to search for
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorsRequestWS.FieldKeys">
            <summary>
            Array containing the field keys
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.SearchActorByParentRequestWS">
            <summary>
            Parameters for SearchActorsByParent
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorByParentRequestWS.ActorType">
            <summary>
            Contains the Actor type as a string
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorByParentRequestWS.SearchText">
            <summary>
            Contains the actual text to search for
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorByParentRequestWS.ParentActorType">
            <summary>
            Which actor type should the parent be
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorByParentRequestWS.ParentActorErpKey">
            <summary>
            The parent actor erp key
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchActorByParentRequestWS.FieldKeys">
            <summary>
            Array containing the field keys to return
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.CreateActorRequestWS">
            <summary>
            Parameters for CreateActor
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.CreateActorRequestWS.Actor">
            <summary>
            The actor to create
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.SaveActorsRequestWS">
            <summary>
            Parameters for SaveActors
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SaveActorsRequestWS.Actors">
            <summary>
            Array of the actors
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.GetListRequestWS">
            <summary>
            Parameters for GetList
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetListRequestWS.ListName">
            <summary>
            The name of the list
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.GetListItemsRequestWS">
            <summary>
            Parameters for GetListItems
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetListItemsRequestWS.ListName">
            <summary>
            The name of the list
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetListItemsRequestWS.ListItemKeys">
            <summary>
            Array of the list item keys
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.GetActorsByTimestampRequestWS">
            <summary>
            Parameters for GetActorsByTimestamp
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetActorsByTimestampRequestWS.UpdatedOnOrAfter">
            <summary>
            Contains a timestamp previously returned by the connector
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetActorsByTimestampRequestWS.ActorType">
            <summary>
            The actor type
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.GetActorsByTimestampRequestWS.FieldKeys">
            <summary>
            Array containing the field keys
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.StringExt.FormatWith(System.String,System.Object[])">
            <summary>
            An alternative to <see cref="M:System.String.Format(System.String,System.Object)"/>, and is null-tolerant
            
            Use like this: "Some text {0}, {1}, {0}".FormatWith( 1, 2 );
            Prints: "Some text 1, 2, 1"
            </summary>
            <param name="format">Format string, may be null or empty</param>
            <param name="values">Optional parameter values</param>
            <returns>Formatted string</returns>
        </member>
        <member name="T:SuperOffice.ErpSync.ResponseStateWS">
            <summary>
            State enum for a response, describes the possible states from totally Ok to Error that an action can return
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.ResponseStateWS.Ok">
            <summary>
            The operation completed normally - nothing to see here
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.ResponseStateWS.OkWithInfo">
            <summary>
            The operation completed, but there is some information that should be shown or logged
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.ResponseStateWS.Warning">
            <summary>
            The operation completed, possibly in a degraded fashion. The user should be warned
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.ResponseStateWS.Error">
            <summary>
            The operation did not complete. The user should be told of the error
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.ConnectorResultBaseWS">
            <summary>
            Response object used by plugin/connector actions, to tell the caller how well the call went.
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorResultBaseWS.#ctor">
            <summary>
            Default constructor, creates an Ok response
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorResultBaseWS.State">
            <summary>
            Full response state
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorResultBaseWS.IsOk">
            <summary>
            A bool simplification of the response state
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorResultBaseWS.UserExplanation">
            <summary>
            A localized explanation to the answer.
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorResultBaseWS.TechExplanation">
            <summary>
            Always in English
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ConnectorResultBaseWS.ErrorCode">
            <summary>
            An error code, if available.
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ConnectorResultBaseWS.Merge(SuperOffice.ErpSync.ConnectorResultBaseWS)">
            <summary>
            Concatenates two response object into one. If one is ok and the other not, then the 'not' wins.
            The text is conactenated with lineends.
            </summary>
            <param name="rhs">The object to merge into this.</param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.ErpSync.ActorPluginResponseWS">
            <summary>
            Extended PluginResponseInfo containing an ErpActor object
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ActorPluginResponseWS.Actor">
            <summary>
            Main ErpActor object
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ActorPluginResponseWS.#ctor">
            <summary>
            Default constructor, creates an OK response
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ActorPluginResponseWS.#ctor(SuperOffice.ErpSync.ErpActorWS)">
            <summary>
            Creates an Ok response and sets the Actor object
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.ActorArrayPluginResponseWS">
            <summary>
            Extended PluginResponseInfo containing an ErpActor array
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ActorArrayPluginResponseWS.Actors">
            <summary>
            Main ErpActor array
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ActorArrayPluginResponseWS.#ctor">
            <summary>
            Default constructor, creates an OK response
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ActorArrayPluginResponseWS.#ctor(SuperOffice.ErpSync.ErpActorWS[])">
            <summary>
            Creates an Ok response and sets the Actor array object
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.ListItemArrayPluginResponseWS">
            <summary>
            Extended PluginResponseInfo containing a dictionary of list items (primarykey/displayvalue)
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.ListItemArrayPluginResponseWS.ListItems">
            <summary>
            Main list item dictionary
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ListItemArrayPluginResponseWS.#ctor">
            <summary>
            Default constructor, creates an OK response
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.ListItemArrayPluginResponseWS.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates an Ok response and sets the list item dictionary object
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.StringArrayPluginResponseWS">
            <summary>
            Extended PluginResponseInfo containing a string array
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.StringArrayPluginResponseWS.Items">
            <summary>
            Main string array
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.StringArrayPluginResponseWS.#ctor">
            <summary>
            Default constructor, creates an OK response
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.StringArrayPluginResponseWS.#ctor(System.String[])">
            <summary>
            Creates an Ok response and sets the string array object
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.FieldMetadataInfoArrayPluginResponseWS">
            <summary>
            Extended PluginResponseInfo containing a FieldMetadataInfo objects in a dictionary (FieldKey/FieldMetadataInfo)
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.FieldMetadataInfoArrayPluginResponseWS.FieldMetaDataObjects">
            <summary>
            Main FieldMetadataInfo dictionary object
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.FieldMetadataInfoArrayPluginResponseWS.#ctor">
            <summary>
            Default constructor, creates an OK response
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.FieldMetadataInfoArrayPluginResponseWS.#ctor(SuperOffice.ErpSync.FieldMetadataInfoWS[])">
            <summary>
            Creates an Ok response and sets the FieldMetadataInfo array object
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.SpecialSearchKeys">
            <summary>
            Special search keys that must be supported through SearchActorsAdvanced
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.SpecialSearchKeys.PARENT_ERPKEY">
            <summary>
            Specifies that the actor we're searching for is the child of an actor with this primary key. Always used in conjunction with PARENT_ACTORTYPE
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.SpecialSearchKeys.PARENT_ACTORTYPE">
            <summary>
            Specifies that the actor we're searching for is the child of an actor with this actor type. Always used in conjunction with PARENT_ERPKEY
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.SearchHelper">
            <summary>
            Static class with a collection of helper methods used in search
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.SearchHelper.IsMatch(System.Object,SuperOffice.CRM.SearchRestrictionInfo)">
            <summary>
            Tries to determine if a typed object (string, int, double, DateTime, bool) matches a search restriction. Note: List searches must be handled by the connector itself.
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.SearchHelper.IsMatch(System.Object,SuperOffice.CRM.FieldMetadataTypeInfo,SuperOffice.CRM.SearchRestrictionInfo)">
            <summary>
            Tries to determine if an object matches a search restriction, using a given field type. Note: List searches must be handled by the connector itself.
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.SearchHelper.IsMatchString(System.String,SuperOffice.CRM.SearchRestrictionInfo)">
            <summary>
            Tries if the searchValue matches the restriction
            </summary>
            <param name="searchValue">The string value to test</param>
            <param name="restriction">The restriction to apply</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.SearchHelper.IsMatchInt(System.Int32,SuperOffice.CRM.SearchRestrictionInfo)">
            <summary>
            Tries if the searchValue matches the restriction
            </summary>
            <param name="searchValue">The int value to test</param>
            <param name="restriction">The restriction to apply</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.SearchHelper.IsMatchDouble(System.Double,SuperOffice.CRM.SearchRestrictionInfo)">
            <summary>
            Tries if the searchValue matches the restriction
            </summary>
            <param name="searchValue">The double value to test</param>
            <param name="restriction">The restriction to apply</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.SearchHelper.IsMatchDateTime(System.DateTime,SuperOffice.CRM.SearchRestrictionInfo,SuperOffice.ErpSync.DateTimeOperators.MatchType)">
            <summary>
            Tries if the searchValue matches the restriction
            </summary>
            <param name="searchValue">The DateTime value to test</param>
            <param name="restriction">The restriction to apply</param>
            <param name="matchType">Default = DateAndTime_IgnoreSeconds</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.ErpSync.SearchHelper.IsMatchBool(System.Boolean,SuperOffice.CRM.SearchRestrictionInfo)">
            <summary>
            Tries if the searchValue matches the restriction
            </summary>
            <param name="searchValue">The bool value to test</param>
            <param name="restriction">The restriction to apply</param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.ErpSync.StringOperators">
            <summary>
            Supported operators for string fields through advanced search
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.StringOperators.EQUALS">
            <summary>
            "Equals" operator. Should not be case sensitive
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.StringOperators.BEGINS_WITH">
            <summary>
            "Begins with" operator. Should not be case sensitive
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.StringOperators.CONTAINS">
            <summary>
            "Contains" operator. Should not be case sensitive
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.StringOperators.ENDS_WITH">
            <summary>
            "Ends with" operator. Should not be case sensitive
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.StringOperators.NOT_BEGINS_WITH">
            <summary>
            "Does not begin with" operator. Should not be case sensitive
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.StringOperators.NOT_CONTAINS">
            <summary>
            "Does not contain" operator. Should not be case sensitive
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.StringOperators.NOT_ENDS_WITH">
            <summary>
            "Does not end with" operator. Should not be case sensitive
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.StringOperators.NOT_EQUALS">
            <summary>
            "Does not equal" operator. Should not be case sensitive
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.StringOperators.BETWEEN">
            <summary>
            "Between" operator. Search values are presented in desired order. Should not be case sensitive
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.IntOperators">
            <summary>
            Supported operators for int fields through advanced search
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.IntOperators.EQUALS">
            <summary>
            "Equals" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.IntOperators.GREATER_THAN">
            <summary>
            "Greater than" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.IntOperators.LESS_THAN">
            <summary>
            "Less than" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.IntOperators.GREATER_OR_EQUAL">
            <summary>
            "Greater than or equals" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.IntOperators.LESS_OR_EQUAL">
            <summary>
            "Less than or equals" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.IntOperators.NOT_EQUALS">
            <summary>
            "Does not equal" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.IntOperators.BETWEEN">
            <summary>
            "Between" operator. Search values are presented in desired order.
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.DoubleOperators">
            <summary>
            Supported operators for double fields through advanced search
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DoubleOperators.EQUALS">
            <summary>
            "Equals" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DoubleOperators.GREATER_THAN">
            <summary>
            "Greater than" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DoubleOperators.LESS_THAN">
            <summary>
            "Less than" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DoubleOperators.GREATER_OR_EQUAL">
            <summary>
            "Greater than or equals" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DoubleOperators.LESS_OR_EQUAL">
            <summary>
            "Less than or equals" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DoubleOperators.NOT_EQUALS">
            <summary>
            "Does not equal" operator.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DoubleOperators.BETWEEN">
            <summary>
            "Between" operator. Search values are presented in desired order.
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.BoolOperators">
            <summary>
            Supported operators for boolean fields through advanced search
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.BoolOperators.EQUALS">
            <summary>
            "Equals" operator
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.ListOperators">
            <summary>
            Supported operators for list fields through advanced search
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.ListOperators.ONE_OF">
            <summary>
            "Equals" operator
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.ListOperators.NOT_ONE_OF">
            <summary>
            "Does not equal" operator
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.DateTimeOperators">
            <summary>
            Supported operators for datetime fields through advanced search
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.DateTimeOperators.MatchType">
            <summary>
            Which part of the date time should be matched
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.MatchType.DateOnly">
            <summary>
            Match on date only
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.MatchType.TimeOnly">
            <summary>
            Match on time only
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.MatchType.TimeOnly_IgnoreSeconds">
            <summary>
            Match on time only, but ignore seconds
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.MatchType.DateAndTime">
            <summary>
            Match on date and time
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.MatchType.DateAndTime_IgnoreSeconds">
            <summary>
            Match on date and time, but ignore seconds
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.EQUALS">
            <summary>
            "Equals" operator. Connector should be the one to determine whether or not to compare just dates, just times or both date and time.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.BEFORE">
            <summary>
            "Before" operator. Connector should be the one to determine whether or not to compare just dates, just times or both date and time.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.AFTER">
            <summary>
            "After" operator. Connector should be the one to determine whether or not to compare just dates, just times or both date and time.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.BEFORE_OR_EQUAL">
            <summary>
            "Before or equal" operator. Connector should be the one to determine whether or not to compare just dates, just times or both date and time.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.AFTER_OR_EQUAL">
            <summary>
            "After or equal" operator. Connector should be the one to determine whether or not to compare just dates, just times or both date and time.
            </summary>
        </member>
        <member name="F:SuperOffice.ErpSync.DateTimeOperators.BETWEEN">
            <summary>
            "Between" operator. Connector should be the one to determine whether or not to compare just dates, just times or both date and time. Search values will be presented in the desired order.
            </summary>
        </member>
        <member name="T:SuperOffice.ErpSync.SearchRestrictionInfoWS">
            <summary>
            Carrier object representing search restriction, used for advanced search
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchRestrictionInfoWS.FieldKey">
            <summary>
            Field key, corresponding to a previously-returned FieldKey in a <see cref="T:SuperOffice.CRM.FieldMetadataInfo"/> structure;
            uniquely identifies the field to search for
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchRestrictionInfoWS.Operator">
            <summary>
            Operator to be applied in this search. Operators are: =, !=, &gt;, &lt; between and IN for all data types; 
            in addition, strings should support begins and contains with % as the wildcard placeholder
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchRestrictionInfoWS.Values">
            <summary>
            Array of values to apply in search. Most operators take just one value, and the <see cref="P:SuperOffice.ErpSync.SearchRestrictionInfoWS.ScalarValue"/> derived
            property can be used to get/set the value
            </summary>
        </member>
        <member name="P:SuperOffice.ErpSync.SearchRestrictionInfoWS.ScalarValue">
            <summary>
            Simplified get/set property for the one-and-only element of the <see cref="P:SuperOffice.ErpSync.SearchRestrictionInfoWS.Values"/> array, for operators
            that take only one value.
            </summary>
        </member>
        <member name="M:SuperOffice.ErpSync.SearchRestrictionInfoWS.ToString">
            <summary>
            ToString override. Returns a formatted representation of a SearchRestrictionInfo
            </summary>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.Events.EventEnginePluginAttribute">
            <summary>
            Attribute for EventEngine plugins, implementing the <see cref="T:SuperOffice.Events.IEventEngine"/> interface
            </summary>
        </member>
        <member name="M:SuperOffice.Events.EventEnginePluginAttribute.#ctor(System.String)">
            <summary>
            </summary>
            <param name="name">Plugin name, arbitrary string</param>        
        </member>
        <member name="T:SuperOffice.Events.IEventEngine">
            <summary>
            Interface for Event engine
            </summary>
        </member>
        <member name="M:SuperOffice.Events.IEventEngine.Init">
            <summary>
            Initalization of engine
            </summary>
        </member>
        <member name="M:SuperOffice.Events.IEventEngine.SendEvent(System.String,System.Boolean,System.Object@,SuperOffice.Events.SendEventArguments@)">
            <summary>
            Execute the event.
            </summary>
            <param name="methodName"></param>
            <param name="async"></param>
            <param name="state"></param>
            <param name="arguments"></param>
        </member>
        <member name="T:SuperOffice.Events.SendEventArguments">
            <summary>
            SendEventArguments contains information for executing a new event from SoEventManager.
            </summary>
        </member>
        <member name="F:SuperOffice.Events.SendEventArguments.ArgumentTypes">
            <summary>
            The types of the parameters to the method call
            </summary>
        </member>
        <member name="F:SuperOffice.Events.SendEventArguments.Arguments">
            <summary>
            The values of the parameters to the method call
            </summary>
        </member>
        <member name="F:SuperOffice.Events.SendEventArguments.ReturnType">
            <summary>
            Type of the result of the method call
            </summary>
        </member>
        <member name="F:SuperOffice.Events.SendEventArguments.ReturnValue">
            <summary>
            Value of the result of the method call
            </summary>
        </member>
        <member name="T:SuperOffice.Factory.AssemblyHelper">
            <summary>
            Copy-paste from SoCore\Util\AssemblyHelper.
            </summary>
        </member>
        <member name="M:SuperOffice.Factory.AssemblyHelper.IsSystemAssembly(System.Reflection.Assembly)">
            <summary>
            Recognize, by hardcoded name list, assemblies that we should not try to parse for our Class Factories
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.Factory.IPlugin">
            <summary>
            Interface to be implemented by all plugins.
            </summary>
            <remarks>The plug-in must also be declared with the <see cref="T:SuperOffice.Factory.PluginAttribute"/></remarks>
        </member>
        <member name="T:SuperOffice.Factory.PluginAttribute">
            <summary>
            Attribute that needs to be declared for all plug-ins.  
            </summary>
            <remarks>Plug-ins must also implement the interface <see cref="T:SuperOffice.Factory.IPlugin"/>.</remarks>
        </member>
        <member name="P:SuperOffice.Factory.PluginAttribute.IsAutoDiscoverable">
            <summary>
            Is the plugin auto discoverable, or does it need to be explicitly added top the <see cref="T:SuperOffice.Factory.PluginFactory"/>
            </summary>
        </member>
        <member name="M:SuperOffice.Factory.PluginAttribute.#ctor(System.String,System.Type)">
            <summary>
            Default constructor for the plug-in attribute.
            </summary>
            <param name="name">Name of the plug-in provided by the plug-in manufacturer.</param>
            <param name="pluginInterface">The type of the plugin interface.</param>
        </member>
        <member name="P:SuperOffice.Factory.PluginAttribute.Name">
            <summary>
            Name of the plug-in provided by the plug-in manufacturer.
            </summary>
        </member>
        <member name="P:SuperOffice.Factory.PluginAttribute.IsSuperOfficeSigned">
            <summary>
            </summary>
        </member>
        <member name="P:SuperOffice.Factory.PluginAttribute.PluginInterface">
            <summary>
            The interface this plugin must implent.
            </summary>
        </member>
        <member name="T:SuperOffice.Factory.PluginFactory">
            <summary>
            Class factory for creating and providing information about plug-ins.
            </summary>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.Create(System.Type,System.String)">
            <summary>
            Create instance of a plug-in, provided type and name information.
            </summary>
            <param name="type">Type, e.g. interface type inhereting from <see cref="T:SuperOffice.Factory.IPlugin"/>, that the plug-in implements.</param>
            <param name="name">Name of the plug-in, as provided by the plug-in manufactorer.</param>
            <returns>Instance of the plug-in</returns>
            <remarks>Document plug-ins will use the id (integeral value) as a string.</remarks>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.Create``1(System.String)">
            <summary>
            Create instance of a plug-in, provided type and name information.
            </summary>
            <typeparam name="TPlugin">Type, e.g. interface type inhereting from <see cref="T:SuperOffice.Factory.IPlugin"/>, that the plug-in implements.</typeparam>
            <param name="name">Name of the plug-in, as provided by the plug-in manufactorer.</param>
            <returns>Instance of the plug-in</returns>
            <remarks>Document plug-ins will use the id (integeral value) as a string.</remarks>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.Create(System.Type)">
            <summary>
            Create instances of all plug-ins of a given type.
            </summary>
            <param name="type">Type, e.g. interface type inhereting from <see cref="T:SuperOffice.Factory.IPlugin"/>, that the plug-in implements.</param>
            <returns>Array of plug-in instances.</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.Create``1">
            <summary>
            Create an instance for all the plugins provided.
            </summary>
            <typeparam name="TPlugin">Type, e.g. interface type inhereting from <see cref="T:SuperOffice.Factory.IPlugin"/>, that the plug-in implements.</typeparam>
            <returns>Array of plug-in instances.</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.CreateFirst``1">
            <summary>
            Create an instance the first plugins provided. (The one with lowes priority)
            </summary>
            <typeparam name="TPlugin">Type, e.g. interface type inhereting from <see cref="T:SuperOffice.Factory.IPlugin"/>, that the plug-in implements.</typeparam>
            <returns>Plug-in instance.</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.Create(SuperOffice.Factory.PluginInfo[])">
            <summary>
            Create an instance for all the plugins provided
            </summary>
            <param name="infos">Information about plug-ins.</param>
            <returns>Array of plug-in instances.</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.Create``1(SuperOffice.Factory.PluginInfo[])">
            <summary>
            Create an instance for all the plugins provided; if they have a prioritizedplugin attribute, then
            take that into account during creation (lowest first)
            </summary>
            <param name="infos">Information about plug-ins.</param>
            <typeparam name="TPlugin">Type of plugins returned.</typeparam>
            <returns>Array of plug-in instances.</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.GetPluginInfo">
            <summary>
            Get a <see cref="T:SuperOffice.Factory.PluginInfo"/> instance describing all plug-ins loaded by the system.
            </summary>
            <returns>Array of <see cref="T:SuperOffice.Factory.PluginInfo"/> instance describing all plug-ins loaded by the system.</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.GetPluginInfo(System.Type)">
            <summary>
            Get a <see cref="T:SuperOffice.Factory.PluginInfo"/> instance describing all plug-ins of a given type loaded by the system.
            </summary>
            <param name="type">Type, e.g. interface type inhereting from <see cref="T:SuperOffice.Factory.IPlugin"/>, that the plug-in implements.</param>
            <returns>Array of <see cref="T:SuperOffice.Factory.PluginInfo"/> instance describing all plug-ins of a given type loaded by the system.</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.GetPluginInfo(System.Type,System.String)">
            <summary>
            Get a <see cref="T:SuperOffice.Factory.PluginInfo"/> instance describing the plug-in, provided type and name information.
            </summary>
            <param name="type">Type, e.g. interface type inhereting from <see cref="T:SuperOffice.Factory.IPlugin"/>, that the plug-in implements.</param>
            <param name="name">Name of the plug-in, as provided by the plugin manufactorer.</param>
            <returns><see cref="T:SuperOffice.Factory.PluginInfo"/> instance describing the plug-in</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.GetPluginInfo(System.Collections.Generic.List{SuperOffice.Factory.PluginInfo})">
            <summary>
            Sort a list of plugins according to their priority, if any; lowest numeric value first
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.Add(SuperOffice.Factory.PluginInfo)">
            <summary>
            Add a plug-in to the factory.
            </summary>
            <param name="info">Information about the plug-in to add;</param>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.Remove(SuperOffice.Factory.PluginInfo)">
            <summary>
            DO NOT USE IN PRODUCTION-CODE!
            
            Method only intenteded for use when unit-testing plugin initialization.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:SuperOffice.Factory.PluginFactory.GetPluginsAttributedName(SuperOffice.Factory.IPlugin)">
            <summary>
            From an instance of a plugin, look up and return the name specified in its attribute
            </summary>
            <param name="thePlugin">An instance of a class that implements IPlugin and has an attribute derived from PluginAttribute</param>
            <returns>The <see cref="P:SuperOffice.Factory.PluginAttribute.Name"/> of the plugin</returns>
        </member>
        <member name="T:SuperOffice.Factory.PluginInfo">
            <summary>
            Class holding information about plug-ins and ability to create them.  Use <see cref="T:SuperOffice.Factory.PluginFactory"/> for obtaining instances of this object.
            </summary>
        </member>
        <member name="M:SuperOffice.Factory.PluginInfo.#ctor(System.Type,System.Func{SuperOffice.Factory.IPlugin})">
            <summary>
            Private constructor.
            </summary>
            <param name="type">The plug-ins implementation type.</param>
            <param name="customFactory">Optional custom factory to create instance of the plugin</param>
        </member>
        <member name="M:SuperOffice.Factory.PluginInfo.Create(System.Type,System.Func{SuperOffice.Factory.IPlugin})">
            <summary>
            Get instance of the PluginInfo.
            </summary>
            <param name="type">Type of plug-in</param>
            <param name="customFactory">Optional custom factory to create instance of the plugin</param>
            <returns>null if this is not a valid plug-in</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginInfo.IsValidPlugin(System.Type,System.Func{SuperOffice.Factory.PluginAttribute,System.Boolean})">
            <summary>
            True if the type is a valid plug-in.
            </summary>
            <param name="type">Type to verigy if it is a valid plug-in.</param>
            <param name="restriction">optional additional restriction for validating the plugin.</param>
            <returns>True if this type represents a valid plug-in.</returns>
        </member>
        <member name="P:SuperOffice.Factory.PluginInfo.AssemblyVersion">
            <summary>
            Assembly version of the assembly implementing the plug-in.
            </summary>
        </member>
        <member name="P:SuperOffice.Factory.PluginInfo.FileVersion">
            <summary>
            File version of the assembly implementing the plug-in.
            </summary>
        </member>
        <member name="P:SuperOffice.Factory.PluginInfo.PluginType">
            <summary>
            Type of plugin, e.g. the plug-in interface that the plugin implements
            </summary>
        </member>
        <member name="P:SuperOffice.Factory.PluginInfo.PluginImplementationType">
            <summary>
            The of the plug-in's inplementation
            </summary>
        </member>
        <member name="P:SuperOffice.Factory.PluginInfo.Attribute">
            <summary>
            The attribute the plugin is declared with.
            </summary>
        </member>
        <member name="P:SuperOffice.Factory.PluginInfo.Name">
            <summary>
            Name of the plugin as declared in the attribute.
            </summary>
        </member>
        <member name="M:SuperOffice.Factory.PluginInfo.Create">
            <summary>
            Create an instance of the plug-in, invoking its default constructor
            </summary>
            <returns>Instance of the plug-in, or null if the plugin is not licensed</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginInfo.Create(System.Object)">
            <summary>
            Create an instance of the plug-in, invoking a constructor matching the actual
            parameter passed to this method.
            </summary>
            <remarks>
            If the constructor parameter is null, then this method dispatches to the parameterless Create,
            which in turn invokes the default constructor on the target plugin class.
            <para/>
            For non-null parameters, we first scan the target plugin class to find a constructor
            that has exactly one argument of the exact same type; if one is found then it is
            invoked. 
            <br/>
            Finally, a second scan of the target plugin is done to search for a constructor
            that has exactly one argument of a type that the actual parameter is assignable to;
            if one is found then it is invoked.
            </remarks>
            <param name="constructorParam">Argument to target plugin constructor, or null to call the default constructor</param>
            <returns>Instance of the plug-in</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginInfo.GetNameFromPluginInstance(SuperOffice.Factory.IPlugin,System.Boolean)">
            <summary>
            Get the name embedded in the PluginAttribute of a plugin, given an instance of the concrete plugin type
            </summary>
            <param name="pluginInstance">Instance of plugin type</param>
            <param name="logErrors"></param>
            <returns>Name property from PluginAttribute of the instance's type; null if the instance is of a type that does not have a PluginAttribute-derived attribute</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginInfo.GetNameFromPluginInstance(System.Type,System.Boolean)">
            <summary>
            Get the name embedded in the PluginAttribute of a plugin, given the concrete plugin type
            </summary>
            <remarks>
            An error is logged in the log file if no attribute is found
            </remarks>
            <param name="pluginType">Instance of plugin type</param>
            <param name="logErrors"></param>
            <returns>Name property from PluginAttribute of the instance's type; null if the type does not have a PluginAttribute-derived attribute</returns>
        </member>
        <member name="M:SuperOffice.Factory.PluginInfo.ToString">
            <summary>
            String representation, mostly for debugging purposes
            </summary>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.Factory.PrioritizedPluginAttribute">
            <summary>
            Defines plugins with priority. Lower priority numbers win over higher priorities.
            Must be used in conjunction with plugins implementing <see cref="T:SuperOffice.Factory.IPlugin"/> derived interfaces.
            </summary>
        </member>
        <member name="M:SuperOffice.Factory.PrioritizedPluginAttribute.#ctor(System.String,System.Type,System.Int32)">
            <summary>
            Declare a plugin with a priority.
            </summary>
        </member>
        <member name="P:SuperOffice.Factory.PrioritizedPluginAttribute.Priority">
            <summary>
            How important is the plugin. Smaller numbers are more important. 
            10 is more important than 999.
            </summary>
        </member>
        <member name="T:SuperOffice.Factory.StatelessClassFactory">
            <summary>
            A stateless class-factory to support class-factory needs of Plugins.
            Because of the stateless nature, it is slow and every invocation should
            be considered expensive.
            </summary>
        </member>
        <member name="P:SuperOffice.Services.WcfService.WcfRequestInterceptorState.ApplicationClientId">
            <summary>
            Application's ClientId - not secret.
            </summary>
        </member>
        <member name="T:SuperOffice.Services.WcfService.ISoWcfRequestInterceptorPlugin">
            <summary>
            Plugins needing to intercept web service reqests can implement this interface
            </summary>
        </member>
        <member name="M:SuperOffice.Services.WcfService.ISoWcfRequestInterceptorPlugin.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Event raised when web service requests are recieved
            </summary>
            <param name="service">Name of service or agent.</param>
            <param name="method">Name of web method</param>
            <param name="requestApplicationToken">Application Token from the request</param>
            <returns>State passed on to other events raised in the web method processing.</returns>
        </member>
        <member name="M:SuperOffice.Services.WcfService.ISoWcfRequestInterceptorPlugin.OnExecute(System.String,System.String,System.String,SuperOffice.Services.WcfService.WcfRequestInterceptorState@)">
            <summary>
            Event raised after the user is authenticated before executing the actual method
            </summary>
            <param name="service">Name of service or agent.</param>
            <param name="method">Name of web method</param>
            <param name="requestApplicationToken">Application Token from the request</param>
            <param name="pluginState">State created in OnAuthenticate</param>
        </member>
        <member name="M:SuperOffice.Services.WcfService.ISoWcfRequestInterceptorPlugin.OnExecuted(System.String,System.String,System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.String}},SuperOffice.Services.WcfService.WcfRequestInterceptorState@)">
            <summary>
            Event raised after the operation has successfully been carried out
            </summary>
            <param name="service">Name of service or agent.</param>
            <param name="method">Name of web method</param>
            <param name="requestApplicationToken">Application Token from the request</param>
            <param name="responseExtraInfo">ExtraInfo passed in teh response, that is sent to the client.</param>
            <param name="pluginState">State created in OnAuthenticate</param>
        </member>
        <member name="M:SuperOffice.Services.WcfService.ISoWcfRequestInterceptorPlugin.OnError(System.String,System.String,System.String,System.Exception,SuperOffice.Services.WcfService.WcfRequestInterceptorState@)">
            <summary>
            Event raised if an error occurs. This event is raised when authentication fails too
            </summary>
            <param name="service">Name of service or agent.</param>
            <param name="method">Name of web method</param>
            <param name="requestApplicationToken">Application Token from the request</param>
            <param name="exception">Exception occured</param>
            <param name="pluginState">State created in OnAuthenticate</param>
        </member>
        <member name="T:SuperOffice.Globalization.IResourceProvider">
            <summary>
            Interface for resource provider classes
            When defined in the Client section of the config file, classes of this type will be loaded as providers for text resources
            </summary>
        </member>
        <member name="M:SuperOffice.Globalization.IResourceProvider.Initialize">
            <summary>
            Initializes the provider.
            To improve performance frequently used data should be loaded into memory here.
            </summary>
            <remarks>
            Implementers MUST use the Thread.CurrentThread.CurrentUICulture to determine the culture they
            are currently servicing. In a multi-threaded international world, there is no reason to expect
            that two adjacent threads will have the same culture. Static variables implementing
            any concept that sounds like 'current culture' should excite the deepest suspicion.
            </remarks>
        </member>
        <member name="M:SuperOffice.Globalization.IResourceProvider.CanInitialize">
            <summary>
            Check if all requirements for initialization have been met. 
            </summary>
            <remarks>
            For instance, if the provider needs database access, then it should make a fast check inside this
            method to verify that a valid session is running. 
            <para/>
            When this method returns true, <see cref="M:SuperOffice.Globalization.IResourceProvider.Initialize"/> will be called <b>once</b>. If this
            method returns false, then it will be called repeatedly. High performance in this implementation
            is essential.
            </remarks>
            <returns>true if a subsequent call to Initialized will succeed</returns>
        </member>
        <member name="M:SuperOffice.Globalization.IResourceProvider.GetSupportedLanguages">
            <summary>
            Return an array of cultures that this provider has resources for. This method is called once, after Initialize.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Globalization.IResourceProvider.GetResource(System.String)">
            <summary>
            Returns a string from this provider in the current culture
            </summary>
            <param name="name">The name of the resource/resource symbol</param>
            <returns>The resource string, or null if not found</returns>
        </member>
        <member name="M:SuperOffice.Globalization.IResourceProvider.GetResource(System.String,System.String)">
            <summary>
            Returns a string from this provider in the specified culture
            </summary>
            <param name="name">The name of the resource/resource symbol</param>
            <param name="cultureName">The name of the culture in the form en-US, nb-NO</param>
            <returns>The resource string, or null if not found</returns>
        </member>
        <member name="T:SuperOffice.Globalization.IUnfilteredResourceProvider">
            <summary>
            Interface for raw resource string providers classes
            Resource providers that need to return a dictionary of all resource strings should implement this.
            </summary>
        </member>
        <member name="M:SuperOffice.Globalization.IUnfilteredResourceProvider.GetUnfilteredResourcesForCulture(System.String)">
            <summary>
            Returns all unfiltered resource strings for the specified culture as a dictionary
            </summary>
            <param name="cultureName">The name of the culture in the form en-US, nb-NO</param>
            <returns>Dictionary of all resource labels and unfiltered strings</returns>
        </member>
        <member name="M:SuperOffice.Globalization.IUnfilteredResourceProvider.GetUnfilteredResourceForCulture(System.String,System.String)">
            <summary>
            Returns the unfiltered string from this provider in the specified culture
            </summary>
            <param name="name">The name of the resource/resource symbol</param>
            <param name="cultureName">The name of the culture in the form en-US, nb-NO</param>
            <returns>The unfiltered resource string, or null if not found</returns>
        </member>
        <member name="T:SuperOffice.Globalization.ISearchableResourceProvider">
            <summary>
            Interface for searchable resource providers classes
            Resource providers that need to return a list of resources for a given search string should implement this
            </summary>
        </member>
        <member name="M:SuperOffice.Globalization.ISearchableResourceProvider.FindResourceStrings(System.String,System.String)">
            <summary>
            Returns all resource strings containing searchString in the specified culture
            </summary>
            <param name="searchString">The string to search for, case insensitive</param>
            <param name="cultureName">The name of the culture in the form en-US, nb-NO</param>
            <returns>Array of resource names matching searchString</returns>
        </member>
        <member name="T:SuperOffice.Globalization.ITranslatedResourceProvider">
            <summary>
            Interface for searchable resource providers classes
            Resource providers that need to return a list of resources for a given search string should implement this
            </summary>
        </member>
        <member name="M:SuperOffice.Globalization.ITranslatedResourceProvider.GetAllTranslatedResourceStrings(System.String)">
            <summary>
            Returns all resource strings that is translated in the specified culture
            </summary>
            <param name="cultureName">The name of the culture in the form en-US, nb-NO</param>
            <returns>Array of resource names matching searchString</returns>
        </member>
        <member name="M:SuperOffice.Globalization.ITranslatedResourceProvider.Refresh">
            <summary>
            Refresh internal caches
            </summary>
        </member>
        <member name="T:SuperOffice.Globalization.ResourceProviderAttribute">
            <summary>
            Attribute used to mark implementations of <see cref="T:SuperOffice.Globalization.IResourceProvider"/> with
            a name (doesn't matter much as long as it's unique) and a priority (can be important!).
            </summary>
            <remarks>
            Partners are encouraged to use structured names, such as company.product.subproduct
            for their providers, to ensure uniqueness.
            </remarks>
        </member>
        <member name="M:SuperOffice.Globalization.ResourceProviderAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Mark a class as a resource provider.
            </summary>
            <param name="name"> Partners are encouraged to use structured names, such as company.product.subproduct
            for their providers, to ensure uniqueness.</param>
            <param name="priority">Lower numbers = called first; SuperOffice standard providers have priorities around Int32.MaxValue / 2</param>
        </member>
        <member name="T:SuperOffice.Globalization.ResourceDllProviderBase">
            <summary>
            Base class for standard .NET resource DLL based providers
            </summary>
            <remarks>
            Using a minimal derivation from this class, you can make your own resource dll that will be
            picked up by NetServer and inserted into the provider stack. This base class contains
            sufficient implementation of the whole IResourceProvider interface.
            <para/>
            A derivation of the following form is enough:
            <code>
            namespace SuperOffice.SM.Resources
            {
            	[ResourceProvider("SuperOffice.SM.Resources", int.MaxValue / 2)]
            	public class SuperOfficeResourceDllProvider : ResourceDllProviderBase
            	{
            		public SuperOfficeResourceDllProvider()
            			: base(Assembly.GetExecutingAssembly(), ".ResourceStrings")
            		{
            		}
            	}
            }	
            </code>
            The name of the provider, declared in the ResourceProvider attribute, should be of a form
            that ensures uniqueness, &lt;Company&gt;.&lt;Product&gt; is suggested. The priority value
            can be left at int.MaxValue/2 unless the purpose of the provider is to <b>override existing providers</b>
            with new values; in that case a numerically lower value will ensure that this provider
            is called first.
            <para/>
            The ".ResourceStrings" constant reflects the name of the resource XML structure, and
            corresponds to the name of the .resx files in the project.
            </remarks>
        </member>
        <member name="M:SuperOffice.Globalization.ResourceDllProviderBase.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Base constructor.
            </summary>
            <param name="resourceAssembly">Resource assembly to assign.</param>
            <param name="resourceRoot">Resource root to assign.</param>
        </member>
        <member name="M:SuperOffice.Globalization.ResourceDllProviderBase.Initialize">
            <summary>
            Initialize resources.
            </summary>
        </member>
        <member name="M:SuperOffice.Globalization.ResourceDllProviderBase.CanInitialize">
            <summary>
            Reports wheter the ResourceDllProvider can/needs initialization.
            </summary>
            <returns>true if it can be initlialized.</returns>
        </member>
        <member name="M:SuperOffice.Globalization.ResourceDllProviderBase.GetSupportedLanguages">
            <summary>
            Scan currently loaded assemblies that have the same name as this one, and return the set of cultures (excluding the fallback invariant culture)
            </summary>
            <remarks>
            Resource satellite assembly loading works in different ways depending on your execution model. When running
            as a web application, IIS will shadow-cache and preload all assemblies; this means that all cultures are
            loaded and we can scan the AppDomain. On the other hand, the file/folder structure of the satellite assemblies
            is lost.
            <para/>
            When running as a "normal" application, the .NET <see cref="T:System.Resources.ResourceManager"/> will load
            satellite assemblies as needed - so looking at the AppDomain will not tell us much beyond the current and fallback
            cultures. In this case we need to do a directory scan to determine what other cultures actually exist.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Globalization.ResourceDllProviderBase.GetUnfilteredResourcesForCulture(System.String)">
            <summary>
            Returns all resource strings for the specified culture as a dictionary
            </summary>
            <param name="cultureName">The name of the culture in the form en-US, nb-NO</param>
            <returns>Dictionary of all resource labels and values</returns>
        </member>
        <member name="M:SuperOffice.Globalization.ResourceDllProviderBase.GetUnfilteredResourceForCulture(System.String,System.String)">
            <summary>
            Returns the unfiltered string from this provider in the specified culture
            </summary>
            <param name="name">The name of the resource/resource symbol</param>
            <param name="cultureName">The name of the culture in the form en-US, nb-NO</param>
            <returns>The unfiltered resource string, or null if not found</returns>
        </member>
        <member name="M:SuperOffice.Globalization.ResourceDllProviderBase.GetResource(System.String)">
            <summary>
            Returns a string from this provider in the current culture
            </summary>
            <param name="name">The name of the resource/resource symbol</param>
            <returns>The resource string</returns>
        </member>
        <member name="M:SuperOffice.Globalization.ResourceDllProviderBase.GetResource(System.String,System.String)">
            <summary>
            Returns a string from this provider in the specified culture
            </summary>
            <param name="name">The name of the resource/resource symbol</param>
            <param name="cultureName">The name of the culture in the form en-US, nb-NO</param>
            <returns>The resource string</returns>
        </member>
        <member name="M:SuperOffice.Globalization.ResourceDllProviderBase.FindResourceStrings(System.String,System.String)">
            <summary>
            Returns all resource strings containing searchString in the specified culture
            </summary>
            <param name="searchString">The string to search for, case insensitive</param>
            <param name="cultureName">The name of the culture in the form en-US, nb-NO</param>
            <returns>Array of resource strings matching searchString</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValues(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)" -->
        <member name="M:SuperOffice.Security.Claims.ClaimsExtensions.GetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String)">
            <summary>
            Get first matching claim value with provided type that has a value.
            </summary>
            <param name="claims"></param>
            <param name="claimType"></param>
            <param name="defaultValue">Default value to return if no values are found</param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsExtensions.TryGetValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String@)">
            <summary>
            Try get a claim value.  Resolves first if there are several.
            </summary>
            <param name="claims"></param>
            <param name="claimType"></param>
            <param name="claimValue"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsExtensions.TryGetInt32Value(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Int32@)">
            <summary>
            Try get int32 claim value. Claim must be of type <see cref="F:System.Security.Claims.ClaimValueTypes.Integer32"/>. Resolves first if there are several.
            </summary>
            <param name="claims"></param>
            <param name="claimType"></param>
            <param name="claimValue"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsExtensions.TryGetDateTimeValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.DateTime@)">
            <summary>
            Try get a DateTime claim value.  Claim must be of type <see cref="F:System.Security.Claims.ClaimValueTypes.DateTime"/>. Resolves first if there are several.
            </summary>
            <param name="claims"></param>
            <param name="claimType"></param>
            <param name="claimValue"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentitiesExtensions.HavingClaimsOfClaimType(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.String)">
            <summary>
            Filter enumerable of <see cref="T:System.Security.Claims.ClaimsIdentity"/> on those having claims of the provided 
            </summary>
            <param name="identities"></param>
            <param name="claimType"></param>
            <returns></returns>
        </member>
        <member name="T:SuperOffice.Security.Claims.ClaimsIdentityBuilder">
            <summary>
            Builder to construct a new <see cref="T:System.Security.Claims.ClaimsIdentity"/>
            </summary>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.#ctor(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Create new builder based on an existing identity
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.#ctor(System.String)">
            <summary>
            Create a new builder with a provided authentication type
            </summary>
            <param name="authenticationType"></param>
            <remarks>An authentication type is required for the resulting Claims Identity to be  <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/>.</remarks>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)">
            <summary>
            Create a new builder based on  an existing list of claims and an authentication type
            </summary>
            <param name="claims"></param>
            <param name="authenticationType"></param>
            <remarks>An authentication type is required for the resulting Claims Identity to be  <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/>.</remarks>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.AddClaim(System.Security.Claims.Claim)">
            <summary>
            Add claim to the list of claims
            </summary>
            <param name="claim"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.AddClaim(System.String,System.String)">
            <summary>
            Add a claim with type and value of string to list of claims
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.AddClaim(System.String,System.Int32)">
            <summary>
            Add an integer claim with value type <see cref="F:System.Security.Claims.ClaimValueTypes.Integer32"/> to the list of claims
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.AddClaim(System.String,System.Int64)">
            <summary>
            Add a claim of type <see cref="F:System.Security.Claims.ClaimValueTypes.Integer64"/> to the list of claims
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.AddClaim(System.String,System.DateTime)">
            <summary>
            Add a claim of type <see cref="F:System.Security.Claims.ClaimValueTypes.DateTime"/> to the list of claims.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.AddClaims(System.Security.Claims.Claim[])">
            <summary>
            Add multiple claims to the list of claims.
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Add multiple claims to the list of claims.
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.RemoveClaims(System.String)">
            <summary>
            Remove all claims of the provided type from the list of claims
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.RemoveClaim(System.Security.Claims.Claim)">
            <summary>
            Remove a particular instance of a claim from the list of claims.
            </summary>
            <param name="claim"></param>
            <returns></returns>
        </member>
        <member name="P:SuperOffice.Security.Claims.ClaimsIdentityBuilder.Claims">
            <summary>
            List of currently held claims
            </summary>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.GetClaimValues(System.String)">
            <summary>
            Get all values of claim with the provided type
            </summary>
            <param name="claimType"></param>
            <returns></returns>
        </member>
        <member name="M:SuperOffice.Security.Claims.ClaimsIdentityBuilder.Build">
            <summary>
            Construct a new <see cref="T:System.Security.Claims.ClaimsIdentity"/> with the current list of claims and authentication type as provided in the constructor.
            </summary>
            <returns></returns>
            <remarks>
                Duplicate claims with same type and values will be removed.  If <see cref="T:SuperOffice.Security.Claims.ClaimsIdentityBuilder"/>
                was constructed using a <see cref="T:System.Security.Claims.ClaimsIdentity"/>, the authentication type will be inherited
                from the original identity.
            </remarks>
        </member>
        <member name="F:SuperOffice.Security.Claims.SoClaimTypes.AssociateId">
            <summary>
            Primary key of the associate in the database
            </summary>
        </member>
        <member name="F:SuperOffice.Security.Claims.SoClaimTypes.ContextIdentifier">
            <summary>
            Context identifier for the user
            </summary>
        </member>
        <member name="F:SuperOffice.Security.Claims.SoClaimTypes.ImpersonatingAssociateId">
            <summary>
            Associate id of the user impersonating another associate
            </summary>
        </member>
        <member name="F:SuperOffice.Security.Claims.SoClaimTypes.Password">
            <summary>
            Sensitive, should only be used during the authentication process
            </summary>
        </member>
        <member name="F:SuperOffice.Security.Claims.SoClaimTypes.PersonId">
            <summary>
            Primary key of the resolved person in the database
            </summary>
        </member>
        <member name="F:SuperOffice.Security.Claims.SoClaimTypes.Ticket">
            <summary>
            SuperOffice NetServer authentication ticket.  Value starts with '7T:'.
            </summary>
        </member>
        <member name="F:SuperOffice.Security.Claims.SoClaimTypes.So8TAccessToken">
            <summary>
            SuperOffice NetServer Access Token.  Value starts with '8T:'.
            </summary>
        </member>
        <member name="F:SuperOffice.Security.Claims.SoClaimTypes.UserName">
            <summary>
            User name as provided by the end user in login dialog.  Can be resolved to Associate.Name or Associate.UserName
            </summary>
        </member>
        <member name="F:SuperOffice.Security.Claims.SoClaimTypes.Origin">
            <summary>
            IP address of the user logging in.  
            </summary>
            <remarks>
            Origin is obtained from the X-Forwarded-For http header or the http requests' user host address
            </remarks>
        </member>
        <member name="T:SuperOffice.Security.ImplicitIdentitySupplierAttribute">
            <summary>
            Declaration of plugin capable of obtaining SecurityToken
            </summary>
        </member>
        <member name="M:SuperOffice.Security.ImplicitIdentitySupplierAttribute.#ctor(System.String)">
            <summary>
            Declaration of plugin capable of obtaining SecurityToken
            </summary>
            <param name="name">Plugin name</param>        
        </member>
        <member name="T:SuperOffice.Security.IImplicitIdentitySupplier">
            <summary>
            Interface for plugin grabbing Security Tokens
            </summary>
        </member>
        <member name="M:SuperOffice.Security.IImplicitIdentitySupplier.ProcessIdentities(SuperOffice.Security.Claims.ClaimsIdentitiesBuilder)">
            <summary>
            Append grabbed Security Tokens to the list of Security Tokens
            </summary>
            <param name="builder">Builder to manage Claim Identities</param>
        </member>
        <member name="T:SuperOffice.Security.TokenValidationResult">
            <summary>
            Result of validation process
            </summary>
        </member>
        <member name="F:SuperOffice.Security.TokenValidationResult.Indifferent">
            <summary>
            The plugin is indifferent to the authentication.
            </summary>
        </member>
        <member name="F:SuperOffice.Security.TokenValidationResult.Valid">
            <summary>
            The plugin can positively confirm the authentication.
            </summary>
        </member>
        <member name="F:SuperOffice.Security.TokenValidationResult.Rejected">
            <summary>
            The plugin rejects the authentication.
            </summary>
        </member>
        <member name="T:SuperOffice.Security.ISoSecurityTokenValidator">
            <summary>
            Interface for plugin capable validating the authentication process
            </summary>
        </member>
        <member name="M:SuperOffice.Security.ISoSecurityTokenValidator.TryValidateTokens(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.String@)">
            <summary>
            Validate the tokens before they are resolved.  The Authentication 
            process fails if one of the validators return Rejected.
            </summary>
            <param name="tokens">Tokens to validate</param>
            <param name="reason">The reason for the result.  This value should 
            always be set to something meaningfull if Rejected is returned.</param>
            <returns>Result of validation.</returns>
        </member>
        <member name="T:SuperOffice.Security.SoSecurityTokenValidatorAttribute">
            <summary>
            Declaration of plugin capable validating the authentication process
            </summary>
        </member>
        <member name="M:SuperOffice.Security.SoSecurityTokenValidatorAttribute.#ctor(System.String)">
            <summary>
            Declaration of plugin capable validating the authentication process
            </summary>
            <param name="name">Plugin name</param>        
        </member>
        <member name="T:SuperOffice.UI.Configuration.ICustomUIProvider">
            <summary>
            Interface used by plugin modules that wish to declare a custom GUI, using the PageBuilder
            </summary>
        </member>
        <member name="M:SuperOffice.UI.Configuration.ICustomUIProvider.GetCustomUi(System.String,System.String,System.String[])">
            <summary>
            Get a custom GUI for a given operation and client
            </summary>
            <remarks>
            A custom GUI is declared as a View, containing one or more ControlGroups, in turn containing
            controls. Standard SuperOffice controls can be used for simpler GUI's, or a custom control
            with arbitrary internal logic can be implemented and requested through this mechanism.
            <para/>
            The clienthint is used to inform the document plugin of what kind of client is at the other
            end. A document plugin or other custom UI provider 
            is free to ignore this field, but may find it useful to adapt to
            gross differences between user interface platforms - for instance,
            large-screen Web vs. handheld device.
            <para/>Note that a plugin implementing this interface might choose to present a GUI directly
            when running in a context with direct access to the user, as on a Windows Client - in this
            case returning NULL as the return value (since the GUI has already been run by the time
            the call returns). On non-interactive clients that implement the PageBuilder controlled
            user interface (like 6.web), a declarative approach is used instead.		/// </remarks>
            <param name="guiName">Name of GUI element requested. The name 'SuperOffice:DocumentDialog' is reserved
            and denotes the custom GUI view in the document dialog. Other custom GUI names are defined by the
            document (or other) plugin itself, and should be prefixed with the plugin name to keep them unique.</param>
            <param name="clientHint">Client hint, currently SuperOffice:None', 'SuperOffice:6.Web' 
            and 'SuperOffice:PocketCRM' are used. See the class 
            <see cref="T:SuperOffice.UI.Configuration.Constants.Clients"/> for predefined values.
            </param>
            <param name="additionalData">Array of strings containing whatever additional data the plugin
            may need. This parameter is intended for authors of more complex custom GUI's and works as
            a tunnel between the ultimate client and the document plugin. Standard GUI made by SuperOffice,
            such as a context menu connected to a document item in an archive, will not populate this
            member.<br/>It is strongly suggested that the convention of using name=value for each string
            array element be followed here. Also, names should be prefixed with the plugin name to
            distinguish them, in case more than one party injects values.</param>
            <returns>GUI structure, rooted in a View object. If there is no custom GUI for this name, null 
            should be returned.</returns>
        </member>
        <member name="T:SuperOffice.UI.Configuration.Constants">
            <summary>
            Constants related to custom UI
            </summary>
        </member>
        <member name="T:SuperOffice.UI.Configuration.Constants.Clients">
            <summary>
            String constants for predefined client names, used when requesting a GUI from a document plugin
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.Constants.Clients.SixWeb">
            <summary>
            The 6.web (full size) client
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.Constants.Clients.SixWin">
            <summary>
            The 6.win (full size) client
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.Constants.Clients.PocketCRM">
            <summary>
            The PocketCRM client, running on a phone or handheld device
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.Constants.Clients.None">
            <summary>
            A client that has no user interface at all; declared custom GUIs will not be instantiated in any form.
            </summary>
        </member>
        <member name="T:SuperOffice.UI.Configuration.Layout">
            <summary>
            <b>Warning: Preliminary, informal code; subject to change!</b><para/>Layout type for control containers
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.Layout.Flow">
            <summary>
            The controls in the container should have a Flow layout, one after another
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.Layout.Grid">
            <summary>
            The controls in the container should have a Grid layout, with a specified number of columns and rows
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.Layout.Absolute">
            <summary>
            The controls in the container should be positioned with absolute coordinates for each control
            </summary>
        </member>
        <member name="T:SuperOffice.UI.Configuration.View">
            <summary>
            <b>Warning: Preliminary, informal code; subject to change!</b><para/>This class represents the definition of a View - the content of one tab, in a multi-tab card
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.View.ControlGroups">
            <summary>
            The controls inside this container
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.View.Layout">
            <summary>
            The layout applied to the controls inside this container
            </summary>
        </member>
        <member name="T:SuperOffice.UI.Configuration.ControlGroup">
            <summary>
            <b>Warning: Preliminary, informal code; subject to change!</b><para/>This class represents the definition of a ControlGroup. One View
            may contain multiple control groups, each with an inner layout and set of concrete controls
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.ControlGroup.Controls">
            <summary>
            The controls inside this container
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.ControlGroup.Layout">
            <summary>
            The layout applied to the controls inside this container
            </summary>
        </member>
        <member name="T:SuperOffice.UI.Configuration.Control">
            <summary>
            <b>Warning: Preliminary, informal code; subject to change!</b><para/>This is the base class of display controls, and defines common properties
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.Control.ID">
            <summary>
            The globally unique ID that identifies this control in the GUI
            </summary>
        </member>
        <member name="F:SuperOffice.UI.Configuration.Control.DataSource">
            <summary>
            The name of the data field to which this control is bound. This will typically be of the form
            'Document.ExtraFields.Myfield', where MyField is the name used as key in the IDocumentInfo.ExtraFields dictionary
            that is passed into and out of the document plugin. The name should have the form PluginName:FieldName to ensure
            uniqueness across plugins.
            </summary>
        </member>
        <member name="T:QuoteVersionStateInfo">
            <summary>
            The various states a QuoteVersion can be in.
            </summary>
        </member>
        <member name="F:QuoteVersionStateInfo.Unknown">
            <summary>
            0: State unknown
            </summary>
        </member>
        <member name="F:QuoteVersionStateInfo.Draft">
            <summary>
            1: Draft that has been calculated, and ERP has verified it as OK
            </summary>
        </member>
        <member name="F:QuoteVersionStateInfo.DraftNotCalculated">
            <summary>
            2: This is a draft that has not been calculated, prices and other attributes may be &apos;invalid&apos; relative to ERP system rules
            </summary>
        </member>
        <member name="F:QuoteVersionStateInfo.DraftNeedsApproval">
            <summary>
            3: Draft has been checked, and there was a problem that needs (human) approval
            </summary>
        </member>
        <member name="F:QuoteVersionStateInfo.DraftApproved">
            <summary>
            4: Draft with potential problems has been human-approved
            </summary>
        </member>
        <member name="F:QuoteVersionStateInfo.DraftNotApproved">
            <summary>
            5: Draft has been checked, there was a problem, and (human) approval was NOT granted
            </summary>
        </member>
        <member name="F:QuoteVersionStateInfo.Sent">
            <summary>
            6: Sent to customer, and is now a legally binding document
            </summary>
        </member>
        <member name="F:QuoteVersionStateInfo.Archived">
            <summary>
            7: Archived - previous state saved in ArchivedState, newer versions exist
            </summary>
        </member>
        <member name="F:QuoteVersionStateInfo.Lost">
            <summary>
            8: Version was rejected be the customer - we lost the sale
            </summary>
        </member>
        <member name="F:QuoteVersionStateInfo.Sold">
            <summary>
            9: Quote was accepted and the sale is &apos;Sold&apos;
            </summary>
        </member>
        <member name="M:StringExt.FormatWith(System.String,System.Object[])">
            <summary>
            An alternative to <see cref="M:System.String.Format(System.String,System.Object)"/>, and is null-tolerant
            
            Use like this: "Some text {0}, {1}, {0}".FormatWith( 1, 2 );
            Prints: "Some text 1, 2, 1"
            </summary>
            <param name="format">Format string, may be null or empty</param>
            <param name="values">Optional parameter values</param>
            <returns>Formatted string</returns>
        </member>
    </members>
</doc>
